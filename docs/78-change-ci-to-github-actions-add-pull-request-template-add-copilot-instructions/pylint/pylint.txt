************* Module /home/runner/work/AgentLib-MPC/AgentLib-MPC/pylintrc
pylintrc:1:0: R0022: Useless option value for '--disable', 'print-statement' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'parameter-unpacking' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'unpacking-in-except' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'old-raise-syntax' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'backtick' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'import-star-module-level' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'apply-builtin' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'basestring-builtin' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'buffer-builtin' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'cmp-builtin' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'coerce-builtin' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'execfile-builtin' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'file-builtin' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'long-builtin' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'raw_input-builtin' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'reduce-builtin' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'standarderror-builtin' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'unicode-builtin' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'xrange-builtin' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'coerce-method' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'delslice-method' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'getslice-method' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'setslice-method' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'no-absolute-import' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'old-division' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'dict-iter-method' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'dict-view-method' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'next-method-called' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'metaclass-assignment' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'indexing-exception' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'raising-string' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'reload-builtin' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'oct-method' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'hex-method' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'nonzero-method' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'cmp-method' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'input-builtin' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'round-builtin' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'intern-builtin' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'unichr-builtin' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'map-builtin-not-iterating' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'zip-builtin-not-iterating' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'range-builtin-not-iterating' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'filter-builtin-not-iterating' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'using-cmp-argument' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'div-method' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'idiv-method' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'rdiv-method' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'exception-message-attribute' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'invalid-str-codec' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'sys-max-int' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'bad-python3-import' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'deprecated-string-function' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'deprecated-str-translate-call' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'deprecated-itertools-function' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'deprecated-types-field' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'next-method-defined' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'dict-items-not-iterating' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'dict-keys-not-iterating' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'dict-values-not-iterating' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'deprecated-operator-function' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'deprecated-urllib-function' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'xreadlines-attribute' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'deprecated-sys-function' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'exception-escape' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'comprehension-escape' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'no-self-use' was moved to an optional extension, see https://pylint.readthedocs.io/en/latest/whatsnew/2/2.14/summary.html#removed-checkers. (useless-option-value)
pylintrc:1:0: W0012: Unknown option value for '--disable', expected a valid pylint message and got 'long-suffix' (unknown-option-value)
pylintrc:1:0: W0012: Unknown option value for '--disable', expected a valid pylint message and got 'old-ne-operator' (unknown-option-value)
pylintrc:1:0: W0012: Unknown option value for '--disable', expected a valid pylint message and got 'old-octal-literal' (unknown-option-value)
pylintrc:1:0: W0012: Unknown option value for '--disable', expected a valid pylint message and got 'non-ascii-bytes-literal' (unknown-option-value)
pylintrc:1:0: W0012: Unknown option value for '--disable', expected a valid pylint message and got 'eq-without-hash' (unknown-option-value)
************* Module agentlib_mpc.utils.plotting.basic
agentlib_mpc/utils/plotting/basic.py:1:0: F0002: agentlib_mpc/utils/plotting/basic.py: Fatal error while checking 'agentlib_mpc/utils/plotting/basic.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-14-32.txt'. (astroid-error)
************* Module agentlib_mpc.data_structures.mpc_datamodels
agentlib_mpc/data_structures/mpc_datamodels.py:1:0: F0002: agentlib_mpc/data_structures/mpc_datamodels.py: Fatal error while checking 'agentlib_mpc/data_structures/mpc_datamodels.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-14-33.txt'. (astroid-error)
************* Module agentlib_mpc.data_structures.admm_datatypes
agentlib_mpc/data_structures/admm_datatypes.py:1:0: F0002: agentlib_mpc/data_structures/admm_datatypes.py: Fatal error while checking 'agentlib_mpc/data_structures/admm_datatypes.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-14-33.txt'. (astroid-error)
************* Module agentlib_mpc.data_structures.casadi_utils
agentlib_mpc/data_structures/casadi_utils.py:1:0: F0002: agentlib_mpc/data_structures/casadi_utils.py: Fatal error while checking 'agentlib_mpc/data_structures/casadi_utils.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-14-33.txt'. (astroid-error)
************* Module admm_4rooms_main_coord
examples/exchange_admm/admm_4rooms_main_coord.py:1:0: C0114: Missing module docstring (missing-module-docstring)
examples/exchange_admm/admm_4rooms_main_coord.py:4:0: E0401: Unable to import 'agentlib.utils.multi_agent_system' (import-error)
examples/exchange_admm/admm_4rooms_main_coord.py:17:0: C0116: Missing function or method docstring (missing-function-docstring)
examples/exchange_admm/admm_4rooms_main_coord.py:17:0: R0914: Too many local variables (18/15) (too-many-locals)
examples/exchange_admm/admm_4rooms_main_coord.py:33:13: W1514: Using open without explicitly specifying an encoding (unspecified-encoding)
examples/exchange_admm/admm_4rooms_main_coord.py:33:27: C0103: Variable name "f" doesn't conform to snake_case naming style (invalid-name)
examples/exchange_admm/admm_4rooms_main_coord.py:38:21: W1514: Using open without explicitly specifying an encoding (unspecified-encoding)
examples/exchange_admm/admm_4rooms_main_coord.py:38:34: C0103: Variable name "f" doesn't conform to snake_case naming style (invalid-name)
examples/exchange_admm/admm_4rooms_main_coord.py:51:8: C0415: Import outside toplevel (matplotlib.pyplot) (import-outside-toplevel)
examples/exchange_admm/admm_4rooms_main_coord.py:51:8: E0401: Unable to import 'matplotlib.pyplot' (import-error)
examples/exchange_admm/admm_4rooms_main_coord.py:53:13: C0103: Variable name "ax" doesn't conform to snake_case naming style (invalid-name)
examples/exchange_admm/admm_4rooms_main_coord.py:53:8: W0612: Unused variable 'fig' (unused-variable)
************* Module admm_4rooms_main
examples/exchange_admm/admm_4rooms_main.py:1:0: C0114: Missing module docstring (missing-module-docstring)
examples/exchange_admm/admm_4rooms_main.py:4:0: E0401: Unable to import 'agentlib.utils.multi_agent_system' (import-error)
examples/exchange_admm/admm_4rooms_main.py:7:0: C0116: Missing function or method docstring (missing-function-docstring)
examples/exchange_admm/admm_4rooms_main.py:18:13: W1514: Using open without explicitly specifying an encoding (unspecified-encoding)
examples/exchange_admm/admm_4rooms_main.py:18:27: C0103: Variable name "f" doesn't conform to snake_case naming style (invalid-name)
examples/exchange_admm/admm_4rooms_main.py:23:21: W1514: Using open without explicitly specifying an encoding (unspecified-encoding)
examples/exchange_admm/admm_4rooms_main.py:23:34: C0103: Variable name "f" doesn't conform to snake_case naming style (invalid-name)
examples/exchange_admm/admm_4rooms_main.py:21:12: W0612: Unused variable 'i' (unused-variable)
examples/exchange_admm/admm_4rooms_main.py:31:0: C0116: Missing function or method docstring (missing-function-docstring)
examples/exchange_admm/admm_4rooms_main.py:52:8: C0415: Import outside toplevel (matplotlib.pyplot) (import-outside-toplevel)
examples/exchange_admm/admm_4rooms_main.py:52:8: E0401: Unable to import 'matplotlib.pyplot' (import-error)
examples/exchange_admm/admm_4rooms_main.py:53:8: C0415: Import outside toplevel (agentlib_mpc.utils.analysis.admm_at_time_step) (import-outside-toplevel)
examples/exchange_admm/admm_4rooms_main.py:55:13: C0103: Variable name "ax" doesn't conform to snake_case naming style (invalid-name)
examples/exchange_admm/admm_4rooms_main.py:34:4: W0613: Unused argument 'start_pred' (unused-argument)
examples/exchange_admm/admm_4rooms_main.py:55:8: W0612: Unused variable 'fig' (unused-variable)
examples/exchange_admm/admm_4rooms_main.py:53:8: W0611: Unused admm_at_time_step imported from agentlib_mpc.utils.analysis (unused-import)
************* Module models.rlt_model
examples/exchange_admm/models/rlt_model.py:1:0: C0114: Missing module docstring (missing-module-docstring)
examples/exchange_admm/models/rlt_model.py:11:0: C0115: Missing class docstring (missing-class-docstring)
examples/exchange_admm/models/rlt_model.py:19:24: W1309: Using an f-string that does not have any interpolated variables (f-string-without-interpolation)
examples/exchange_admm/models/rlt_model.py:29:24: W1309: Using an f-string that does not have any interpolated variables (f-string-without-interpolation)
examples/exchange_admm/models/rlt_model.py:40:24: W1309: Using an f-string that does not have any interpolated variables (f-string-without-interpolation)
examples/exchange_admm/models/rlt_model.py:45:0: C0115: Missing class docstring (missing-class-docstring)
************* Module models.room_model
examples/exchange_admm/models/room_model.py:1:0: C0114: Missing module docstring (missing-module-docstring)
examples/exchange_admm/models/room_model.py:11:0: C0115: Missing class docstring (missing-class-docstring)
examples/exchange_admm/models/room_model.py:40:17: W1309: Using an f-string that does not have any interpolated variables (f-string-without-interpolation)
examples/exchange_admm/models/room_model.py:82:0: C0115: Missing class docstring (missing-class-docstring)
examples/exchange_admm/models/room_model.py:106:0: C0115: Missing class docstring (missing-class-docstring)
examples/exchange_admm/models/room_model.py:120:0: C0115: Missing class docstring (missing-class-docstring)
************* Module generate_training_data
examples/output_ann/generate_training_data.py:1:0: C0114: Missing module docstring (missing-module-docstring)
examples/output_ann/generate_training_data.py:1:0: F0002: examples/output_ann/generate_training_data.py: Fatal error while checking 'examples/output_ann/generate_training_data.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-14-34.txt'. (astroid-error)
************* Module animate
examples/4_Room_ADMM_Coordinator/animate.py:1:0: C0114: Missing module docstring (missing-module-docstring)
examples/4_Room_ADMM_Coordinator/animate.py:3:0: E0401: Unable to import 'matplotlib.pyplot' (import-error)
examples/4_Room_ADMM_Coordinator/animate.py:4:0: E0401: Unable to import 'pandas' (import-error)
examples/4_Room_ADMM_Coordinator/animate.py:11:0: C0116: Missing function or method docstring (missing-function-docstring)
examples/4_Room_ADMM_Coordinator/animate.py:11:35: C0103: Argument name "ax" doesn't conform to snake_case naming style (invalid-name)
examples/4_Room_ADMM_Coordinator/animate.py:25:0: C0116: Missing function or method docstring (missing-function-docstring)
examples/4_Room_ADMM_Coordinator/animate.py:28:38: W1309: Using an f-string that does not have any interpolated variables (f-string-without-interpolation)
************* Module admm_4rooms_coord_main
examples/4_Room_ADMM_Coordinator/admm_4rooms_coord_main.py:1:0: C0114: Missing module docstring (missing-module-docstring)
examples/4_Room_ADMM_Coordinator/admm_4rooms_coord_main.py:3:0: E0401: Unable to import 'agentlib.utils.multi_agent_system' (import-error)
examples/4_Room_ADMM_Coordinator/admm_4rooms_coord_main.py:16:0: C0116: Missing function or method docstring (missing-function-docstring)
examples/4_Room_ADMM_Coordinator/admm_4rooms_coord_main.py:16:0: R0914: Too many local variables (21/15) (too-many-locals)
examples/4_Room_ADMM_Coordinator/admm_4rooms_coord_main.py:33:8: C0415: Import outside toplevel (matplotlib.pyplot) (import-outside-toplevel)
examples/4_Room_ADMM_Coordinator/admm_4rooms_coord_main.py:33:8: E0401: Unable to import 'matplotlib.pyplot' (import-error)
examples/4_Room_ADMM_Coordinator/admm_4rooms_coord_main.py:34:8: C0415: Import outside toplevel (agentlib_mpc.utils.analysis.admm_at_time_step) (import-outside-toplevel)
examples/4_Room_ADMM_Coordinator/admm_4rooms_coord_main.py:36:8: C0103: Variable name "nRooms" doesn't conform to snake_case naming style (invalid-name)
examples/4_Room_ADMM_Coordinator/admm_4rooms_coord_main.py:37:8: C0103: Variable name "plotPredTimeStep" doesn't conform to snake_case naming style (invalid-name)
examples/4_Room_ADMM_Coordinator/admm_4rooms_coord_main.py:42:16: W4701: Iterated list 'plotPredTimeStep' is being modified inside for loop body, consider iterating through a copy of it instead. (modified-iterating-list)
examples/4_Room_ADMM_Coordinator/admm_4rooms_coord_main.py:44:8: C0103: Function name "mDotSumSim" doesn't conform to snake_case naming style (invalid-name)
examples/4_Room_ADMM_Coordinator/admm_4rooms_coord_main.py:45:12: C0103: Variable name "mDotSum" doesn't conform to snake_case naming style (invalid-name)
examples/4_Room_ADMM_Coordinator/admm_4rooms_coord_main.py:47:16: C0103: Variable name "mDotSum" doesn't conform to snake_case naming style (invalid-name)
examples/4_Room_ADMM_Coordinator/admm_4rooms_coord_main.py:50:8: C0103: Function name "mDotSumPred" doesn't conform to snake_case naming style (invalid-name)
examples/4_Room_ADMM_Coordinator/admm_4rooms_coord_main.py:51:12: C0103: Variable name "mDotSum" doesn't conform to snake_case naming style (invalid-name)
examples/4_Room_ADMM_Coordinator/admm_4rooms_coord_main.py:56:16: C0103: Variable name "mDotSum" doesn't conform to snake_case naming style (invalid-name)
examples/4_Room_ADMM_Coordinator/admm_4rooms_coord_main.py:59:8: C0103: Variable name "colorRoom" doesn't conform to snake_case naming style (invalid-name)
examples/4_Room_ADMM_Coordinator/admm_4rooms_coord_main.py:60:13: C0103: Variable name "ax" doesn't conform to snake_case naming style (invalid-name)
examples/4_Room_ADMM_Coordinator/admm_4rooms_coord_main.py:96:8: W0106: Expression "[ax[1].plot(mDotSumPred(j), marker='x', label=f'total air mass flow at {j} pred') for j in plotPredTimeStep]" is assigned to nothing (expression-not-assigned)
examples/4_Room_ADMM_Coordinator/admm_4rooms_coord_main.py:60:8: W0612: Unused variable 'fig' (unused-variable)
************* Module rlt_model
examples/4_Room_ADMM_Coordinator/models/rlt_model.py:1:0: C0114: Missing module docstring (missing-module-docstring)
examples/4_Room_ADMM_Coordinator/models/rlt_model.py:1:0: W0401: Wildcard import agentlib_mpc.models.casadi_model (wildcard-import)
examples/4_Room_ADMM_Coordinator/models/rlt_model.py:26:0: C0115: Missing class docstring (missing-class-docstring)
examples/4_Room_ADMM_Coordinator/models/rlt_model.py:1:0: F0002: examples/4_Room_ADMM_Coordinator/models/rlt_model.py: Fatal error while checking 'examples/4_Room_ADMM_Coordinator/models/rlt_model.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-14-35.txt'. (astroid-error)
************* Module room_model
examples/4_Room_ADMM_Coordinator/models/room_model.py:1:0: C0114: Missing module docstring (missing-module-docstring)
examples/4_Room_ADMM_Coordinator/models/room_model.py:1:0: W0401: Wildcard import agentlib_mpc.models.casadi_model (wildcard-import)
examples/4_Room_ADMM_Coordinator/models/room_model.py:1:0: C0413: Import "from agentlib_mpc.models.casadi_model import *" should be placed at the top of the module (wrong-import-position)
examples/4_Room_ADMM_Coordinator/models/room_model.py:4:0: C0115: Missing class docstring (missing-class-docstring)
examples/4_Room_ADMM_Coordinator/models/room_model.py:1:0: F0002: examples/4_Room_ADMM_Coordinator/models/room_model.py: Fatal error while checking 'examples/4_Room_ADMM_Coordinator/models/room_model.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-14-35.txt'. (astroid-error)
************* Module simple_mpc_time_dependent_obj
examples/one_room_mpc/physical/simple_mpc_time_dependent_obj.py:99:0: C0301: Line too long (116/100) (line-too-long)
examples/one_room_mpc/physical/simple_mpc_time_dependent_obj.py:283:23: W1401: Anomalous backslash in string: '\d'. String constant might be missing an r prefix. (anomalous-backslash-in-string)
examples/one_room_mpc/physical/simple_mpc_time_dependent_obj.py:1:0: C0114: Missing module docstring (missing-module-docstring)
examples/one_room_mpc/physical/simple_mpc_time_dependent_obj.py:1:0: C0413: Import "import logging" should be placed at the top of the module (wrong-import-position)
examples/one_room_mpc/physical/simple_mpc_time_dependent_obj.py:2:0: C0413: Import "import os" should be placed at the top of the module (wrong-import-position)
examples/one_room_mpc/physical/simple_mpc_time_dependent_obj.py:3:0: C0413: Import "from pathlib import Path" should be placed at the top of the module (wrong-import-position)
examples/one_room_mpc/physical/simple_mpc_time_dependent_obj.py:1:0: F0002: examples/one_room_mpc/physical/simple_mpc_time_dependent_obj.py: Fatal error while checking 'examples/one_room_mpc/physical/simple_mpc_time_dependent_obj.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-14-35.txt'. (astroid-error)
************* Module simple_mpc_multiple_shooting
examples/one_room_mpc/physical/simple_mpc_multiple_shooting.py:261:23: W1401: Anomalous backslash in string: '\d'. String constant might be missing an r prefix. (anomalous-backslash-in-string)
examples/one_room_mpc/physical/simple_mpc_multiple_shooting.py:1:0: C0114: Missing module docstring (missing-module-docstring)
examples/one_room_mpc/physical/simple_mpc_multiple_shooting.py:1:0: C0413: Import "import logging" should be placed at the top of the module (wrong-import-position)
examples/one_room_mpc/physical/simple_mpc_multiple_shooting.py:2:0: C0413: Import "import os" should be placed at the top of the module (wrong-import-position)
examples/one_room_mpc/physical/simple_mpc_multiple_shooting.py:3:0: C0413: Import "from pathlib import Path" should be placed at the top of the module (wrong-import-position)
examples/one_room_mpc/physical/simple_mpc_multiple_shooting.py:1:0: F0002: examples/one_room_mpc/physical/simple_mpc_multiple_shooting.py: Fatal error while checking 'examples/one_room_mpc/physical/simple_mpc_multiple_shooting.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-14-35.txt'. (astroid-error)
************* Module simple_mpc_with_clonemap
examples/one_room_mpc/physical/simple_mpc_with_clonemap.py:1:0: C0114: Missing module docstring (missing-module-docstring)
examples/one_room_mpc/physical/simple_mpc_with_clonemap.py:1:0: C0413: Import "import logging" should be placed at the top of the module (wrong-import-position)
examples/one_room_mpc/physical/simple_mpc_with_clonemap.py:2:0: C0413: Import "from pathlib import Path" should be placed at the top of the module (wrong-import-position)
examples/one_room_mpc/physical/simple_mpc_with_clonemap.py:3:0: C0413: Import "import json" should be placed at the top of the module (wrong-import-position)
examples/one_room_mpc/physical/simple_mpc_with_clonemap.py:4:0: E0401: Unable to import 'requests' (import-error)
examples/one_room_mpc/physical/simple_mpc_with_clonemap.py:4:0: C0413: Import "import requests" should be placed at the top of the module (wrong-import-position)
examples/one_room_mpc/physical/simple_mpc_with_clonemap.py:10:0: C0116: Missing function or method docstring (missing-function-docstring)
examples/one_room_mpc/physical/simple_mpc_with_clonemap.py:12:4: C0103: Variable name "URL" doesn't conform to snake_case naming style (invalid-name)
examples/one_room_mpc/physical/simple_mpc_with_clonemap.py:13:4: C0103: Variable name "CFG_PATH" doesn't conform to snake_case naming style (invalid-name)
examples/one_room_mpc/physical/simple_mpc_with_clonemap.py:14:9: W1514: Using open without explicitly specifying an encoding (unspecified-encoding)
examples/one_room_mpc/physical/simple_mpc_with_clonemap.py:15:8: C0103: Variable name "DATA" doesn't conform to snake_case naming style (invalid-name)
examples/one_room_mpc/physical/simple_mpc_time_dependent_obj.py:1:0: C0411: standard import "import logging" should be placed before "from agentlib_mpc.models.casadi_model import *" (wrong-import-order)
examples/one_room_mpc/physical/simple_mpc_time_dependent_obj.py:2:0: C0411: standard import "import os" should be placed before "from agentlib_mpc.models.casadi_model import *" (wrong-import-order)
examples/one_room_mpc/physical/simple_mpc_time_dependent_obj.py:3:0: C0411: standard import "from pathlib import Path" should be placed before "from agentlib_mpc.models.casadi_model import *" (wrong-import-order)
examples/one_room_mpc/physical/simple_mpc_multiple_shooting.py:1:0: C0411: standard import "import logging" should be placed before "from agentlib_mpc.models.casadi_model import *" (wrong-import-order)
examples/one_room_mpc/physical/simple_mpc_multiple_shooting.py:2:0: C0411: standard import "import os" should be placed before "from agentlib_mpc.models.casadi_model import *" (wrong-import-order)
examples/one_room_mpc/physical/simple_mpc_multiple_shooting.py:3:0: C0411: standard import "from pathlib import Path" should be placed before "from agentlib_mpc.models.casadi_model import *" (wrong-import-order)
examples/one_room_mpc/physical/simple_mpc_with_clonemap.py:1:0: C0411: standard import "import logging" should be placed before "from agentlib_mpc.models.casadi_model import *" (wrong-import-order)
examples/one_room_mpc/physical/simple_mpc_with_clonemap.py:2:0: C0411: standard import "from pathlib import Path" should be placed before "from agentlib_mpc.models.casadi_model import *" (wrong-import-order)
examples/one_room_mpc/physical/simple_mpc_with_clonemap.py:3:0: C0411: standard import "import json" should be placed before "from agentlib_mpc.models.casadi_model import *" (wrong-import-order)
examples/one_room_mpc/physical/simple_mpc_with_clonemap.py:4:0: C0411: third party import "import requests" should be placed before "from agentlib_mpc.models.casadi_model import *" (wrong-import-order)
examples/one_room_mpc/physical/simple_mpc_multiple_shooting.py:1:0: C0412: Imports from package logging are not grouped (ungrouped-imports)
examples/one_room_mpc/physical/simple_mpc_multiple_shooting.py:2:0: C0412: Imports from package os are not grouped (ungrouped-imports)
examples/one_room_mpc/physical/simple_mpc_multiple_shooting.py:3:0: C0412: Imports from package pathlib are not grouped (ungrouped-imports)
examples/one_room_mpc/physical/simple_mpc_with_clonemap.py:1:0: C0412: Imports from package logging are not grouped (ungrouped-imports)
examples/one_room_mpc/physical/simple_mpc_with_clonemap.py:2:0: C0412: Imports from package pathlib are not grouped (ungrouped-imports)
************* Module simple_mpc
examples/one_room_mpc/physical/simple_mpc.py:261:23: W1401: Anomalous backslash in string: '\d'. String constant might be missing an r prefix. (anomalous-backslash-in-string)
examples/one_room_mpc/physical/simple_mpc.py:1:0: C0114: Missing module docstring (missing-module-docstring)
examples/one_room_mpc/physical/simple_mpc.py:1:0: F0002: examples/one_room_mpc/physical/simple_mpc.py: Fatal error while checking 'examples/one_room_mpc/physical/simple_mpc.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-14-35.txt'. (astroid-error)
************* Module simple_mpc_with_time_variant_inputs
examples/one_room_mpc/physical/simple_mpc_with_time_variant_inputs.py:1:0: C0114: Missing module docstring (missing-module-docstring)
examples/one_room_mpc/physical/simple_mpc_with_time_variant_inputs.py:1:0: F0002: examples/one_room_mpc/physical/simple_mpc_with_time_variant_inputs.py: Fatal error while checking 'examples/one_room_mpc/physical/simple_mpc_with_time_variant_inputs.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-14-35.txt'. (astroid-error)
************* Module with_change_control_penalty
examples/one_room_mpc/physical/with_change_control_penalty.py:217:27: W1401: Anomalous backslash in string: '\d'. String constant might be missing an r prefix. (anomalous-backslash-in-string)
examples/one_room_mpc/physical/with_change_control_penalty.py:1:0: C0114: Missing module docstring (missing-module-docstring)
examples/one_room_mpc/physical/with_change_control_penalty.py:1:0: F0002: examples/one_room_mpc/physical/with_change_control_penalty.py: Fatal error while checking 'examples/one_room_mpc/physical/with_change_control_penalty.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-14-35.txt'. (astroid-error)
************* Module mixed_integer.mixed_integer_mpc
examples/one_room_mpc/physical/mixed_integer/mixed_integer_mpc.py:261:0: C0301: Line too long (129/100) (line-too-long)
examples/one_room_mpc/physical/mixed_integer/mixed_integer_mpc.py:256:27: W1401: Anomalous backslash in string: '\d'. String constant might be missing an r prefix. (anomalous-backslash-in-string)
examples/one_room_mpc/physical/mixed_integer/mixed_integer_mpc.py:1:0: C0114: Missing module docstring (missing-module-docstring)
examples/one_room_mpc/physical/mixed_integer/mixed_integer_mpc.py:1:0: F0002: examples/one_room_mpc/physical/mixed_integer/mixed_integer_mpc.py: Fatal error while checking 'examples/one_room_mpc/physical/mixed_integer/mixed_integer_mpc.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-14-35.txt'. (astroid-error)
************* Module mixed_integer.mixed_integer_mpc_cia
examples/one_room_mpc/physical/mixed_integer/mixed_integer_mpc_cia.py:261:0: C0301: Line too long (129/100) (line-too-long)
examples/one_room_mpc/physical/mixed_integer/mixed_integer_mpc_cia.py:256:27: W1401: Anomalous backslash in string: '\d'. String constant might be missing an r prefix. (anomalous-backslash-in-string)
examples/one_room_mpc/physical/mixed_integer/mixed_integer_mpc_cia.py:1:0: C0114: Missing module docstring (missing-module-docstring)
examples/one_room_mpc/physical/mixed_integer/mixed_integer_mpc_cia.py:1:0: F0002: examples/one_room_mpc/physical/mixed_integer/mixed_integer_mpc_cia.py: Fatal error while checking 'examples/one_room_mpc/physical/mixed_integer/mixed_integer_mpc_cia.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-14-35.txt'. (astroid-error)
************* Module training_linreg
examples/one_room_mpc/linreg/training_linreg.py:68:25: W1401: Anomalous backslash in string: '\d'. String constant might be missing an r prefix. (anomalous-backslash-in-string)
examples/one_room_mpc/linreg/training_linreg.py:1:0: C0114: Missing module docstring (missing-module-docstring)
examples/one_room_mpc/linreg/training_linreg.py:4:0: E0401: Unable to import 'agentlib' (import-error)
examples/one_room_mpc/linreg/training_linreg.py:5:0: E0401: Unable to import 'matplotlib.pyplot' (import-error)
examples/one_room_mpc/linreg/training_linreg.py:7:0: E0401: Unable to import 'agentlib.utils.multi_agent_system' (import-error)
examples/one_room_mpc/linreg/training_linreg.py:15:0: C0115: Missing class docstring (missing-class-docstring)
examples/one_room_mpc/linreg/training_linreg.py:45:0: C0115: Missing class docstring (missing-class-docstring)
examples/one_room_mpc/linreg/training_linreg.py:48:4: C0116: Missing function or method docstring (missing-function-docstring)
examples/one_room_mpc/linreg/training_linreg.py:48:25: W0613: Unused argument 't_start' (unused-argument)
examples/one_room_mpc/linreg/training_linreg.py:48:34: W0613: Unused argument 't_sample' (unused-argument)
examples/one_room_mpc/linreg/training_linreg.py:53:4: C0116: Missing function or method docstring (missing-function-docstring)
examples/one_room_mpc/linreg/training_linreg.py:57:0: C0116: Missing function or method docstring (missing-function-docstring)
examples/one_room_mpc/linreg/training_linreg.py:61:10: C0103: Variable name "ax_T_out" doesn't conform to snake_case naming style (invalid-name)
examples/one_room_mpc/linreg/training_linreg.py:61:20: C0103: Variable name "ax_mDot" doesn't conform to snake_case naming style (invalid-name)
examples/one_room_mpc/linreg/training_linreg.py:61:4: W0612: Unused variable 'fig' (unused-variable)
examples/one_room_mpc/linreg/training_linreg.py:74:0: C0116: Missing function or method docstring (missing-function-docstring)
examples/one_room_mpc/linreg/training_linreg.py:182:0: C0116: Missing function or method docstring (missing-function-docstring)
examples/one_room_mpc/physical/with_change_control_penalty.py:1:0: C0412: Imports from package logging are not grouped (ungrouped-imports)
examples/one_room_mpc/physical/with_change_control_penalty.py:2:0: C0412: Imports from package os are not grouped (ungrouped-imports)
examples/one_room_mpc/physical/with_change_control_penalty.py:3:0: C0412: Imports from package pathlib are not grouped (ungrouped-imports)
examples/one_room_mpc/physical/mixed_integer/mixed_integer_mpc.py:1:0: C0412: Imports from package logging are not grouped (ungrouped-imports)
examples/one_room_mpc/physical/mixed_integer/mixed_integer_mpc.py:2:0: C0412: Imports from package os are not grouped (ungrouped-imports)
examples/one_room_mpc/physical/mixed_integer/mixed_integer_mpc.py:3:0: C0412: Imports from package pathlib are not grouped (ungrouped-imports)
examples/one_room_mpc/physical/mixed_integer/mixed_integer_mpc_cia.py:1:0: C0412: Imports from package logging are not grouped (ungrouped-imports)
examples/one_room_mpc/physical/mixed_integer/mixed_integer_mpc_cia.py:2:0: C0412: Imports from package os are not grouped (ungrouped-imports)
examples/one_room_mpc/physical/mixed_integer/mixed_integer_mpc_cia.py:3:0: C0412: Imports from package pathlib are not grouped (ungrouped-imports)
examples/one_room_mpc/linreg/training_linreg.py:1:0: C0412: Imports from package logging are not grouped (ungrouped-imports)
************* Module model
examples/one_room_mpc/linreg/model.py:1:0: C0114: Missing module docstring (missing-module-docstring)
examples/one_room_mpc/linreg/model.py:1:0: F0002: examples/one_room_mpc/linreg/model.py: Fatal error while checking 'examples/one_room_mpc/linreg/model.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-14-36.txt'. (astroid-error)
************* Module simple_mpc_linreg
examples/one_room_mpc/linreg/simple_mpc_linreg.py:152:27: W1401: Anomalous backslash in string: '\d'. String constant might be missing an r prefix. (anomalous-backslash-in-string)
examples/one_room_mpc/linreg/simple_mpc_linreg.py:1:0: C0114: Missing module docstring (missing-module-docstring)
examples/one_room_mpc/linreg/simple_mpc_linreg.py:4:0: E0401: Unable to import 'matplotlib.pyplot' (import-error)
examples/one_room_mpc/linreg/simple_mpc_linreg.py:7:0: E0401: Unable to import 'agentlib.utils.multi_agent_system' (import-error)
examples/one_room_mpc/linreg/simple_mpc_linreg.py:18:0: C0116: Missing function or method docstring (missing-function-docstring)
examples/one_room_mpc/linreg/simple_mpc_linreg.py:87:0: C0116: Missing function or method docstring (missing-function-docstring)
examples/one_room_mpc/linreg/simple_mpc_linreg.py:87:0: R0914: Too many local variables (17/15) (too-many-locals)
examples/one_room_mpc/linreg/simple_mpc_linreg.py:104:8: C0415: Import outside toplevel (training_linreg) (import-outside-toplevel)
examples/one_room_mpc/linreg/simple_mpc_linreg.py:122:13: C0103: Variable name "ax" doesn't conform to snake_case naming style (invalid-name)
examples/one_room_mpc/linreg/simple_mpc_linreg.py:126:8: C0103: Variable name "energy_cost_kWh" doesn't conform to snake_case naming style (invalid-name)
examples/one_room_mpc/linreg/simple_mpc_linreg.py:122:8: W0612: Unused variable 'fig' (unused-variable)
examples/one_room_mpc/linreg/simple_mpc_linreg.py:5:0: C0411: standard import "import os" should be placed before "import matplotlib.pyplot as plt" (wrong-import-order)
************* Module simple_mpc_gpr
examples/one_room_mpc/gpr/simple_mpc_gpr.py:151:27: W1401: Anomalous backslash in string: '\d'. String constant might be missing an r prefix. (anomalous-backslash-in-string)
examples/one_room_mpc/gpr/simple_mpc_gpr.py:1:0: C0114: Missing module docstring (missing-module-docstring)
examples/one_room_mpc/gpr/simple_mpc_gpr.py:4:0: E0401: Unable to import 'matplotlib.pyplot' (import-error)
examples/one_room_mpc/gpr/simple_mpc_gpr.py:7:0: E0401: Unable to import 'agentlib.utils.multi_agent_system' (import-error)
examples/one_room_mpc/gpr/simple_mpc_gpr.py:18:0: C0116: Missing function or method docstring (missing-function-docstring)
examples/one_room_mpc/gpr/simple_mpc_gpr.py:87:0: C0116: Missing function or method docstring (missing-function-docstring)
examples/one_room_mpc/gpr/simple_mpc_gpr.py:87:0: R0914: Too many local variables (17/15) (too-many-locals)
examples/one_room_mpc/gpr/simple_mpc_gpr.py:103:8: C0415: Import outside toplevel (training_gpr) (import-outside-toplevel)
examples/one_room_mpc/gpr/simple_mpc_gpr.py:121:13: C0103: Variable name "ax" doesn't conform to snake_case naming style (invalid-name)
examples/one_room_mpc/gpr/simple_mpc_gpr.py:125:8: C0103: Variable name "energy_cost_kWh" doesn't conform to snake_case naming style (invalid-name)
examples/one_room_mpc/gpr/simple_mpc_gpr.py:121:8: W0612: Unused variable 'fig' (unused-variable)
examples/one_room_mpc/gpr/simple_mpc_gpr.py:5:0: C0411: standard import "import os" should be placed before "import matplotlib.pyplot as plt" (wrong-import-order)
************* Module training_gpr
examples/one_room_mpc/gpr/training_gpr.py:67:25: W1401: Anomalous backslash in string: '\d'. String constant might be missing an r prefix. (anomalous-backslash-in-string)
examples/one_room_mpc/gpr/training_gpr.py:1:0: C0114: Missing module docstring (missing-module-docstring)
examples/one_room_mpc/gpr/training_gpr.py:4:0: E0401: Unable to import 'agentlib' (import-error)
examples/one_room_mpc/gpr/training_gpr.py:5:0: E0401: Unable to import 'matplotlib.pyplot' (import-error)
examples/one_room_mpc/gpr/training_gpr.py:7:0: E0401: Unable to import 'agentlib.utils.multi_agent_system' (import-error)
examples/one_room_mpc/gpr/training_gpr.py:14:0: C0115: Missing class docstring (missing-class-docstring)
examples/one_room_mpc/gpr/training_gpr.py:44:0: C0115: Missing class docstring (missing-class-docstring)
examples/one_room_mpc/gpr/training_gpr.py:47:4: C0116: Missing function or method docstring (missing-function-docstring)
examples/one_room_mpc/gpr/training_gpr.py:47:25: W0613: Unused argument 't_start' (unused-argument)
examples/one_room_mpc/gpr/training_gpr.py:47:34: W0613: Unused argument 't_sample' (unused-argument)
examples/one_room_mpc/gpr/training_gpr.py:52:4: C0116: Missing function or method docstring (missing-function-docstring)
examples/one_room_mpc/gpr/training_gpr.py:56:0: C0116: Missing function or method docstring (missing-function-docstring)
examples/one_room_mpc/gpr/training_gpr.py:60:10: C0103: Variable name "ax_T_out" doesn't conform to snake_case naming style (invalid-name)
examples/one_room_mpc/gpr/training_gpr.py:60:20: C0103: Variable name "ax_mDot" doesn't conform to snake_case naming style (invalid-name)
examples/one_room_mpc/gpr/training_gpr.py:60:4: W0612: Unused variable 'fig' (unused-variable)
examples/one_room_mpc/gpr/training_gpr.py:73:0: C0116: Missing function or method docstring (missing-function-docstring)
examples/one_room_mpc/gpr/training_gpr.py:188:0: C0116: Missing function or method docstring (missing-function-docstring)
examples/one_room_mpc/gpr/model.py:1:0: C0114: Missing module docstring (missing-module-docstring)
examples/one_room_mpc/gpr/model.py:1:0: F0002: examples/one_room_mpc/gpr/model.py: Fatal error while checking 'examples/one_room_mpc/gpr/model.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-14-36.txt'. (astroid-error)
************* Module training_nn
examples/one_room_mpc/ann/training_nn.py:68:25: W1401: Anomalous backslash in string: '\d'. String constant might be missing an r prefix. (anomalous-backslash-in-string)
examples/one_room_mpc/ann/training_nn.py:1:0: C0114: Missing module docstring (missing-module-docstring)
examples/one_room_mpc/ann/training_nn.py:4:0: E0401: Unable to import 'agentlib' (import-error)
examples/one_room_mpc/ann/training_nn.py:5:0: E0401: Unable to import 'matplotlib.pyplot' (import-error)
examples/one_room_mpc/ann/training_nn.py:7:0: E0401: Unable to import 'agentlib.utils.multi_agent_system' (import-error)
examples/one_room_mpc/ann/training_nn.py:15:0: C0115: Missing class docstring (missing-class-docstring)
examples/one_room_mpc/ann/training_nn.py:45:0: C0115: Missing class docstring (missing-class-docstring)
examples/one_room_mpc/ann/training_nn.py:48:4: C0116: Missing function or method docstring (missing-function-docstring)
examples/one_room_mpc/ann/training_nn.py:48:25: W0613: Unused argument 't_start' (unused-argument)
examples/one_room_mpc/ann/training_nn.py:48:34: W0613: Unused argument 't_sample' (unused-argument)
examples/one_room_mpc/ann/training_nn.py:53:4: C0116: Missing function or method docstring (missing-function-docstring)
examples/one_room_mpc/ann/training_nn.py:57:0: C0116: Missing function or method docstring (missing-function-docstring)
examples/one_room_mpc/ann/training_nn.py:61:10: C0103: Variable name "ax_T_out" doesn't conform to snake_case naming style (invalid-name)
examples/one_room_mpc/ann/training_nn.py:61:20: C0103: Variable name "ax_mDot" doesn't conform to snake_case naming style (invalid-name)
examples/one_room_mpc/ann/training_nn.py:61:4: W0612: Unused variable 'fig' (unused-variable)
examples/one_room_mpc/ann/training_nn.py:74:0: C0116: Missing function or method docstring (missing-function-docstring)
examples/one_room_mpc/ann/training_nn.py:194:0: C0116: Missing function or method docstring (missing-function-docstring)
************* Module simple_mpc_nn
examples/one_room_mpc/ann/simple_mpc_nn.py:161:27: W1401: Anomalous backslash in string: '\d'. String constant might be missing an r prefix. (anomalous-backslash-in-string)
examples/one_room_mpc/ann/simple_mpc_nn.py:1:0: C0114: Missing module docstring (missing-module-docstring)
examples/one_room_mpc/ann/simple_mpc_nn.py:6:0: E0401: Unable to import 'agentlib.utils.multi_agent_system' (import-error)
examples/one_room_mpc/ann/simple_mpc_nn.py:16:0: C0116: Missing function or method docstring (missing-function-docstring)
examples/one_room_mpc/ann/simple_mpc_nn.py:85:0: C0116: Missing function or method docstring (missing-function-docstring)
examples/one_room_mpc/ann/simple_mpc_nn.py:85:0: R0914: Too many local variables (20/15) (too-many-locals)
examples/one_room_mpc/ann/simple_mpc_nn.py:96:8: C0415: Import outside toplevel (training_nn) (import-outside-toplevel)
examples/one_room_mpc/ann/simple_mpc_nn.py:110:8: C0415: Import outside toplevel (training_nn) (import-outside-toplevel)
examples/one_room_mpc/ann/simple_mpc_nn.py:125:8: C0415: Import outside toplevel (matplotlib.pyplot) (import-outside-toplevel)
examples/one_room_mpc/ann/simple_mpc_nn.py:125:8: E0401: Unable to import 'matplotlib.pyplot' (import-error)
examples/one_room_mpc/ann/simple_mpc_nn.py:126:8: C0415: Import outside toplevel (agentlib_mpc.utils.plotting.mpc.plot_mpc) (import-outside-toplevel)
examples/one_room_mpc/ann/simple_mpc_nn.py:133:8: C0103: Variable name "energy_cost_kWh" doesn't conform to snake_case naming style (invalid-name)
examples/one_room_mpc/ann/simple_mpc_nn.py:142:13: C0103: Variable name "ax" doesn't conform to snake_case naming style (invalid-name)
examples/one_room_mpc/ann/simple_mpc_nn.py:142:8: W0612: Unused variable 'fig' (unused-variable)
examples/one_room_mpc/ann/model.py:1:0: C0114: Missing module docstring (missing-module-docstring)
examples/one_room_mpc/ann/model.py:1:0: F0002: examples/one_room_mpc/ann/model.py: Fatal error while checking 'examples/one_room_mpc/ann/model.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-14-36.txt'. (astroid-error)
examples/one_room_mpc/ann/with_learned_cost/training_nn.py:68:25: W1401: Anomalous backslash in string: '\d'. String constant might be missing an r prefix. (anomalous-backslash-in-string)
examples/one_room_mpc/ann/with_learned_cost/training_nn.py:1:0: C0114: Missing module docstring (missing-module-docstring)
examples/one_room_mpc/ann/with_learned_cost/training_nn.py:4:0: E0401: Unable to import 'agentlib' (import-error)
examples/one_room_mpc/ann/with_learned_cost/training_nn.py:5:0: E0401: Unable to import 'matplotlib.pyplot' (import-error)
examples/one_room_mpc/ann/with_learned_cost/training_nn.py:7:0: E0401: Unable to import 'agentlib.utils.multi_agent_system' (import-error)
examples/one_room_mpc/ann/with_learned_cost/training_nn.py:15:0: C0115: Missing class docstring (missing-class-docstring)
examples/one_room_mpc/ann/with_learned_cost/training_nn.py:45:0: C0115: Missing class docstring (missing-class-docstring)
examples/one_room_mpc/ann/with_learned_cost/training_nn.py:48:4: C0116: Missing function or method docstring (missing-function-docstring)
examples/one_room_mpc/ann/with_learned_cost/training_nn.py:48:25: W0613: Unused argument 't_start' (unused-argument)
examples/one_room_mpc/ann/with_learned_cost/training_nn.py:48:34: W0613: Unused argument 't_sample' (unused-argument)
examples/one_room_mpc/ann/with_learned_cost/training_nn.py:53:4: C0116: Missing function or method docstring (missing-function-docstring)
examples/one_room_mpc/ann/with_learned_cost/training_nn.py:57:0: C0116: Missing function or method docstring (missing-function-docstring)
examples/one_room_mpc/ann/with_learned_cost/training_nn.py:61:10: C0103: Variable name "ax_T_out" doesn't conform to snake_case naming style (invalid-name)
examples/one_room_mpc/ann/with_learned_cost/training_nn.py:61:20: C0103: Variable name "ax_mDot" doesn't conform to snake_case naming style (invalid-name)
examples/one_room_mpc/ann/with_learned_cost/training_nn.py:61:4: W0612: Unused variable 'fig' (unused-variable)
examples/one_room_mpc/ann/with_learned_cost/training_nn.py:74:0: C0116: Missing function or method docstring (missing-function-docstring)
examples/one_room_mpc/ann/with_learned_cost/training_nn.py:191:0: C0116: Missing function or method docstring (missing-function-docstring)
examples/one_room_mpc/ann/with_learned_cost/simple_mpc_nn.py:134:27: W1401: Anomalous backslash in string: '\d'. String constant might be missing an r prefix. (anomalous-backslash-in-string)
examples/one_room_mpc/ann/with_learned_cost/simple_mpc_nn.py:1:0: C0114: Missing module docstring (missing-module-docstring)
examples/one_room_mpc/ann/with_learned_cost/simple_mpc_nn.py:3:0: E0401: Unable to import 'matplotlib.pyplot' (import-error)
examples/one_room_mpc/ann/with_learned_cost/simple_mpc_nn.py:6:0: E0401: Unable to import 'agentlib.utils.multi_agent_system' (import-error)
examples/one_room_mpc/ann/with_learned_cost/simple_mpc_nn.py:17:0: C0116: Missing function or method docstring (missing-function-docstring)
examples/one_room_mpc/ann/with_learned_cost/simple_mpc_nn.py:85:0: C0116: Missing function or method docstring (missing-function-docstring)
examples/one_room_mpc/ann/with_learned_cost/simple_mpc_nn.py:100:8: W0101: Unreachable code (unreachable)
examples/one_room_mpc/ann/with_learned_cost/simple_mpc_nn.py:96:8: W0707: Consider explicitly re-raising using 'except IndexError as exc' and 'raise RuntimeError('For some reason this import does not work, please run the training manually') from exc' (raise-missing-from)
examples/one_room_mpc/ann/with_learned_cost/simple_mpc_nn.py:100:8: C0415: Import outside toplevel (training_nn) (import-outside-toplevel)
examples/one_room_mpc/ann/with_learned_cost/simple_mpc_nn.py:115:13: C0103: Variable name "ax" doesn't conform to snake_case naming style (invalid-name)
examples/one_room_mpc/ann/with_learned_cost/simple_mpc_nn.py:115:8: W0612: Unused variable 'fig' (unused-variable)
examples/one_room_mpc/ann/with_learned_cost/simple_mpc_nn.py:4:0: C0411: standard import "import os" should be placed before "import matplotlib.pyplot as plt" (wrong-import-order)
************* Module plot_ann
examples/one_room_mpc/ann/with_learned_cost/plot_ann.py:1:0: C0114: Missing module docstring (missing-module-docstring)
examples/one_room_mpc/ann/with_learned_cost/plot_ann.py:3:0: E0401: Unable to import 'matplotlib.pyplot' (import-error)
examples/one_room_mpc/ann/with_learned_cost/plot_ann.py:4:0: E0401: Unable to import 'numpy' (import-error)
examples/one_room_mpc/ann/with_learned_cost/plot_ann.py:5:0: E0401: Unable to import 'pandas' (import-error)
examples/one_room_mpc/ann/with_learned_cost/plot_ann.py:7:0: E0401: Unable to import 'agentlib_mpc.models.casadi_neural_network' (import-error)
examples/one_room_mpc/ann/with_learned_cost/plot_ann.py:7:0: E0611: No name 'casadi_neural_network' in module 'agentlib_mpc.models' (no-name-in-module)
examples/one_room_mpc/ann/with_learned_cost/plot_ann.py:9:0: E0401: Unable to import 'agentlib_mpc.models.serialized_ann' (import-error)
examples/one_room_mpc/ann/with_learned_cost/plot_ann.py:9:0: E0611: No name 'serialized_ann' in module 'agentlib_mpc.models' (no-name-in-module)
examples/one_room_mpc/ann/with_learned_cost/plot_ann.py:13:0: C0116: Missing function or method docstring (missing-function-docstring)
examples/one_room_mpc/ann/with_learned_cost/plot_ann.py:13:0: R0914: Too many local variables (24/15) (too-many-locals)
examples/one_room_mpc/ann/with_learned_cost/plot_ann.py:41:10: C0103: Variable name "ax_T_out" doesn't conform to snake_case naming style (invalid-name)
examples/one_room_mpc/ann/with_learned_cost/plot_ann.py:41:20: C0103: Variable name "ax_mDot" doesn't conform to snake_case naming style (invalid-name)
examples/one_room_mpc/ann/with_learned_cost/plot_ann.py:41:38: C0103: Variable name "ax_T_in" doesn't conform to snake_case naming style (invalid-name)
examples/one_room_mpc/ann/with_learned_cost/plot_ann.py:43:4: C0103: Variable name "ax_T_out" doesn't conform to snake_case naming style (invalid-name)
examples/one_room_mpc/ann/with_learned_cost/plot_ann.py:63:9: C0103: Variable name "ax" doesn't conform to snake_case naming style (invalid-name)
examples/one_room_mpc/ann/with_learned_cost/plot_ann.py:13:9: W0613: Unused argument 'sim_results_file' (unused-argument)
examples/one_room_mpc/ann/with_learned_cost/plot_ann.py:41:4: W0612: Unused variable 'fig' (unused-variable)
examples/one_room_mpc/ann/with_learned_cost/model.py:1:0: C0114: Missing module docstring (missing-module-docstring)
examples/one_room_mpc/ann/with_learned_cost/model.py:1:0: F0002: examples/one_room_mpc/ann/with_learned_cost/model.py: Fatal error while checking 'examples/one_room_mpc/ann/with_learned_cost/model.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-14-37.txt'. (astroid-error)
************* Module admm_example_multiprocessing
examples/admm/admm_example_multiprocessing.py:28:0: E0401: Unable to import 'agentlib.utils' (import-error)
examples/admm/admm_example_multiprocessing.py:29:0: E0401: Unable to import 'agentlib.utils.multi_agent_system' (import-error)
examples/admm/admm_example_multiprocessing.py:40:0: C0116: Missing function or method docstring (missing-function-docstring)
examples/admm/admm_example_multiprocessing.py:41:4: C0415: Import outside toplevel (matplotlib.pyplot) (import-outside-toplevel)
examples/admm/admm_example_multiprocessing.py:41:4: E0401: Unable to import 'matplotlib.pyplot' (import-error)
examples/admm/admm_example_multiprocessing.py:42:4: C0415: Import outside toplevel (agentlib_mpc.utils.analysis.admm_at_time_step) (import-outside-toplevel)
examples/admm/admm_example_multiprocessing.py:56:9: C0103: Variable name "ax" doesn't conform to snake_case naming style (invalid-name)
examples/admm/admm_example_multiprocessing.py:56:4: W0612: Unused variable 'fig' (unused-variable)
examples/admm/admm_example_multiprocessing.py:67:0: C0116: Missing function or method docstring (missing-function-docstring)
examples/admm/admm_example_multiprocessing.py:73:4: C0103: Argument name "TESTING" doesn't conform to snake_case naming style (invalid-name)
examples/admm/admm_example_multiprocessing.py:67:0: R0913: Too many arguments (6/5) (too-many-arguments)
examples/admm/admm_example_multiprocessing.py:67:0: R0914: Too many local variables (18/15) (too-many-locals)
examples/admm/admm_example_multiprocessing.py:83:13: W1514: Using open without explicitly specifying an encoding (unspecified-encoding)
examples/admm/admm_example_multiprocessing.py:83:27: C0103: Variable name "f" doesn't conform to snake_case naming style (invalid-name)
examples/admm/admm_example_multiprocessing.py:88:21: W1514: Using open without explicitly specifying an encoding (unspecified-encoding)
examples/admm/admm_example_multiprocessing.py:88:34: C0103: Variable name "f" doesn't conform to snake_case naming style (invalid-name)
examples/admm/admm_example_multiprocessing.py:113:8: C0103: Variable name "cooledRoom_T" doesn't conform to snake_case naming style (invalid-name)
examples/admm/admm_example_multiprocessing.py:67:0: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
examples/admm/admm_example_multiprocessing.py:97:4: W0612: Unused variable 'broker' (unused-variable)
************* Module admm_example_local
examples/admm/admm_example_local.py:27:0: E0401: Unable to import 'agentlib.utils.multi_agent_system' (import-error)
examples/admm/admm_example_local.py:37:0: C0116: Missing function or method docstring (missing-function-docstring)
examples/admm/admm_example_local.py:38:4: C0415: Import outside toplevel (matplotlib.pyplot) (import-outside-toplevel)
examples/admm/admm_example_local.py:38:4: E0401: Unable to import 'matplotlib.pyplot' (import-error)
examples/admm/admm_example_local.py:39:4: C0415: Import outside toplevel (agentlib_mpc.utils.analysis.admm_at_time_step) (import-outside-toplevel)
examples/admm/admm_example_local.py:48:9: C0103: Variable name "ax" doesn't conform to snake_case naming style (invalid-name)
examples/admm/admm_example_local.py:48:4: W0612: Unused variable 'fig' (unused-variable)
examples/admm/admm_example_local.py:58:0: C0116: Missing function or method docstring (missing-function-docstring)
examples/admm/admm_example_local.py:58:0: R0913: Too many arguments (6/5) (too-many-arguments)
examples/admm/admm_example_local.py:58:0: R0914: Too many local variables (17/15) (too-many-locals)
examples/admm/admm_example_local.py:74:13: W1514: Using open without explicitly specifying an encoding (unspecified-encoding)
examples/admm/admm_example_local.py:74:27: C0103: Variable name "f" doesn't conform to snake_case naming style (invalid-name)
examples/admm/admm_example_local.py:79:21: W1514: Using open without explicitly specifying an encoding (unspecified-encoding)
examples/admm/admm_example_local.py:79:34: C0103: Variable name "f" doesn't conform to snake_case naming style (invalid-name)
examples/admm/admm_example_local.py:100:8: C0103: Variable name "cooledRoom_T" doesn't conform to snake_case naming style (invalid-name)
************* Module admm_example_coordinator
examples/admm/admm_example_coordinator.py:28:0: E0401: Unable to import 'agentlib.utils' (import-error)
examples/admm/admm_example_coordinator.py:29:0: E0401: Unable to import 'agentlib.utils.multi_agent_system' (import-error)
examples/admm/admm_example_coordinator.py:48:0: C0116: Missing function or method docstring (missing-function-docstring)
examples/admm/admm_example_coordinator.py:49:4: C0415: Import outside toplevel (matplotlib.pyplot) (import-outside-toplevel)
examples/admm/admm_example_coordinator.py:49:4: E0401: Unable to import 'matplotlib.pyplot' (import-error)
examples/admm/admm_example_coordinator.py:50:4: C0415: Import outside toplevel (agentlib_mpc.utils.analysis.admm_at_time_step) (import-outside-toplevel)
examples/admm/admm_example_coordinator.py:59:9: C0103: Variable name "ax" doesn't conform to snake_case naming style (invalid-name)
examples/admm/admm_example_coordinator.py:59:4: W0612: Unused variable 'fig' (unused-variable)
examples/admm/admm_example_coordinator.py:69:0: C0116: Missing function or method docstring (missing-function-docstring)
examples/admm/admm_example_coordinator.py:69:0: R0913: Too many arguments (6/5) (too-many-arguments)
examples/admm/admm_example_coordinator.py:69:0: R0914: Too many local variables (17/15) (too-many-locals)
examples/admm/admm_example_coordinator.py:75:4: W0621: Redefining name 'show_dashboard' from outer scope (line 33) (redefined-outer-name)
examples/admm/admm_example_coordinator.py:85:13: W1514: Using open without explicitly specifying an encoding (unspecified-encoding)
examples/admm/admm_example_coordinator.py:85:27: C0103: Variable name "f" doesn't conform to snake_case naming style (invalid-name)
examples/admm/admm_example_coordinator.py:90:21: W1514: Using open without explicitly specifying an encoding (unspecified-encoding)
examples/admm/admm_example_coordinator.py:90:34: C0103: Variable name "f" doesn't conform to snake_case naming style (invalid-name)
examples/admm/admm_example_coordinator.py:97:4: W0612: Unused variable 'broker' (unused-variable)
examples/admm/admm_example_coordinator.py:31:0: W0611: Unused admm_dashboard imported from agentlib_mpc.utils.plotting (unused-import)
examples/admm/admm_example_coordinator.py:33:0: W0611: Unused show_dashboard imported from agentlib_mpc.utils.plotting.interactive (unused-import)
************* Module admm_example_coordinator_multiprocessing
examples/admm/admm_example_coordinator_multiprocessing.py:27:0: E0401: Unable to import 'agentlib.utils.multi_agent_system' (import-error)
examples/admm/admm_example_coordinator_multiprocessing.py:28:0: E0401: Unable to import 'agentlib.utils' (import-error)
examples/admm/admm_example_coordinator_multiprocessing.py:38:0: C0116: Missing function or method docstring (missing-function-docstring)
examples/admm/admm_example_coordinator_multiprocessing.py:39:4: C0415: Import outside toplevel (matplotlib.pyplot) (import-outside-toplevel)
examples/admm/admm_example_coordinator_multiprocessing.py:39:4: E0401: Unable to import 'matplotlib.pyplot' (import-error)
examples/admm/admm_example_coordinator_multiprocessing.py:40:4: C0415: Import outside toplevel (agentlib_mpc.utils.analysis.admm_at_time_step) (import-outside-toplevel)
examples/admm/admm_example_coordinator_multiprocessing.py:54:9: C0103: Variable name "ax" doesn't conform to snake_case naming style (invalid-name)
examples/admm/admm_example_coordinator_multiprocessing.py:54:4: W0612: Unused variable 'fig' (unused-variable)
examples/admm/admm_example_coordinator_multiprocessing.py:65:0: C0116: Missing function or method docstring (missing-function-docstring)
examples/admm/admm_example_coordinator_multiprocessing.py:65:0: R0914: Too many local variables (16/15) (too-many-locals)
examples/admm/admm_example_coordinator_multiprocessing.py:80:13: W1514: Using open without explicitly specifying an encoding (unspecified-encoding)
examples/admm/admm_example_coordinator_multiprocessing.py:80:27: C0103: Variable name "f" doesn't conform to snake_case naming style (invalid-name)
examples/admm/admm_example_coordinator_multiprocessing.py:85:21: W1514: Using open without explicitly specifying an encoding (unspecified-encoding)
examples/admm/admm_example_coordinator_multiprocessing.py:85:34: C0103: Variable name "f" doesn't conform to snake_case naming style (invalid-name)
examples/admm/admm_example_coordinator_multiprocessing.py:95:4: W0612: Unused variable 'broker' (unused-variable)
************* Module simulation_model
examples/admm/models/simulation_model.py:1:0: C0114: Missing module docstring (missing-module-docstring)
examples/admm/models/simulation_model.py:1:0: F0002: examples/admm/models/simulation_model.py: Fatal error while checking 'examples/admm/models/simulation_model.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-14-37.txt'. (astroid-error)
************* Module ca_room_model
examples/admm/models/ca_room_model.py:1:0: C0114: Missing module docstring (missing-module-docstring)
examples/admm/models/ca_room_model.py:11:0: C0115: Missing class docstring (missing-class-docstring)
examples/admm/models/ca_room_model.py:45:17: W1309: Using an f-string that does not have any interpolated variables (f-string-without-interpolation)
examples/admm/models/ca_room_model.py:50:17: W1309: Using an f-string that does not have any interpolated variables (f-string-without-interpolation)
examples/admm/models/ca_room_model.py:85:0: C0115: Missing class docstring (missing-class-docstring)
examples/admm/models/ca_room_model.py:1:0: W0611: Unused CasadiOutput imported from agentlib_mpc.models.casadi_model (unused-import)
************* Module ca_cooler_model
examples/admm/models/ca_cooler_model.py:21:0: C0301: Line too long (104/100) (line-too-long)
examples/admm/models/ca_cooler_model.py:1:0: C0114: Missing module docstring (missing-module-docstring)
examples/admm/models/ca_cooler_model.py:11:0: C0115: Missing class docstring (missing-class-docstring)
examples/admm/models/ca_cooler_model.py:49:0: C0115: Missing class docstring (missing-class-docstring)
************* Module mhe_example
examples/Estimators/mhe_example.py:358:23: W1401: Anomalous backslash in string: '\d'. String constant might be missing an r prefix. (anomalous-backslash-in-string)
examples/Estimators/mhe_example.py:1:0: C0114: Missing module docstring (missing-module-docstring)
examples/Estimators/mhe_example.py:1:0: F0002: examples/Estimators/mhe_example.py: Fatal error while checking 'examples/Estimators/mhe_example.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-14-37.txt'. (astroid-error)
************* Module examples.three_zone_datadriven_admm.admm_3zone_sim
examples/three_zone_datadriven_admm/admm_3zone_sim.py:32:0: E0401: Unable to import 'agentlib.utils.multi_agent_system' (import-error)
examples/three_zone_datadriven_admm/admm_3zone_sim.py:32:0: C0413: Import "from agentlib.utils.multi_agent_system import LocalMASAgency" should be placed at the top of the module (wrong-import-position)
examples/three_zone_datadriven_admm/admm_3zone_sim.py:48:0: C0116: Missing function or method docstring (missing-function-docstring)
examples/three_zone_datadriven_admm/admm_3zone_sim.py:60:12: W0621: Redefining name 'sys' from outer scope (line 27) (redefined-outer-name)
examples/three_zone_datadriven_admm/admm_3zone_sim.py:60:12: W0404: Reimport 'sys' (imported line 27) (reimported)
examples/three_zone_datadriven_admm/admm_3zone_sim.py:60:12: C0415: Import outside toplevel (sys) (import-outside-toplevel)
examples/three_zone_datadriven_admm/admm_3zone_sim.py:63:12: C0415: Import outside toplevel (training_direct) (import-outside-toplevel)
examples/three_zone_datadriven_admm/admm_3zone_sim.py:75:8: C0415: Import outside toplevel (plot) (import-outside-toplevel)
examples/three_zone_datadriven_admm/admm_3zone_sim.py:49:33: W0613: Unused argument 'start_pred' (unused-argument)
examples/three_zone_datadriven_admm/admm_3zone_sim.py:84:4: W0105: String statement has no effect (pointless-string-statement)
examples/three_zone_datadriven_admm/admm_3zone_sim.py:24:0: C0412: Imports from package logging are not grouped (ungrouped-imports)
************* Module examples.three_zone_datadriven_admm.plot_ADMM_anim
examples/three_zone_datadriven_admm/plot_ADMM_anim.py:1:0: C0114: Missing module docstring (missing-module-docstring)
examples/three_zone_datadriven_admm/plot_ADMM_anim.py:1:0: C0103: Module name "plot_ADMM_anim" doesn't conform to snake_case naming style (invalid-name)
examples/three_zone_datadriven_admm/plot_ADMM_anim.py:4:0: E0401: Unable to import 'matplotlib.pyplot' (import-error)
examples/three_zone_datadriven_admm/plot_ADMM_anim.py:5:0: E0401: Unable to import 'matplotlib' (import-error)
examples/three_zone_datadriven_admm/plot_ADMM_anim.py:6:0: E0401: Unable to import 'matplotlib.animation' (import-error)
examples/three_zone_datadriven_admm/plot_ADMM_anim.py:7:0: E0401: Unable to import 'matplotlib.font_manager' (import-error)
examples/three_zone_datadriven_admm/plot_ADMM_anim.py:8:0: E0401: Unable to import 'matplotlib.ticker' (import-error)
examples/three_zone_datadriven_admm/plot_ADMM_anim.py:9:0: E0401: Unable to import 'pandas' (import-error)
examples/three_zone_datadriven_admm/plot_ADMM_anim.py:14:0: C0103: Constant name "time_step" doesn't conform to UPPER_CASE naming style (invalid-name)
examples/three_zone_datadriven_admm/plot_ADMM_anim.py:15:0: C0103: Constant name "filename" doesn't conform to UPPER_CASE naming style (invalid-name)
examples/three_zone_datadriven_admm/plot_ADMM_anim.py:16:0: C0103: Constant name "file_format" doesn't conform to UPPER_CASE naming style (invalid-name)
examples/three_zone_datadriven_admm/plot_ADMM_anim.py:52:0: C0116: Missing function or method docstring (missing-function-docstring)
examples/three_zone_datadriven_admm/plot_ADMM_anim.py:53:4: C0103: Variable name "cm" doesn't conform to snake_case naming style (invalid-name)
examples/three_zone_datadriven_admm/plot_ADMM_anim.py:73:0: C0116: Missing function or method docstring (missing-function-docstring)
examples/three_zone_datadriven_admm/plot_ADMM_anim.py:116:0: C0116: Missing function or method docstring (missing-function-docstring)
examples/three_zone_datadriven_admm/plot_ADMM_anim.py:119:4: C0103: Variable name "room_mDot1" doesn't conform to snake_case naming style (invalid-name)
examples/three_zone_datadriven_admm/plot_ADMM_anim.py:122:4: C0103: Variable name "room_mDot_var1" doesn't conform to snake_case naming style (invalid-name)
examples/three_zone_datadriven_admm/plot_ADMM_anim.py:123:4: C0103: Variable name "room_mDot_var1" doesn't conform to snake_case naming style (invalid-name)
examples/three_zone_datadriven_admm/plot_ADMM_anim.py:125:4: C0103: Variable name "room_mDot2" doesn't conform to snake_case naming style (invalid-name)
examples/three_zone_datadriven_admm/plot_ADMM_anim.py:126:4: C0103: Variable name "room_mDot_var2" doesn't conform to snake_case naming style (invalid-name)
examples/three_zone_datadriven_admm/plot_ADMM_anim.py:127:4: C0103: Variable name "room_mDot_var2" doesn't conform to snake_case naming style (invalid-name)
examples/three_zone_datadriven_admm/plot_ADMM_anim.py:129:4: C0103: Variable name "room_mDot3" doesn't conform to snake_case naming style (invalid-name)
examples/three_zone_datadriven_admm/plot_ADMM_anim.py:130:4: C0103: Variable name "room_mDot_var3" doesn't conform to snake_case naming style (invalid-name)
examples/three_zone_datadriven_admm/plot_ADMM_anim.py:131:4: C0103: Variable name "room_mDot_var3" doesn't conform to snake_case naming style (invalid-name)
examples/three_zone_datadriven_admm/plot_ADMM_anim.py:133:4: C0103: Variable name "cooler_mDot" doesn't conform to snake_case naming style (invalid-name)
examples/three_zone_datadriven_admm/plot_ADMM_anim.py:136:4: C0103: Variable name "cooler_mDot_var" doesn't conform to snake_case naming style (invalid-name)
examples/three_zone_datadriven_admm/plot_ADMM_anim.py:137:4: C0103: Variable name "cooler_mDot_var" doesn't conform to snake_case naming style (invalid-name)
examples/three_zone_datadriven_admm/plot_ADMM_anim.py:146:0: C0116: Missing function or method docstring (missing-function-docstring)
examples/three_zone_datadriven_admm/plot_ADMM_anim.py:162:0: C0116: Missing function or method docstring (missing-function-docstring)
examples/three_zone_datadriven_admm/plot_ADMM_anim.py:4:0: C0411: third party import "import matplotlib.pyplot as plt" should be placed before "from agentlib_mpc.utils.analysis import admm_at_time_step, load_admm" (wrong-import-order)
examples/three_zone_datadriven_admm/plot_ADMM_anim.py:5:0: C0411: third party import "import matplotlib" should be placed before "from agentlib_mpc.utils.analysis import admm_at_time_step, load_admm" (wrong-import-order)
examples/three_zone_datadriven_admm/plot_ADMM_anim.py:6:0: C0411: third party import "from matplotlib.animation import FuncAnimation" should be placed before "from agentlib_mpc.utils.analysis import admm_at_time_step, load_admm" (wrong-import-order)
examples/three_zone_datadriven_admm/plot_ADMM_anim.py:7:0: C0411: third party import "from matplotlib.font_manager import FontProperties" should be placed before "from agentlib_mpc.utils.analysis import admm_at_time_step, load_admm" (wrong-import-order)
examples/three_zone_datadriven_admm/plot_ADMM_anim.py:8:0: C0411: third party import "from matplotlib.ticker import MultipleLocator, FormatStrFormatter, AutoMinorLocator" should be placed before "from agentlib_mpc.utils.analysis import admm_at_time_step, load_admm" (wrong-import-order)
examples/three_zone_datadriven_admm/plot_ADMM_anim.py:9:0: C0411: third party import "import pandas as pd" should be placed before "from agentlib_mpc.utils.analysis import admm_at_time_step, load_admm" (wrong-import-order)
examples/three_zone_datadriven_admm/plot_ADMM_anim.py:7:0: W0611: Unused FontProperties imported from matplotlib.font_manager (unused-import)
examples/three_zone_datadriven_admm/plot_ADMM_anim.py:8:0: W0611: Unused MultipleLocator imported from matplotlib.ticker (unused-import)
examples/three_zone_datadriven_admm/plot_ADMM_anim.py:8:0: W0611: Unused FormatStrFormatter imported from matplotlib.ticker (unused-import)
examples/three_zone_datadriven_admm/plot_ADMM_anim.py:9:0: W0611: Unused pandas imported as pd (unused-import)
************* Module examples.three_zone_datadriven_admm.plot
examples/three_zone_datadriven_admm/plot.py:56:23: W1401: Anomalous backslash in string: '\d'. String constant might be missing an r prefix. (anomalous-backslash-in-string)
examples/three_zone_datadriven_admm/plot.py:62:23: W1401: Anomalous backslash in string: '\d'. String constant might be missing an r prefix. (anomalous-backslash-in-string)
examples/three_zone_datadriven_admm/plot.py:68:23: W1401: Anomalous backslash in string: '\d'. String constant might be missing an r prefix. (anomalous-backslash-in-string)
examples/three_zone_datadriven_admm/plot.py:213:24: W1401: Anomalous backslash in string: '\d'. String constant might be missing an r prefix. (anomalous-backslash-in-string)
examples/three_zone_datadriven_admm/plot.py:237:24: W1401: Anomalous backslash in string: '\d'. String constant might be missing an r prefix. (anomalous-backslash-in-string)
examples/three_zone_datadriven_admm/plot.py:301:24: W1401: Anomalous backslash in string: '\d'. String constant might be missing an r prefix. (anomalous-backslash-in-string)
examples/three_zone_datadriven_admm/plot.py:1:0: C0114: Missing module docstring (missing-module-docstring)
examples/three_zone_datadriven_admm/plot.py:3:0: E0401: Unable to import 'matplotlib.pyplot' (import-error)
examples/three_zone_datadriven_admm/plot.py:4:0: E0401: Unable to import 'numpy' (import-error)
examples/three_zone_datadriven_admm/plot.py:5:0: E0401: Unable to import 'pandas' (import-error)
examples/three_zone_datadriven_admm/plot.py:21:0: C0103: Constant name "res_path" doesn't conform to UPPER_CASE naming style (invalid-name)
examples/three_zone_datadriven_admm/plot.py:24:0: C0116: Missing function or method docstring (missing-function-docstring)
examples/three_zone_datadriven_admm/plot.py:42:0: C0116: Missing function or method docstring (missing-function-docstring)
examples/three_zone_datadriven_admm/plot.py:46:0: C0116: Missing function or method docstring (missing-function-docstring)
examples/three_zone_datadriven_admm/plot.py:83:8: C0103: Variable name "ax" doesn't conform to snake_case naming style (invalid-name)
examples/three_zone_datadriven_admm/plot.py:99:0: C0116: Missing function or method docstring (missing-function-docstring)
examples/three_zone_datadriven_admm/plot.py:160:8: C0103: Variable name "ax" doesn't conform to snake_case naming style (invalid-name)
examples/three_zone_datadriven_admm/plot.py:105:4: W0612: Unused variable 'fig' (unused-variable)
examples/three_zone_datadriven_admm/plot.py:168:0: C0116: Missing function or method docstring (missing-function-docstring)
examples/three_zone_datadriven_admm/plot.py:168:0: C0103: Function name "calculate_Energy" doesn't conform to snake_case naming style (invalid-name)
examples/three_zone_datadriven_admm/plot.py:201:0: C0116: Missing function or method docstring (missing-function-docstring)
examples/three_zone_datadriven_admm/plot.py:201:0: R0914: Too many local variables (16/15) (too-many-locals)
examples/three_zone_datadriven_admm/plot.py:204:4: C0103: Variable name "dQ_cca_1" doesn't conform to snake_case naming style (invalid-name)
examples/three_zone_datadriven_admm/plot.py:204:14: C0103: Variable name "dQ_cca_2" doesn't conform to snake_case naming style (invalid-name)
examples/three_zone_datadriven_admm/plot.py:204:24: C0103: Variable name "dQ_cca_3" doesn't conform to snake_case naming style (invalid-name)
examples/three_zone_datadriven_admm/plot.py:204:34: C0103: Variable name "dQ_ahu_1" doesn't conform to snake_case naming style (invalid-name)
examples/three_zone_datadriven_admm/plot.py:204:44: C0103: Variable name "dQ_ahu_2" doesn't conform to snake_case naming style (invalid-name)
examples/three_zone_datadriven_admm/plot.py:204:54: C0103: Variable name "dQ_ahu_3" doesn't conform to snake_case naming style (invalid-name)
examples/three_zone_datadriven_admm/plot.py:266:8: C0103: Variable name "ax" doesn't conform to snake_case naming style (invalid-name)
examples/three_zone_datadriven_admm/plot.py:282:0: C0116: Missing function or method docstring (missing-function-docstring)
examples/three_zone_datadriven_admm/plot.py:282:0: R0914: Too many local variables (23/15) (too-many-locals)
examples/three_zone_datadriven_admm/plot.py:283:4: C0103: Variable name "it" doesn't conform to snake_case naming style (invalid-name)
examples/three_zone_datadriven_admm/plot.py:338:8: C0103: Variable name "ax" doesn't conform to snake_case naming style (invalid-name)
examples/three_zone_datadriven_admm/plot.py:284:4: W0612: Unused variable 'res_sim' (unused-variable)
examples/three_zone_datadriven_admm/plot.py:285:4: W0612: Unused variable 'res_sim2' (unused-variable)
examples/three_zone_datadriven_admm/plot.py:286:4: W0612: Unused variable 'res_sim3' (unused-variable)
examples/three_zone_datadriven_admm/plot.py:288:4: W0612: Unused variable 'air_controller' (unused-variable)
examples/three_zone_datadriven_admm/plot.py:354:0: C0116: Missing function or method docstring (missing-function-docstring)
examples/three_zone_datadriven_admm/plot.py:355:9: C0103: Variable name "ax" doesn't conform to snake_case naming style (invalid-name)
examples/three_zone_datadriven_admm/plot.py:355:4: W0612: Unused variable 'fig' (unused-variable)
examples/three_zone_datadriven_admm/plot.py:367:0: C0116: Missing function or method docstring (missing-function-docstring)
************* Module examples.three_zone_datadriven_admm.three_zone_util
examples/three_zone_datadriven_admm/three_zone_util.py:1:0: C0114: Missing module docstring (missing-module-docstring)
examples/three_zone_datadriven_admm/three_zone_util.py:1:0: E0401: Unable to import 'pandas' (import-error)
examples/three_zone_datadriven_admm/three_zone_util.py:2:0: E0401: Unable to import 'numpy' (import-error)
examples/three_zone_datadriven_admm/three_zone_util.py:9:9: W1514: Using open without explicitly specifying an encoding (unspecified-encoding)
examples/three_zone_datadriven_admm/three_zone_util.py:9:23: C0103: Variable name "f" doesn't conform to snake_case naming style (invalid-name)
examples/three_zone_datadriven_admm/three_zone_util.py:17:4: C0200: Consider using enumerate instead of iterating with range and len (consider-using-enumerate)
examples/three_zone_datadriven_admm/three_zone_util.py:40:8: R1705: Unnecessary "else" after "return", remove the "else" and de-indent the code inside it (no-else-return)
examples/three_zone_datadriven_admm/three_zone_util.py:45:4: R1705: Unnecessary "else" after "return", remove the "else" and de-indent the code inside it (no-else-return)
examples/three_zone_datadriven_admm/three_zone_util.py:57:24: W0621: Redefining name 'weather_data' from outer scope (line 98) (redefined-outer-name)
examples/three_zone_datadriven_admm/three_zone_util.py:65:4: R1705: Unnecessary "else" after "return", remove the "else" and de-indent the code inside it (no-else-return)
examples/three_zone_datadriven_admm/three_zone_util.py:78:26: W0621: Redefining name 'weather_data' from outer scope (line 98) (redefined-outer-name)
examples/three_zone_datadriven_admm/three_zone_util.py:85:4: R1705: Unnecessary "else" after "return", remove the "else" and de-indent the code inside it (no-else-return)
************* Module examples.three_zone_datadriven_admm.training_direct
examples/three_zone_datadriven_admm/training_direct.py:152:0: C0301: Line too long (116/100) (line-too-long)
examples/three_zone_datadriven_admm/training_direct.py:194:0: C0301: Line too long (101/100) (line-too-long)
examples/three_zone_datadriven_admm/training_direct.py:195:0: C0301: Line too long (107/100) (line-too-long)
examples/three_zone_datadriven_admm/training_direct.py:350:0: C0301: Line too long (105/100) (line-too-long)
examples/three_zone_datadriven_admm/training_direct.py:351:0: C0301: Line too long (111/100) (line-too-long)
examples/three_zone_datadriven_admm/training_direct.py:486:0: C0325: Unnecessary parens after '=' keyword (superfluous-parens)
examples/three_zone_datadriven_admm/training_direct.py:1:0: C0114: Missing module docstring (missing-module-docstring)
examples/three_zone_datadriven_admm/training_direct.py:1:0: F0002: examples/three_zone_datadriven_admm/training_direct.py: Fatal error while checking 'examples/three_zone_datadriven_admm/training_direct.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-14-47.txt'. (astroid-error)
************* Module examples.three_zone_datadriven_admm.plotting_agent
examples/three_zone_datadriven_admm/plotting_agent.py:1:0: C0114: Missing module docstring (missing-module-docstring)
examples/three_zone_datadriven_admm/plotting_agent.py:5:0: E0401: Unable to import 'matplotlib.pyplot' (import-error)
examples/three_zone_datadriven_admm/plotting_agent.py:6:0: E0401: Unable to import 'pandas' (import-error)
examples/three_zone_datadriven_admm/plotting_agent.py:7:0: E0401: Unable to import 'numpy' (import-error)
examples/three_zone_datadriven_admm/plotting_agent.py:1:0: F0002: examples/three_zone_datadriven_admm/plotting_agent.py: Fatal error while checking 'examples/three_zone_datadriven_admm/plotting_agent.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-14-47.txt'. (astroid-error)
************* Module CCA
examples/three_zone_datadriven_admm/models/CCA.py:1:0: C0114: Missing module docstring (missing-module-docstring)
examples/three_zone_datadriven_admm/models/CCA.py:1:0: C0103: Module name "CCA" doesn't conform to snake_case naming style (invalid-name)
examples/three_zone_datadriven_admm/models/CCA.py:1:0: W0401: Wildcard import agentlib_mpc.models.casadi_model (wildcard-import)
examples/three_zone_datadriven_admm/models/CCA.py:4:0: C0115: Missing class docstring (missing-class-docstring)
examples/three_zone_datadriven_admm/models/CCA.py:1:0: F0002: examples/three_zone_datadriven_admm/models/CCA.py: Fatal error while checking 'examples/three_zone_datadriven_admm/models/CCA.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-14-47.txt'. (astroid-error)
examples/three_zone_datadriven_admm/models/simulation_model.py:8:0: C0413: Import "from agentlib_mpc.models.casadi_model import CasadiInput, CasadiState, CasadiParameter, CasadiOutput, CasadiModel, CasadiModelConfig" should be placed at the top of the module (wrong-import-position)
examples/three_zone_datadriven_admm/models/simulation_model.py:1:0: F0002: examples/three_zone_datadriven_admm/models/simulation_model.py: Fatal error while checking 'examples/three_zone_datadriven_admm/models/simulation_model.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-14-47.txt'. (astroid-error)
************* Module Disturbances
examples/three_zone_datadriven_admm/models/Disturbances.py:1:0: C0114: Missing module docstring (missing-module-docstring)
examples/three_zone_datadriven_admm/models/Disturbances.py:1:0: C0103: Module name "Disturbances" doesn't conform to snake_case naming style (invalid-name)
examples/three_zone_datadriven_admm/models/Disturbances.py:1:0: E0401: Unable to import 'agentlib' (import-error)
examples/three_zone_datadriven_admm/models/Disturbances.py:1:0: C0413: Import "import agentlib as al" should be placed at the top of the module (wrong-import-position)
examples/three_zone_datadriven_admm/models/Disturbances.py:2:0: E0401: Unable to import 'numpy' (import-error)
examples/three_zone_datadriven_admm/models/Disturbances.py:2:0: C0413: Import "import numpy as np" should be placed at the top of the module (wrong-import-position)
examples/three_zone_datadriven_admm/models/Disturbances.py:3:0: E0401: Unable to import 'pandas' (import-error)
examples/three_zone_datadriven_admm/models/Disturbances.py:3:0: C0413: Import "import pandas as pd" should be placed at the top of the module (wrong-import-position)
examples/three_zone_datadriven_admm/models/Disturbances.py:5:0: C0413: Import "from examples.three_zone_datadriven_admm.three_zone_util import heat_load_func, get_t_aussen, weather_data, irradiation_data" should be placed at the top of the module (wrong-import-position)
examples/three_zone_datadriven_admm/models/Disturbances.py:47:8: C0103: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
examples/three_zone_datadriven_admm/models/Disturbances.py:44:34: W0613: Unused argument 't_sample' (unused-argument)
examples/three_zone_datadriven_admm/models/Disturbances.py:68:4: C0116: Missing function or method docstring (missing-function-docstring)
examples/three_zone_datadriven_admm/models/Disturbances.py:68:4: C0103: Method name "get_Temp_bounds" doesn't conform to snake_case naming style (invalid-name)
examples/three_zone_datadriven_admm/models/Disturbances.py:71:8: R1705: Unnecessary "else" after "return", remove the "else" and de-indent the code inside it (no-else-return)
examples/three_zone_datadriven_admm/models/Disturbances.py:76:4: C0116: Missing function or method docstring (missing-function-docstring)
examples/three_zone_datadriven_admm/models/Disturbances.py:1:0: C0411: third party import "import agentlib as al" should be placed before "from agentlib_mpc.models.casadi_model import *" (wrong-import-order)
examples/three_zone_datadriven_admm/models/Disturbances.py:2:0: C0411: third party import "import numpy as np" should be placed before "from agentlib_mpc.models.casadi_model import *" (wrong-import-order)
examples/three_zone_datadriven_admm/models/Disturbances.py:3:0: C0411: third party import "import pandas as pd" should be placed before "from agentlib_mpc.models.casadi_model import *" (wrong-import-order)
examples/three_zone_datadriven_admm/models/Disturbances.py:2:0: C0412: Imports from package numpy are not grouped (ungrouped-imports)
examples/three_zone_datadriven_admm/models/Disturbances.py:3:0: C0412: Imports from package pandas are not grouped (ungrouped-imports)
************* Module AHU
examples/three_zone_datadriven_admm/models/AHU.py:1:0: C0114: Missing module docstring (missing-module-docstring)
examples/three_zone_datadriven_admm/models/AHU.py:1:0: C0103: Module name "AHU" doesn't conform to snake_case naming style (invalid-name)
examples/three_zone_datadriven_admm/models/AHU.py:1:0: W0401: Wildcard import agentlib_mpc.models.casadi_model (wildcard-import)
examples/three_zone_datadriven_admm/models/AHU.py:4:0: C0115: Missing class docstring (missing-class-docstring)
examples/three_zone_datadriven_admm/models/AHU.py:1:0: F0002: examples/three_zone_datadriven_admm/models/AHU.py: Fatal error while checking 'examples/three_zone_datadriven_admm/models/AHU.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-14-48.txt'. (astroid-error)
************* Module Room_model
examples/three_zone_datadriven_admm/models/Room_model.py:1:0: C0114: Missing module docstring (missing-module-docstring)
examples/three_zone_datadriven_admm/models/Room_model.py:1:0: C0103: Module name "Room_model" doesn't conform to snake_case naming style (invalid-name)
examples/three_zone_datadriven_admm/models/Room_model.py:1:0: F0002: examples/three_zone_datadriven_admm/models/Room_model.py: Fatal error while checking 'examples/three_zone_datadriven_admm/models/Room_model.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-14-48.txt'. (astroid-error)
************* Module predictor
examples/three_zone_datadriven_admm/custom_modules/predictor.py:1:0: C0114: Missing module docstring (missing-module-docstring)
examples/three_zone_datadriven_admm/custom_modules/predictor.py:1:0: E0401: Unable to import 'agentlib' (import-error)
examples/three_zone_datadriven_admm/custom_modules/predictor.py:1:0: C0413: Import "import agentlib as al" should be placed at the top of the module (wrong-import-position)
examples/three_zone_datadriven_admm/custom_modules/predictor.py:2:0: E0401: Unable to import 'numpy' (import-error)
examples/three_zone_datadriven_admm/custom_modules/predictor.py:2:0: C0413: Import "import numpy as np" should be placed at the top of the module (wrong-import-position)
examples/three_zone_datadriven_admm/custom_modules/predictor.py:3:0: E0401: Unable to import 'pandas' (import-error)
examples/three_zone_datadriven_admm/custom_modules/predictor.py:3:0: C0413: Import "import pandas as pd" should be placed at the top of the module (wrong-import-position)
examples/three_zone_datadriven_admm/custom_modules/predictor.py:5:0: C0413: Import "from examples.three_zone_datadriven_admm.three_zone_util import load_weather, heat_load_func, get_t_aussen, irradiation_data" should be placed at the top of the module (wrong-import-position)
examples/three_zone_datadriven_admm/custom_modules/predictor.py:126:4: C0116: Missing function or method docstring (missing-function-docstring)
examples/three_zone_datadriven_admm/custom_modules/predictor.py:133:12: C0103: Variable name "ts" doesn't conform to snake_case naming style (invalid-name)
examples/three_zone_datadriven_admm/custom_modules/predictor.py:134:12: C0103: Variable name "n" doesn't conform to snake_case naming style (invalid-name)
examples/three_zone_datadriven_admm/custom_modules/predictor.py:162:4: R0914: Too many local variables (20/15) (too-many-locals)
examples/three_zone_datadriven_admm/custom_modules/predictor.py:168:16: W0201: Attribute 'boundary_low' defined outside __init__ (attribute-defined-outside-init)
examples/three_zone_datadriven_admm/custom_modules/predictor.py:212:12: W0201: Attribute 'boundary_low' defined outside __init__ (attribute-defined-outside-init)
examples/three_zone_datadriven_admm/custom_modules/predictor.py:169:16: W0201: Attribute 'boundary_high' defined outside __init__ (attribute-defined-outside-init)
examples/three_zone_datadriven_admm/custom_modules/predictor.py:211:12: W0201: Attribute 'boundary_high' defined outside __init__ (attribute-defined-outside-init)
examples/three_zone_datadriven_admm/custom_modules/predictor.py:1:0: C0411: third party import "import agentlib as al" should be placed before "from agentlib_mpc.models.casadi_model import *" (wrong-import-order)
examples/three_zone_datadriven_admm/custom_modules/predictor.py:2:0: C0411: third party import "import numpy as np" should be placed before "from agentlib_mpc.models.casadi_model import *" (wrong-import-order)
examples/three_zone_datadriven_admm/custom_modules/predictor.py:3:0: C0411: third party import "import pandas as pd" should be placed before "from agentlib_mpc.models.casadi_model import *" (wrong-import-order)
************* Module agentlib_mpc.models.casadi_predictor
agentlib_mpc/models/casadi_predictor.py:1:0: C0114: Missing module docstring (missing-module-docstring)
agentlib_mpc/models/casadi_predictor.py:3:0: E0401: Unable to import 'casadi' (import-error)
agentlib_mpc/models/casadi_predictor.py:4:0: E0401: Unable to import 'numpy' (import-error)
agentlib_mpc/models/casadi_predictor.py:7:0: E0401: Unable to import 'keras' (import-error)
agentlib_mpc/models/casadi_predictor.py:1:0: F0002: agentlib_mpc/models/casadi_predictor.py: Fatal error while checking 'agentlib_mpc/models/casadi_predictor.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-14-48.txt'. (astroid-error)
************* Module agentlib_mpc.models.serialized_ml_model
agentlib_mpc/models/serialized_ml_model.py:60:0: C0301: Line too long (101/100) (line-too-long)
agentlib_mpc/models/serialized_ml_model.py:115:0: C0301: Line too long (112/100) (line-too-long)
agentlib_mpc/models/serialized_ml_model.py:130:0: C0301: Line too long (114/100) (line-too-long)
agentlib_mpc/models/serialized_ml_model.py:144:0: C0301: Line too long (107/100) (line-too-long)
agentlib_mpc/models/serialized_ml_model.py:251:0: C0301: Line too long (111/100) (line-too-long)
agentlib_mpc/models/serialized_ml_model.py:256:0: C0301: Line too long (102/100) (line-too-long)
agentlib_mpc/models/serialized_ml_model.py:261:0: C0301: Line too long (109/100) (line-too-long)
agentlib_mpc/models/serialized_ml_model.py:317:0: C0301: Line too long (101/100) (line-too-long)
agentlib_mpc/models/serialized_ml_model.py:421:0: C0301: Line too long (101/100) (line-too-long)
agentlib_mpc/models/serialized_ml_model.py:555:0: C0301: Line too long (264/100) (line-too-long)
agentlib_mpc/models/serialized_ml_model.py:1:0: C0114: Missing module docstring (missing-module-docstring)
agentlib_mpc/models/serialized_ml_model.py:6:0: E0401: Unable to import 'numpy' (import-error)
agentlib_mpc/models/serialized_ml_model.py:10:0: E0401: Unable to import 'keras' (import-error)
agentlib_mpc/models/serialized_ml_model.py:12:0: E0401: Unable to import 'pydantic' (import-error)
agentlib_mpc/models/serialized_ml_model.py:13:0: E0401: Unable to import 'sklearn.gaussian_process' (import-error)
agentlib_mpc/models/serialized_ml_model.py:14:0: E0401: Unable to import 'sklearn.gaussian_process.kernels' (import-error)
agentlib_mpc/models/serialized_ml_model.py:15:0: E0401: Unable to import 'sklearn.linear_model' (import-error)
agentlib_mpc/models/serialized_ml_model.py:1:0: F0002: agentlib_mpc/models/serialized_ml_model.py: Fatal error while checking 'agentlib_mpc/models/serialized_ml_model.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-14-49.txt'. (astroid-error)
************* Module agentlib_mpc.models.casadi_ml_model
agentlib_mpc/models/casadi_ml_model.py:453:0: C0301: Line too long (131/100) (line-too-long)
agentlib_mpc/models/casadi_ml_model.py:1:0: F0002: agentlib_mpc/models/casadi_ml_model.py: Fatal error while checking 'agentlib_mpc/models/casadi_ml_model.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-14-49.txt'. (astroid-error)
************* Module agentlib_mpc.models.casadi_model
agentlib_mpc/models/casadi_model.py:301:0: C0301: Line too long (110/100) (line-too-long)
agentlib_mpc/models/casadi_model.py:529:0: C0301: Line too long (101/100) (line-too-long)
agentlib_mpc/models/casadi_model.py:1:0: F0002: agentlib_mpc/models/casadi_model.py: Fatal error while checking 'agentlib_mpc/models/casadi_model.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-14-49.txt'. (astroid-error)
************* Module agentlib_mpc.models
agentlib_mpc/models/__init__.py:5:0: E0401: Unable to import 'agentlib.utils.plugin_import' (import-error)
agentlib_mpc/models/casadi_predictor.py:6:0: C0411: standard import "from enum import Enum" should be placed before "import casadi as ca" (wrong-import-order)
agentlib_mpc/models/serialized_ml_model.py:1:0: C0411: standard import "import abc" should be placed before "import casadi as ca" (wrong-import-order)
agentlib_mpc/models/serialized_ml_model.py:2:0: C0411: standard import "import json" should be placed before "import casadi as ca" (wrong-import-order)
agentlib_mpc/models/serialized_ml_model.py:3:0: C0411: standard import "import logging" should be placed before "import casadi as ca" (wrong-import-order)
agentlib_mpc/models/serialized_ml_model.py:4:0: C0411: standard import "import subprocess" should be placed before "import casadi as ca" (wrong-import-order)
agentlib_mpc/models/serialized_ml_model.py:8:0: C0411: standard import "from enum import Enum" should be placed before "import casadi as ca" (wrong-import-order)
agentlib_mpc/models/serialized_ml_model.py:9:0: C0411: standard import "from copy import deepcopy" should be placed before "import casadi as ca" (wrong-import-order)
agentlib_mpc/models/serialized_ml_model.py:11:0: C0411: standard import "from pathlib import Path" should be placed before "import casadi as ca" (wrong-import-order)
agentlib_mpc/models/casadi_ml_model.py:3:0: C0411: standard import "import itertools" should be placed before "import casadi as ca" (wrong-import-order)
agentlib_mpc/models/casadi_ml_model.py:4:0: C0411: standard import "import logging" should be placed before "import casadi as ca" (wrong-import-order)
agentlib_mpc/models/casadi_ml_model.py:5:0: C0411: standard import "from itertools import chain" should be placed before "import casadi as ca" (wrong-import-order)
agentlib_mpc/models/casadi_ml_model.py:6:0: C0411: standard import "from pathlib import Path" should be placed before "import casadi as ca" (wrong-import-order)
agentlib_mpc/models/casadi_model.py:3:0: C0411: standard import "import json" should be placed before "import casadi as ca" (wrong-import-order)
agentlib_mpc/models/casadi_model.py:4:0: C0411: standard import "import logging" should be placed before "import casadi as ca" (wrong-import-order)
agentlib_mpc/models/casadi_model.py:5:0: C0411: standard import "import abc" should be placed before "import casadi as ca" (wrong-import-order)
agentlib_mpc/models/casadi_model.py:6:0: C0411: standard import "from itertools import chain" should be placed before "import casadi as ca" (wrong-import-order)
agentlib_mpc/models/serialized_ml_model.py:1:0: C0412: Imports from package abc are not grouped (ungrouped-imports)
agentlib_mpc/models/serialized_ml_model.py:8:0: C0412: Imports from package enum are not grouped (ungrouped-imports)
agentlib_mpc/models/casadi_ml_model.py:4:0: C0412: Imports from package logging are not grouped (ungrouped-imports)
agentlib_mpc/models/casadi_ml_model.py:6:0: C0412: Imports from package pathlib are not grouped (ungrouped-imports)
agentlib_mpc/models/casadi_model.py:3:0: C0412: Imports from package json are not grouped (ungrouped-imports)
agentlib_mpc/models/casadi_model.py:4:0: C0412: Imports from package logging are not grouped (ungrouped-imports)
agentlib_mpc/models/casadi_model.py:5:0: C0412: Imports from package abc are not grouped (ungrouped-imports)
agentlib_mpc/models/casadi_model.py:6:0: C0412: Imports from package itertools are not grouped (ungrouped-imports)
agentlib_mpc/models/serialized_ml_model.py:6:0: C0412: Imports from package numpy are not grouped (ungrouped-imports)
agentlib_mpc/models/serialized_ml_model.py:10:0: C0412: Imports from package keras are not grouped (ungrouped-imports)
************* Module agentlib_mpc.utils.sampling
agentlib_mpc/utils/sampling.py:1:0: C0114: Missing module docstring (missing-module-docstring)
agentlib_mpc/utils/sampling.py:1:0: F0002: agentlib_mpc/utils/sampling.py: Fatal error while checking 'agentlib_mpc/utils/sampling.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-14-49.txt'. (astroid-error)
************* Module agentlib_mpc.utils.analysis
agentlib_mpc/utils/analysis.py:1:0: C0114: Missing module docstring (missing-module-docstring)
agentlib_mpc/utils/analysis.py:1:0: F0002: agentlib_mpc/utils/analysis.py: Fatal error while checking 'agentlib_mpc/utils/analysis.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-14-50.txt'. (astroid-error)
************* Module agentlib_mpc.utils.__init__
agentlib_mpc/utils/__init__.py:1:0: F0002: agentlib_mpc/utils/__init__.py: Fatal error while checking 'agentlib_mpc/utils/__init__.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-14-50.txt'. (astroid-error)
************* Module agentlib_mpc.utils.plotting.interactive
agentlib_mpc/utils/plotting/interactive.py:1:0: C0114: Missing module docstring (missing-module-docstring)
agentlib_mpc/utils/plotting/interactive.py:1:0: E0401: Unable to import 'pandas' (import-error)
agentlib_mpc/utils/plotting/interactive.py:1:0: F0002: agentlib_mpc/utils/plotting/interactive.py: Fatal error while checking 'agentlib_mpc/utils/plotting/interactive.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-14-50.txt'. (astroid-error)
************* Module agentlib_mpc.utils.plotting.admm_consensus_shades
agentlib_mpc/utils/plotting/admm_consensus_shades.py:1:0: C0114: Missing module docstring (missing-module-docstring)
agentlib_mpc/utils/plotting/admm_consensus_shades.py:1:0: E0401: Unable to import 'pandas' (import-error)
agentlib_mpc/utils/plotting/admm_consensus_shades.py:9:0: R0914: Too many local variables (17/15) (too-many-locals)
agentlib_mpc/utils/plotting/admm_consensus_shades.py:52:43: E0602: Undefined variable 'series' (undefined-variable)
agentlib_mpc/utils/plotting/admm_consensus_shades.py:12:4: W0613: Unused argument 'time_step' (unused-argument)
agentlib_mpc/utils/plotting/admm_consensus_shades.py:28:4: W0612: Unused variable 'mean' (unused-variable)
agentlib_mpc/utils/plotting/admm_consensus_shades.py:31:4: W0612: Unused variable 'local' (unused-variable)
agentlib_mpc/utils/plotting/admm_consensus_shades.py:34:4: W0612: Unused variable 'lmbda' (unused-variable)
agentlib_mpc/utils/plotting/admm_consensus_shades.py:41:4: W0612: Unused variable 'a_trajectory' (unused-variable)
agentlib_mpc/utils/plotting/admm_consensus_shades.py:42:4: W0612: Unused variable 'number_of_iterations' (unused-variable)
agentlib_mpc/utils/plotting/admm_consensus_shades.py:57:8: W0612: Unused variable 'prediction_color' (unused-variable)
************* Module agentlib_mpc.utils.plotting.mpc
agentlib_mpc/utils/plotting/mpc.py:1:0: C0114: Missing module docstring (missing-module-docstring)
agentlib_mpc/utils/plotting/mpc.py:1:0: F0002: agentlib_mpc/utils/plotting/mpc.py: Fatal error while checking 'agentlib_mpc/utils/plotting/mpc.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-14-50.txt'. (astroid-error)
************* Module agentlib_mpc.utils.plotting.discretization_structure
agentlib_mpc/utils/plotting/discretization_structure.py:57:0: C0301: Line too long (102/100) (line-too-long)
agentlib_mpc/utils/plotting/discretization_structure.py:1:0: C0114: Missing module docstring (missing-module-docstring)
agentlib_mpc/utils/plotting/discretization_structure.py:3:0: E0401: Unable to import 'matplotlib.pyplot' (import-error)
agentlib_mpc/utils/plotting/discretization_structure.py:4:0: E0401: Unable to import 'pandas' (import-error)
agentlib_mpc/utils/plotting/discretization_structure.py:1:0: F0002: agentlib_mpc/utils/plotting/discretization_structure.py: Fatal error while checking 'agentlib_mpc/utils/plotting/discretization_structure.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-14-50.txt'. (astroid-error)
************* Module agentlib_mpc.utils.plotting.ml_model_test
agentlib_mpc/utils/plotting/ml_model_test.py:127:0: C0301: Line too long (103/100) (line-too-long)
agentlib_mpc/utils/plotting/ml_model_test.py:1:0: C0114: Missing module docstring (missing-module-docstring)
agentlib_mpc/utils/plotting/ml_model_test.py:1:0: F0002: agentlib_mpc/utils/plotting/ml_model_test.py: Fatal error while checking 'agentlib_mpc/utils/plotting/ml_model_test.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-14-50.txt'. (astroid-error)
************* Module agentlib_mpc.utils.plotting.admm_dashboard
agentlib_mpc/utils/plotting/admm_dashboard.py:110:0: C0301: Line too long (105/100) (line-too-long)
agentlib_mpc/utils/plotting/admm_dashboard.py:122:0: C0301: Line too long (102/100) (line-too-long)
agentlib_mpc/utils/plotting/admm_dashboard.py:1:0: C0114: Missing module docstring (missing-module-docstring)
agentlib_mpc/utils/plotting/admm_dashboard.py:1:0: F0002: agentlib_mpc/utils/plotting/admm_dashboard.py: Fatal error while checking 'agentlib_mpc/utils/plotting/admm_dashboard.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-14-50.txt'. (astroid-error)
************* Module agentlib_mpc.utils.plotting.admm_residuals
agentlib_mpc/utils/plotting/admm_residuals.py:144:0: C0301: Line too long (109/100) (line-too-long)
agentlib_mpc/utils/plotting/admm_residuals.py:1:0: C0114: Missing module docstring (missing-module-docstring)
agentlib_mpc/utils/plotting/admm_residuals.py:1:0: F0002: agentlib_mpc/utils/plotting/admm_residuals.py: Fatal error while checking 'agentlib_mpc/utils/plotting/admm_residuals.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-14-51.txt'. (astroid-error)
************* Module agentlib_mpc.utils.plotting.admm_animation
agentlib_mpc/utils/plotting/admm_animation.py:1:0: F0002: agentlib_mpc/utils/plotting/admm_animation.py: Fatal error while checking 'agentlib_mpc/utils/plotting/admm_animation.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-14-51.txt'. (astroid-error)
agentlib_mpc/utils/plotting/ml_model_test.py:1:0: C0411: standard import "from pathlib import Path" should be placed before "import matplotlib.pyplot as plt" (wrong-import-order)
agentlib_mpc/utils/plotting/admm_dashboard.py:1:0: C0411: standard import "import os" should be placed before "import matplotlib.pyplot as plt" (wrong-import-order)
agentlib_mpc/utils/plotting/admm_dashboard.py:2:0: C0411: standard import "import webbrowser" should be placed before "import matplotlib.pyplot as plt" (wrong-import-order)
agentlib_mpc/utils/plotting/admm_dashboard.py:3:0: C0411: standard import "from pathlib import Path" should be placed before "import matplotlib.pyplot as plt" (wrong-import-order)
agentlib_mpc/utils/plotting/admm_residuals.py:1:0: C0411: standard import "from ast import literal_eval" should be placed before "import matplotlib.pyplot as plt" (wrong-import-order)
agentlib_mpc/utils/plotting/admm_residuals.py:2:0: C0411: standard import "from pathlib import Path" should be placed before "import matplotlib.pyplot as plt" (wrong-import-order)
agentlib_mpc/utils/plotting/admm_animation.py:4:0: C0411: standard import "import functools" should be placed before "import matplotlib.pyplot as plt" (wrong-import-order)
agentlib_mpc/utils/plotting/admm_animation.py:5:0: C0411: standard import "from pathlib import Path" should be placed before "import matplotlib.pyplot as plt" (wrong-import-order)
agentlib_mpc/utils/plotting/admm_dashboard.py:3:0: C0412: Imports from package pathlib are not grouped (ungrouped-imports)
agentlib_mpc/utils/plotting/admm_residuals.py:2:0: C0412: Imports from package pathlib are not grouped (ungrouped-imports)
agentlib_mpc/utils/plotting/admm_animation.py:5:0: C0412: Imports from package pathlib are not grouped (ungrouped-imports)
************* Module agentlib_mpc.data_structures.ml_model_datatypes
agentlib_mpc/data_structures/ml_model_datatypes.py:1:0: C0114: Missing module docstring (missing-module-docstring)
agentlib_mpc/data_structures/ml_model_datatypes.py:1:0: F0002: agentlib_mpc/data_structures/ml_model_datatypes.py: Fatal error while checking 'agentlib_mpc/data_structures/ml_model_datatypes.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-14-51.txt'. (astroid-error)
************* Module agentlib_mpc.data_structures.interpolation
agentlib_mpc/data_structures/interpolation.py:1:0: C0114: Missing module docstring (missing-module-docstring)
agentlib_mpc/data_structures/interpolation.py:3:0: C0103: Constant name "a" doesn't conform to UPPER_CASE naming style (invalid-name)
agentlib_mpc/data_structures/interpolation.py:6:0: C0115: Missing class docstring (missing-class-docstring)
agentlib_mpc/data_structures/interpolation.py:7:4: C0103: Class constant name "linear" doesn't conform to UPPER_CASE naming style (invalid-name)
agentlib_mpc/data_structures/interpolation.py:8:4: C0103: Class constant name "previous" doesn't conform to UPPER_CASE naming style (invalid-name)
agentlib_mpc/data_structures/interpolation.py:9:4: C0103: Class constant name "no_interpolation" doesn't conform to UPPER_CASE naming style (invalid-name)
agentlib_mpc/data_structures/interpolation.py:10:4: C0103: Class constant name "spline3" doesn't conform to UPPER_CASE naming style (invalid-name)
agentlib_mpc/data_structures/interpolation.py:24:4: C0103: Class constant name "mean_over_interval" doesn't conform to UPPER_CASE naming style (invalid-name)
agentlib_mpc/data_structures/interpolation.py:27:0: C0103: Constant name "c" doesn't conform to UPPER_CASE naming style (invalid-name)
************* Module agentlib_mpc.data_structures.coordinator_datatypes
agentlib_mpc/data_structures/coordinator_datatypes.py:1:0: C0114: Missing module docstring (missing-module-docstring)
agentlib_mpc/data_structures/coordinator_datatypes.py:5:0: E0401: Unable to import 'numpy' (import-error)
agentlib_mpc/data_structures/coordinator_datatypes.py:7:0: E0401: Unable to import 'agentlib.core' (import-error)
agentlib_mpc/data_structures/coordinator_datatypes.py:29:4: C0103: Class constant name "sleeping" doesn't conform to UPPER_CASE naming style (invalid-name)
agentlib_mpc/data_structures/coordinator_datatypes.py:30:4: C0103: Class constant name "init_iterations" doesn't conform to UPPER_CASE naming style (invalid-name)
agentlib_mpc/data_structures/coordinator_datatypes.py:31:4: C0103: Class constant name "optimization" doesn't conform to UPPER_CASE naming style (invalid-name)
agentlib_mpc/data_structures/coordinator_datatypes.py:32:4: C0103: Class constant name "updating" doesn't conform to UPPER_CASE naming style (invalid-name)
agentlib_mpc/data_structures/coordinator_datatypes.py:39:4: C0103: Class constant name "pending" doesn't conform to UPPER_CASE naming style (invalid-name)
agentlib_mpc/data_structures/coordinator_datatypes.py:40:4: C0103: Class constant name "standby" doesn't conform to UPPER_CASE naming style (invalid-name)
agentlib_mpc/data_structures/coordinator_datatypes.py:41:4: C0103: Class constant name "ready" doesn't conform to UPPER_CASE naming style (invalid-name)
agentlib_mpc/data_structures/coordinator_datatypes.py:42:4: C0103: Class constant name "busy" doesn't conform to UPPER_CASE naming style (invalid-name)
agentlib_mpc/data_structures/coordinator_datatypes.py:54:4: C0116: Missing function or method docstring (missing-function-docstring)
agentlib_mpc/data_structures/coordinator_datatypes.py:62:4: C0116: Missing function or method docstring (missing-function-docstring)
agentlib_mpc/data_structures/coordinator_datatypes.py:7:0: W0611: Unused Source imported from agentlib.core (unused-import)
************* Module agentlib_mpc.data_structures.__init__
agentlib_mpc/data_structures/__init__.py:1:0: C0305: Trailing newlines (trailing-newlines)
************* Module agentlib_mpc.optimization_backends.backend
agentlib_mpc/optimization_backends/backend.py:1:0: C0114: Missing module docstring (missing-module-docstring)
agentlib_mpc/optimization_backends/backend.py:1:0: F0002: agentlib_mpc/optimization_backends/backend.py: Fatal error while checking 'agentlib_mpc/optimization_backends/backend.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-14-51.txt'. (astroid-error)
************* Module agentlib_mpc.optimization_backends
agentlib_mpc/optimization_backends/__init__.py:1:0: C0114: Missing module docstring (missing-module-docstring)
agentlib_mpc/optimization_backends/__init__.py:3:0: E0401: Unable to import 'pydantic' (import-error)
************* Module agentlib_mpc.optimization_backends.casadi_.basic
agentlib_mpc/optimization_backends/casadi_/basic.py:1:0: C0114: Missing module docstring (missing-module-docstring)
agentlib_mpc/optimization_backends/casadi_/basic.py:3:0: E0401: Unable to import 'casadi' (import-error)
agentlib_mpc/optimization_backends/casadi_/basic.py:4:0: E0401: Unable to import 'numpy' (import-error)
agentlib_mpc/optimization_backends/casadi_/basic.py:28:0: C0115: Missing class docstring (missing-class-docstring)
agentlib_mpc/optimization_backends/casadi_/basic.py:28:0: R0902: Too many instance attributes (11/7) (too-many-instance-attributes)
agentlib_mpc/optimization_backends/casadi_/basic.py:99:8: W0201: Attribute 'time' defined outside __init__ (attribute-defined-outside-init)
agentlib_mpc/optimization_backends/casadi_/basic.py:103:0: C0115: Missing class docstring (missing-class-docstring)
agentlib_mpc/optimization_backends/casadi_/basic.py:106:4: C0103: Attribute name "B" doesn't conform to snake_case naming style (invalid-name)
agentlib_mpc/optimization_backends/casadi_/basic.py:107:4: C0103: Attribute name "C" doesn't conform to snake_case naming style (invalid-name)
agentlib_mpc/optimization_backends/casadi_/basic.py:108:4: C0103: Attribute name "D" doesn't conform to snake_case naming style (invalid-name)
agentlib_mpc/optimization_backends/casadi_/basic.py:111:0: C0115: Missing class docstring (missing-class-docstring)
agentlib_mpc/optimization_backends/casadi_/basic.py:112:4: R0914: Too many local variables (17/15) (too-many-locals)
agentlib_mpc/optimization_backends/casadi_/basic.py:122:8: C0103: Variable name "n" doesn't conform to snake_case naming style (invalid-name)
agentlib_mpc/optimization_backends/casadi_/basic.py:123:8: C0103: Variable name "ts" doesn't conform to snake_case naming style (invalid-name)
agentlib_mpc/optimization_backends/casadi_/basic.py:127:8: C0103: Variable name "xk" doesn't conform to snake_case naming style (invalid-name)
agentlib_mpc/optimization_backends/casadi_/basic.py:137:12: C0103: Variable name "uk" doesn't conform to snake_case naming style (invalid-name)
agentlib_mpc/optimization_backends/casadi_/basic.py:139:12: C0103: Variable name "dk" doesn't conform to snake_case naming style (invalid-name)
agentlib_mpc/optimization_backends/casadi_/basic.py:164:12: C0103: Variable name "xk" doesn't conform to snake_case naming style (invalid-name)
agentlib_mpc/optimization_backends/casadi_/basic.py:249:4: R0913: Too many arguments (7/5) (too-many-arguments)
agentlib_mpc/optimization_backends/casadi_/basic.py:249:4: R0914: Too many local variables (24/15) (too-many-locals)
agentlib_mpc/optimization_backends/casadi_/basic.py:283:8: C0103: Variable name "ts" doesn't conform to snake_case naming style (invalid-name)
agentlib_mpc/optimization_backends/casadi_/basic.py:314:12: C0103: Variable name "xp" doesn't conform to snake_case naming style (invalid-name)
agentlib_mpc/optimization_backends/casadi_/basic.py:315:16: C0103: Variable name "r" doesn't conform to snake_case naming style (invalid-name)
agentlib_mpc/optimization_backends/casadi_/basic.py:316:16: C0103: Variable name "xp" doesn't conform to snake_case naming style (invalid-name)
agentlib_mpc/optimization_backends/casadi_/basic.py:345:8: C0103: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
agentlib_mpc/optimization_backends/casadi_/basic.py:352:8: C0103: Variable name "C" doesn't conform to snake_case naming style (invalid-name)
agentlib_mpc/optimization_backends/casadi_/basic.py:355:8: C0103: Variable name "D" doesn't conform to snake_case naming style (invalid-name)
agentlib_mpc/optimization_backends/casadi_/basic.py:358:8: C0103: Variable name "B" doesn't conform to snake_case naming style (invalid-name)
agentlib_mpc/optimization_backends/casadi_/basic.py:364:12: C0103: Variable name "p" doesn't conform to snake_case naming style (invalid-name)
agentlib_mpc/optimization_backends/casadi_/basic.py:365:16: C0103: Variable name "r" doesn't conform to snake_case naming style (invalid-name)
agentlib_mpc/optimization_backends/casadi_/basic.py:367:20: C0103: Variable name "p" doesn't conform to snake_case naming style (invalid-name)
agentlib_mpc/optimization_backends/casadi_/basic.py:376:16: C0103: Variable name "r" doesn't conform to snake_case naming style (invalid-name)
agentlib_mpc/optimization_backends/casadi_/basic.py:393:0: C0115: Missing class docstring (missing-class-docstring)
agentlib_mpc/optimization_backends/casadi_/basic.py:394:4: R0914: Too many local variables (18/15) (too-many-locals)
agentlib_mpc/optimization_backends/casadi_/basic.py:399:8: C0103: Variable name "n" doesn't conform to snake_case naming style (invalid-name)
agentlib_mpc/optimization_backends/casadi_/basic.py:400:8: C0103: Variable name "ts" doesn't conform to snake_case naming style (invalid-name)
agentlib_mpc/optimization_backends/casadi_/basic.py:404:8: C0103: Variable name "xk" doesn't conform to snake_case naming style (invalid-name)
agentlib_mpc/optimization_backends/casadi_/basic.py:411:12: C0103: Variable name "uk" doesn't conform to snake_case naming style (invalid-name)
agentlib_mpc/optimization_backends/casadi_/basic.py:412:12: C0103: Variable name "dk" doesn't conform to snake_case naming style (invalid-name)
agentlib_mpc/optimization_backends/casadi_/basic.py:413:12: C0103: Variable name "zk" doesn't conform to snake_case naming style (invalid-name)
agentlib_mpc/optimization_backends/casadi_/basic.py:414:12: C0103: Variable name "yk" doesn't conform to snake_case naming style (invalid-name)
agentlib_mpc/optimization_backends/casadi_/basic.py:435:12: C0103: Variable name "fk" doesn't conform to snake_case naming style (invalid-name)
agentlib_mpc/optimization_backends/casadi_/basic.py:443:12: C0103: Variable name "xk" doesn't conform to snake_case naming style (invalid-name)
agentlib_mpc/optimization_backends/casadi_/basic.py:457:8: C0103: Variable name "p" doesn't conform to snake_case naming style (invalid-name)
************* Module agentlib_mpc.optimization_backends.casadi_.casadi_ml
agentlib_mpc/optimization_backends/casadi_/casadi_ml.py:1:0: C0114: Missing module docstring (missing-module-docstring)
agentlib_mpc/optimization_backends/casadi_/casadi_ml.py:1:0: E0401: Unable to import 'casadi' (import-error)
agentlib_mpc/optimization_backends/casadi_/casadi_ml.py:1:0: F0002: agentlib_mpc/optimization_backends/casadi_/casadi_ml.py: Fatal error while checking 'agentlib_mpc/optimization_backends/casadi_/casadi_ml.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-14-52.txt'. (astroid-error)
************* Module agentlib_mpc.optimization_backends.casadi_.full
agentlib_mpc/optimization_backends/casadi_/full.py:1:0: C0114: Missing module docstring (missing-module-docstring)
agentlib_mpc/optimization_backends/casadi_/full.py:1:0: E0401: Unable to import 'casadi' (import-error)
agentlib_mpc/optimization_backends/casadi_/full.py:17:0: C0115: Missing class docstring (missing-class-docstring)
agentlib_mpc/optimization_backends/casadi_/full.py:39:8: W0201: Attribute 'time' defined outside __init__ (attribute-defined-outside-init)
agentlib_mpc/optimization_backends/casadi_/full.py:42:0: C0115: Missing class docstring (missing-class-docstring)
agentlib_mpc/optimization_backends/casadi_/full.py:43:4: R0914: Too many local variables (17/15) (too-many-locals)
agentlib_mpc/optimization_backends/casadi_/full.py:53:8: C0103: Variable name "n" doesn't conform to snake_case naming style (invalid-name)
agentlib_mpc/optimization_backends/casadi_/full.py:54:8: C0103: Variable name "ts" doesn't conform to snake_case naming style (invalid-name)
agentlib_mpc/optimization_backends/casadi_/full.py:58:8: C0103: Variable name "xk" doesn't conform to snake_case naming style (invalid-name)
agentlib_mpc/optimization_backends/casadi_/full.py:59:8: C0103: Variable name "uk" doesn't conform to snake_case naming style (invalid-name)
agentlib_mpc/optimization_backends/casadi_/full.py:70:12: C0103: Variable name "uk" doesn't conform to snake_case naming style (invalid-name)
agentlib_mpc/optimization_backends/casadi_/full.py:93:12: C0103: Variable name "xk" doesn't conform to snake_case naming style (invalid-name)
agentlib_mpc/optimization_backends/casadi_/full.py:103:0: C0115: Missing class docstring (missing-class-docstring)
agentlib_mpc/optimization_backends/casadi_/full.py:104:4: R0914: Too many local variables (20/15) (too-many-locals)
agentlib_mpc/optimization_backends/casadi_/full.py:109:8: C0103: Variable name "n" doesn't conform to snake_case naming style (invalid-name)
agentlib_mpc/optimization_backends/casadi_/full.py:110:8: C0103: Variable name "ts" doesn't conform to snake_case naming style (invalid-name)
agentlib_mpc/optimization_backends/casadi_/full.py:114:8: C0103: Variable name "xk" doesn't conform to snake_case naming style (invalid-name)
agentlib_mpc/optimization_backends/casadi_/full.py:116:8: C0103: Variable name "uk" doesn't conform to snake_case naming style (invalid-name)
agentlib_mpc/optimization_backends/casadi_/full.py:127:12: C0103: Variable name "uk" doesn't conform to snake_case naming style (invalid-name)
agentlib_mpc/optimization_backends/casadi_/full.py:130:12: C0103: Variable name "dk" doesn't conform to snake_case naming style (invalid-name)
agentlib_mpc/optimization_backends/casadi_/full.py:131:12: C0103: Variable name "zk" doesn't conform to snake_case naming style (invalid-name)
agentlib_mpc/optimization_backends/casadi_/full.py:132:12: C0103: Variable name "yk" doesn't conform to snake_case naming style (invalid-name)
agentlib_mpc/optimization_backends/casadi_/full.py:149:12: C0103: Variable name "fk" doesn't conform to snake_case naming style (invalid-name)
agentlib_mpc/optimization_backends/casadi_/full.py:156:12: C0103: Variable name "xk" doesn't conform to snake_case naming style (invalid-name)
************* Module agentlib_mpc.optimization_backends.casadi_.admm
agentlib_mpc/optimization_backends/casadi_/admm.py:1:0: C0114: Missing module docstring (missing-module-docstring)
agentlib_mpc/optimization_backends/casadi_/admm.py:1:0: E0401: Unable to import 'casadi' (import-error)
agentlib_mpc/optimization_backends/casadi_/admm.py:2:0: E0401: Unable to import 'pandas' (import-error)
agentlib_mpc/optimization_backends/casadi_/admm.py:22:0: C0115: Missing class docstring (missing-class-docstring)
agentlib_mpc/optimization_backends/casadi_/admm.py:22:0: R0902: Too many instance attributes (9/7) (too-many-instance-attributes)
agentlib_mpc/optimization_backends/casadi_/admm.py:107:0: C0115: Missing class docstring (missing-class-docstring)
agentlib_mpc/optimization_backends/casadi_/admm.py:108:4: R0914: Too many local variables (18/15) (too-many-locals)
agentlib_mpc/optimization_backends/casadi_/admm.py:118:8: C0103: Variable name "n" doesn't conform to snake_case naming style (invalid-name)
agentlib_mpc/optimization_backends/casadi_/admm.py:119:8: C0103: Variable name "ts" doesn't conform to snake_case naming style (invalid-name)
agentlib_mpc/optimization_backends/casadi_/admm.py:123:8: C0103: Variable name "xk" doesn't conform to snake_case naming style (invalid-name)
agentlib_mpc/optimization_backends/casadi_/admm.py:124:8: C0103: Variable name "uk" doesn't conform to snake_case naming style (invalid-name)
agentlib_mpc/optimization_backends/casadi_/admm.py:136:12: C0103: Variable name "uk" doesn't conform to snake_case naming style (invalid-name)
agentlib_mpc/optimization_backends/casadi_/admm.py:173:12: C0103: Variable name "xk" doesn't conform to snake_case naming style (invalid-name)
agentlib_mpc/optimization_backends/casadi_/admm.py:183:0: C0115: Missing class docstring (missing-class-docstring)
agentlib_mpc/optimization_backends/casadi_/admm.py:184:4: R0914: Too many local variables (28/15) (too-many-locals)
agentlib_mpc/optimization_backends/casadi_/admm.py:307:8: C0103: Variable name "p" doesn't conform to snake_case naming style (invalid-name)
agentlib_mpc/optimization_backends/casadi_/admm.py:342:8: C0103: Attribute name "it" doesn't conform to snake_case naming style (invalid-name)
agentlib_mpc/optimization_backends/casadi_/admm.py:402:13: W1514: Using open without explicitly specifying an encoding (unspecified-encoding)
agentlib_mpc/optimization_backends/casadi_/admm.py:402:48: C0103: Variable name "f" doesn't conform to snake_case naming style (invalid-name)
agentlib_mpc/optimization_backends/casadi_/admm.py:406:13: W1514: Using open without explicitly specifying an encoding (unspecified-encoding)
agentlib_mpc/optimization_backends/casadi_/admm.py:406:48: C0103: Variable name "f" doesn't conform to snake_case naming style (invalid-name)
************* Module agentlib_mpc.optimization_backends.casadi_.minlp
agentlib_mpc/optimization_backends/casadi_/minlp.py:1:0: C0114: Missing module docstring (missing-module-docstring)
agentlib_mpc/optimization_backends/casadi_/minlp.py:1:0: E0401: Unable to import 'casadi' (import-error)
agentlib_mpc/optimization_backends/casadi_/minlp.py:2:0: E0401: Unable to import 'numpy' (import-error)
agentlib_mpc/optimization_backends/casadi_/minlp.py:17:0: C0115: Missing class docstring (missing-class-docstring)
agentlib_mpc/optimization_backends/casadi_/minlp.py:63:0: C0115: Missing class docstring (missing-class-docstring)
agentlib_mpc/optimization_backends/casadi_/minlp.py:64:4: R0914: Too many local variables (16/15) (too-many-locals)
agentlib_mpc/optimization_backends/casadi_/minlp.py:74:8: C0103: Variable name "n" doesn't conform to snake_case naming style (invalid-name)
agentlib_mpc/optimization_backends/casadi_/minlp.py:75:8: C0103: Variable name "ts" doesn't conform to snake_case naming style (invalid-name)
agentlib_mpc/optimization_backends/casadi_/minlp.py:79:8: C0103: Variable name "xk" doesn't conform to snake_case naming style (invalid-name)
agentlib_mpc/optimization_backends/casadi_/minlp.py:88:12: C0103: Variable name "uk" doesn't conform to snake_case naming style (invalid-name)
agentlib_mpc/optimization_backends/casadi_/minlp.py:89:12: C0103: Variable name "wk" doesn't conform to snake_case naming style (invalid-name)
agentlib_mpc/optimization_backends/casadi_/minlp.py:114:12: C0103: Variable name "xk" doesn't conform to snake_case naming style (invalid-name)
agentlib_mpc/optimization_backends/casadi_/minlp.py:124:0: C0115: Missing class docstring (missing-class-docstring)
agentlib_mpc/optimization_backends/casadi_/minlp.py:125:4: R0914: Too many local variables (19/15) (too-many-locals)
agentlib_mpc/optimization_backends/casadi_/minlp.py:130:8: C0103: Variable name "n" doesn't conform to snake_case naming style (invalid-name)
agentlib_mpc/optimization_backends/casadi_/minlp.py:131:8: C0103: Variable name "ts" doesn't conform to snake_case naming style (invalid-name)
agentlib_mpc/optimization_backends/casadi_/minlp.py:135:8: C0103: Variable name "xk" doesn't conform to snake_case naming style (invalid-name)
agentlib_mpc/optimization_backends/casadi_/minlp.py:142:12: C0103: Variable name "uk" doesn't conform to snake_case naming style (invalid-name)
agentlib_mpc/optimization_backends/casadi_/minlp.py:143:12: C0103: Variable name "wk" doesn't conform to snake_case naming style (invalid-name)
agentlib_mpc/optimization_backends/casadi_/minlp.py:144:12: C0103: Variable name "dk" doesn't conform to snake_case naming style (invalid-name)
agentlib_mpc/optimization_backends/casadi_/minlp.py:145:12: C0103: Variable name "zk" doesn't conform to snake_case naming style (invalid-name)
agentlib_mpc/optimization_backends/casadi_/minlp.py:146:12: C0103: Variable name "yk" doesn't conform to snake_case naming style (invalid-name)
agentlib_mpc/optimization_backends/casadi_/minlp.py:162:12: C0103: Variable name "fk" doesn't conform to snake_case naming style (invalid-name)
agentlib_mpc/optimization_backends/casadi_/minlp.py:170:12: C0103: Variable name "xk" doesn't conform to snake_case naming style (invalid-name)
************* Module agentlib_mpc.optimization_backends.casadi_.minlp_cia
agentlib_mpc/optimization_backends/casadi_/minlp_cia.py:28:29: W1401: Anomalous backslash in string: '\ '. String constant might be missing an r prefix. (anomalous-backslash-in-string)
agentlib_mpc/optimization_backends/casadi_/minlp_cia.py:1:0: C0114: Missing module docstring (missing-module-docstring)
agentlib_mpc/optimization_backends/casadi_/minlp_cia.py:1:0: F0002: agentlib_mpc/optimization_backends/casadi_/minlp_cia.py: Fatal error while checking 'agentlib_mpc/optimization_backends/casadi_/minlp_cia.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-14-52.txt'. (astroid-error)
************* Module agentlib_mpc.optimization_backends.casadi_.mhe
agentlib_mpc/optimization_backends/casadi_/mhe.py:1:0: C0114: Missing module docstring (missing-module-docstring)
agentlib_mpc/optimization_backends/casadi_/mhe.py:1:0: F0002: agentlib_mpc/optimization_backends/casadi_/mhe.py: Fatal error while checking 'agentlib_mpc/optimization_backends/casadi_/mhe.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-14-53.txt'. (astroid-error)
************* Module agentlib_mpc.optimization_backends.casadi_.casadi_admm_ml
agentlib_mpc/optimization_backends/casadi_/casadi_admm_ml.py:1:0: C0114: Missing module docstring (missing-module-docstring)
agentlib_mpc/optimization_backends/casadi_/casadi_admm_ml.py:1:0: F0002: agentlib_mpc/optimization_backends/casadi_/casadi_admm_ml.py: Fatal error while checking 'agentlib_mpc/optimization_backends/casadi_/casadi_admm_ml.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-14-53.txt'. (astroid-error)
************* Module agentlib_mpc.optimization_backends.casadi_.core.VariableGroup
agentlib_mpc/optimization_backends/casadi_/core/VariableGroup.py:1:0: C0114: Missing module docstring (missing-module-docstring)
agentlib_mpc/optimization_backends/casadi_/core/VariableGroup.py:1:0: C0103: Module name "VariableGroup" doesn't conform to snake_case naming style (invalid-name)
agentlib_mpc/optimization_backends/casadi_/core/VariableGroup.py:5:0: E0401: Unable to import 'casadi' (import-error)
agentlib_mpc/optimization_backends/casadi_/core/VariableGroup.py:11:0: C0115: Missing class docstring (missing-class-docstring)
agentlib_mpc/optimization_backends/casadi_/core/VariableGroup.py:33:0: C0115: Missing class docstring (missing-class-docstring)
agentlib_mpc/optimization_backends/casadi_/core/VariableGroup.py:40:4: R0913: Too many arguments (7/5) (too-many-arguments)
agentlib_mpc/optimization_backends/casadi_/core/VariableGroup.py:40:4: R0914: Too many local variables (22/15) (too-many-locals)
agentlib_mpc/optimization_backends/casadi_/core/VariableGroup.py:144:0: C0115: Missing class docstring (missing-class-docstring)
agentlib_mpc/optimization_backends/casadi_/core/VariableGroup.py:149:4: R0913: Too many arguments (6/5) (too-many-arguments)
************* Module agentlib_mpc.optimization_backends.casadi_.core.casadi_backend
agentlib_mpc/optimization_backends/casadi_/core/casadi_backend.py:1:0: C0114: Missing module docstring (missing-module-docstring)
agentlib_mpc/optimization_backends/casadi_/core/casadi_backend.py:1:0: F0002: agentlib_mpc/optimization_backends/casadi_/core/casadi_backend.py: Fatal error while checking 'agentlib_mpc/optimization_backends/casadi_/core/casadi_backend.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-14-53.txt'. (astroid-error)
************* Module agentlib_mpc.optimization_backends.casadi_.core.system
agentlib_mpc/optimization_backends/casadi_/core/system.py:1:0: F0002: agentlib_mpc/optimization_backends/casadi_/core/system.py: Fatal error while checking 'agentlib_mpc/optimization_backends/casadi_/core/system.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-14-53.txt'. (astroid-error)
************* Module agentlib_mpc.optimization_backends.casadi_.core.discretization
agentlib_mpc/optimization_backends/casadi_/core/discretization.py:1:0: F0002: agentlib_mpc/optimization_backends/casadi_/core/discretization.py: Fatal error while checking 'agentlib_mpc/optimization_backends/casadi_/core/discretization.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-14-54.txt'. (astroid-error)
************* Module agentlib_mpc.modules.data_source
agentlib_mpc/modules/data_source.py:122:0: C0301: Line too long (147/100) (line-too-long)
agentlib_mpc/modules/data_source.py:178:0: C0301: Line too long (101/100) (line-too-long)
agentlib_mpc/modules/data_source.py:180:0: C0301: Line too long (116/100) (line-too-long)
agentlib_mpc/modules/data_source.py:1:0: C0114: Missing module docstring (missing-module-docstring)
agentlib_mpc/modules/data_source.py:3:0: E0401: Unable to import 'pandas' (import-error)
agentlib_mpc/modules/data_source.py:4:0: E0401: Unable to import 'numpy' (import-error)
agentlib_mpc/modules/data_source.py:6:0: E0401: Unable to import 'pydantic' (import-error)
agentlib_mpc/modules/data_source.py:1:0: F0002: agentlib_mpc/modules/data_source.py: Fatal error while checking 'agentlib_mpc/modules/data_source.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-14-54.txt'. (astroid-error)
************* Module agentlib_mpc.modules.mpc
agentlib_mpc/modules/mpc.py:1:0: F0002: agentlib_mpc/modules/mpc.py: Fatal error while checking 'agentlib_mpc/modules/mpc.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-14-54.txt'. (astroid-error)
************* Module agentlib_mpc.modules.minlp_mpc
agentlib_mpc/modules/minlp_mpc.py:1:0: C0114: Missing module docstring (missing-module-docstring)
agentlib_mpc/modules/minlp_mpc.py:4:0: E0401: Unable to import 'pydantic' (import-error)
agentlib_mpc/modules/minlp_mpc.py:31:12: C0103: Variable name "bc" doesn't conform to snake_case naming style (invalid-name)
agentlib_mpc/modules/minlp_mpc.py:34:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
agentlib_mpc/modules/minlp_mpc.py:43:0: C0115: Missing class docstring (missing-class-docstring)
agentlib_mpc/modules/minlp_mpc.py:98:25: E1133: Non-iterable value self.var_ref.binary_controls is used in an iterating context (not-an-iterable)
agentlib_mpc/modules/data_source.py:5:0: C0411: standard import "import logging" should be placed before "import pandas as pd" (wrong-import-order)
agentlib_mpc/modules/mpc.py:3:0: C0411: standard import "import os" should be placed before "import pandas as pd" (wrong-import-order)
agentlib_mpc/modules/minlp_mpc.py:1:0: C0411: standard import "import logging" should be placed before "import pandas as pd" (wrong-import-order)
agentlib_mpc/modules/minlp_mpc.py:2:0: C0411: standard import "import os" should be placed before "import pandas as pd" (wrong-import-order)
agentlib_mpc/modules/minlp_mpc.py:1:0: C0412: Imports from package logging are not grouped (ungrouped-imports)
agentlib_mpc/modules/minlp_mpc.py:2:0: C0412: Imports from package os are not grouped (ungrouped-imports)
************* Module agentlib_mpc.modules.ml_model_simulator
agentlib_mpc/modules/ml_model_simulator.py:1:0: C0114: Missing module docstring (missing-module-docstring)
agentlib_mpc/modules/ml_model_simulator.py:1:0: E0401: Unable to import 'pydantic' (import-error)
agentlib_mpc/modules/ml_model_simulator.py:2:0: E0401: Unable to import 'agentlib.core' (import-error)
agentlib_mpc/modules/ml_model_simulator.py:3:0: E0401: Unable to import 'agentlib.core.errors' (import-error)
agentlib_mpc/modules/ml_model_simulator.py:4:0: E0401: Unable to import 'agentlib.modules.simulator' (import-error)
agentlib_mpc/modules/ml_model_simulator.py:5:0: E0401: Unable to import 'pydantic_core.core_schema' (import-error)
agentlib_mpc/modules/ml_model_simulator.py:9:0: E0401: Unable to import 'pydantic' (import-error)
agentlib_mpc/modules/ml_model_simulator.py:12:0: C0115: Missing class docstring (missing-class-docstring)
agentlib_mpc/modules/ml_model_simulator.py:28:0: C0115: Missing class docstring (missing-class-docstring)
agentlib_mpc/modules/ml_model_simulator.py:39:4: C0116: Missing function or method docstring (missing-function-docstring)
agentlib_mpc/modules/ml_model_simulator.py:9:0: C0411: third party import "from pydantic import field_validator" should be placed before "from agentlib_mpc.models.casadi_ml_model import CasadiMLModel" (wrong-import-order)
************* Module agentlib_mpc.modules.mpc_full
agentlib_mpc/modules/mpc_full.py:3:0: E0401: Unable to import 'numpy' (import-error)
agentlib_mpc/modules/mpc_full.py:4:0: E0401: Unable to import 'pandas' (import-error)
agentlib_mpc/modules/mpc_full.py:5:0: E0401: Unable to import 'agentlib.core' (import-error)
agentlib_mpc/modules/mpc_full.py:8:0: E0401: Unable to import 'pydantic' (import-error)
agentlib_mpc/modules/mpc_full.py:9:0: E0401: Unable to import 'rapidfuzz' (import-error)
agentlib_mpc/modules/mpc_full.py:60:12: C0103: Variable name "v" doesn't conform to snake_case naming style (invalid-name)
agentlib_mpc/modules/mpc_full.py:56:8: W0201: Attribute '_lags_dict_seconds' defined outside __init__ (attribute-defined-outside-init)
agentlib_mpc/modules/mpc_full.py:80:8: W0201: Attribute 'history' defined outside __init__ (attribute-defined-outside-init)
agentlib_mpc/modules/mpc_full.py:122:8: W0201: Attribute '_internal_variables' defined outside __init__ (attribute-defined-outside-init)
agentlib_mpc/modules/mpc_full.py:8:0: C0411: third party import "from pydantic import Field, field_validator, FieldValidationInfo" should be placed before "from agentlib_mpc.data_structures import mpc_datamodels" (wrong-import-order)
agentlib_mpc/modules/mpc_full.py:9:0: C0411: third party import "from rapidfuzz import process, fuzz" should be placed before "from agentlib_mpc.data_structures import mpc_datamodels" (wrong-import-order)
agentlib_mpc/modules/mpc_full.py:11:0: C0412: Imports from package agentlib_mpc are not grouped (ungrouped-imports)
************* Module agentlib_mpc.modules
agentlib_mpc/modules/__init__.py:11:0: C0115: Missing class docstring (missing-class-docstring)
agentlib_mpc/modules/__init__.py:16:4: C0116: Missing function or method docstring (missing-function-docstring)
************* Module agentlib_mpc.modules.estimation.mhe
agentlib_mpc/modules/estimation/mhe.py:1:0: C0114: Missing module docstring (missing-module-docstring)
agentlib_mpc/modules/estimation/mhe.py:1:0: F0002: agentlib_mpc/modules/estimation/mhe.py: Fatal error while checking 'agentlib_mpc/modules/estimation/mhe.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-14-54.txt'. (astroid-error)
************* Module agentlib_mpc.modules.dmpc.coordinator
agentlib_mpc/modules/dmpc/coordinator.py:204:0: C0325: Unnecessary parens after 'not' keyword (superfluous-parens)
agentlib_mpc/modules/dmpc/coordinator.py:1:0: C0114: Missing module docstring (missing-module-docstring)
agentlib_mpc/modules/dmpc/coordinator.py:1:0: F0002: agentlib_mpc/modules/dmpc/coordinator.py: Fatal error while checking 'agentlib_mpc/modules/dmpc/coordinator.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-14-54.txt'. (astroid-error)
************* Module agentlib_mpc.modules.dmpc.employee
agentlib_mpc/modules/dmpc/employee.py:87:0: C0301: Line too long (140/100) (line-too-long)
agentlib_mpc/modules/dmpc/employee.py:171:0: C0325: Unnecessary parens after 'not' keyword (superfluous-parens)
agentlib_mpc/modules/dmpc/employee.py:1:0: C0114: Missing module docstring (missing-module-docstring)
agentlib_mpc/modules/dmpc/employee.py:5:0: E0401: Unable to import 'pydantic' (import-error)
agentlib_mpc/modules/dmpc/employee.py:7:0: E0401: Unable to import 'agentlib.core' (import-error)
agentlib_mpc/modules/dmpc/employee.py:14:0: E0401: Unable to import 'agentlib.core.datamodels' (import-error)
agentlib_mpc/modules/dmpc/employee.py:22:0: C0115: Missing class docstring (missing-class-docstring)
agentlib_mpc/modules/dmpc/employee.py:45:0: C0115: Missing class docstring (missing-class-docstring)
agentlib_mpc/modules/dmpc/employee.py:174:8: C0103: Attribute name "OptimOpts" doesn't conform to snake_case naming style (invalid-name)
agentlib_mpc/modules/dmpc/employee.py:53:4: C0116: Missing function or method docstring (missing-function-docstring)
agentlib_mpc/modules/dmpc/employee.py:61:4: C0116: Missing function or method docstring (missing-function-docstring)
agentlib_mpc/modules/dmpc/employee.py:89:8: W0107: Unnecessary pass statement (unnecessary-pass)
agentlib_mpc/modules/dmpc/employee.py:121:8: W2301: Unnecessary ellipsis constant (unnecessary-ellipsis)
agentlib_mpc/modules/dmpc/employee.py:158:8: W2301: Unnecessary ellipsis constant (unnecessary-ellipsis)
agentlib_mpc/modules/dmpc/employee.py:174:8: W0201: Attribute 'OptimOpts' defined outside __init__ (attribute-defined-outside-init)
agentlib_mpc/modules/dmpc/employee.py:1:0: C0412: Imports from package logging are not grouped (ungrouped-imports)
agentlib_mpc/modules/dmpc/employee.py:2:0: C0412: Imports from package dataclasses are not grouped (ungrouped-imports)
************* Module agentlib_mpc.modules.dmpc
agentlib_mpc/modules/dmpc/__init__.py:1:0: C0114: Missing module docstring (missing-module-docstring)
************* Module agentlib_mpc.modules.dmpc.admm.admm_coordinated
agentlib_mpc/modules/dmpc/admm/admm_coordinated.py:1:0: F0002: agentlib_mpc/modules/dmpc/admm/admm_coordinated.py: Fatal error while checking 'agentlib_mpc/modules/dmpc/admm/admm_coordinated.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-14-55.txt'. (astroid-error)
************* Module agentlib_mpc.modules.dmpc.admm.admm
agentlib_mpc/modules/dmpc/admm/admm.py:1:0: F0002: agentlib_mpc/modules/dmpc/admm/admm.py: Fatal error while checking 'agentlib_mpc/modules/dmpc/admm/admm.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-14-55.txt'. (astroid-error)
************* Module agentlib_mpc.modules.dmpc.admm.admm_coordinator
agentlib_mpc/modules/dmpc/admm/admm_coordinator.py:599:0: C0325: Unnecessary parens after 'not' keyword (superfluous-parens)
agentlib_mpc/modules/dmpc/admm/admm_coordinator.py:631:0: C0325: Unnecessary parens after 'not' keyword (superfluous-parens)
agentlib_mpc/modules/dmpc/admm/admm_coordinator.py:1:0: F0002: agentlib_mpc/modules/dmpc/admm/admm_coordinator.py: Fatal error while checking 'agentlib_mpc/modules/dmpc/admm/admm_coordinator.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-14-55.txt'. (astroid-error)
agentlib_mpc/modules/dmpc/admm/admm_coordinator.py:6:0: C0412: Imports from package time are not grouped (ungrouped-imports)
************* Module agentlib_mpc.modules.ml_model_training.data_reduction
agentlib_mpc/modules/ml_model_training/data_reduction.py:97:0: C0301: Line too long (122/100) (line-too-long)
agentlib_mpc/modules/ml_model_training/data_reduction.py:3:0: E0401: Unable to import 'numpy' (import-error)
agentlib_mpc/modules/ml_model_training/data_reduction.py:4:0: E0401: Unable to import 'sklearn' (import-error)
agentlib_mpc/modules/ml_model_training/data_reduction.py:6:0: E0401: Unable to import 'sklearn.gaussian_process.kernels' (import-error)
agentlib_mpc/modules/ml_model_training/data_reduction.py:24:4: C0116: Missing function or method docstring (missing-function-docstring)
agentlib_mpc/modules/ml_model_training/data_reduction.py:33:0: C0115: Missing class docstring (missing-class-docstring)
agentlib_mpc/modules/ml_model_training/data_reduction.py:34:23: W0621: Redefining name 'n_components' from outer scope (line 59) (redefined-outer-name)
agentlib_mpc/modules/ml_model_training/data_reduction.py:35:8: R1725: Consider using Python 3 style super() without arguments (super-with-arguments)
agentlib_mpc/modules/ml_model_training/data_reduction.py:56:4: E0401: Unable to import 'sklearn.gaussian_process' (import-error)
agentlib_mpc/modules/ml_model_training/data_reduction.py:57:4: E0401: Unable to import 'matplotlib.pyplot' (import-error)
agentlib_mpc/modules/ml_model_training/data_reduction.py:59:4: C0103: Constant name "n_components" doesn't conform to UPPER_CASE naming style (invalid-name)
agentlib_mpc/modules/ml_model_training/data_reduction.py:61:4: C0103: Function name "f" doesn't conform to snake_case naming style (invalid-name)
agentlib_mpc/modules/ml_model_training/data_reduction.py:66:4: C0116: Missing function or method docstring (missing-function-docstring)
agentlib_mpc/modules/ml_model_training/data_reduction.py:66:24: W0621: Redefining name 'x_test' from outer scope (line 83) (redefined-outer-name)
agentlib_mpc/modules/ml_model_training/data_reduction.py:66:32: W0621: Redefining name 'y_test' from outer scope (line 84) (redefined-outer-name)
agentlib_mpc/modules/ml_model_training/data_reduction.py:69:8: C0103: Variable name "s" doesn't conform to snake_case naming style (invalid-name)
agentlib_mpc/modules/ml_model_training/data_reduction.py:75:13: R1734: Consider using [] instead of list() (use-list-literal)
agentlib_mpc/modules/ml_model_training/data_reduction.py:5:0: C0411: standard import "from abc import ABC, abstractmethod" should be placed before "import numpy as np" (wrong-import-order)
************* Module agentlib_mpc.modules.ml_model_training.setpoint_generator
agentlib_mpc/modules/ml_model_training/setpoint_generator.py:7:0: E0401: Unable to import 'agentlib.core' (import-error)
agentlib_mpc/modules/ml_model_training/setpoint_generator.py:42:4: C0116: Missing function or method docstring (missing-function-docstring)
agentlib_mpc/modules/ml_model_training/setpoint_generator.py:44:4: C0116: Missing function or method docstring (missing-function-docstring)
************* Module agentlib_mpc.modules.ml_model_training.ml_model_trainer
agentlib_mpc/modules/ml_model_training/ml_model_trainer.py:515:0: C0325: Unnecessary parens after '=' keyword (superfluous-parens)
agentlib_mpc/modules/ml_model_training/ml_model_trainer.py:723:0: C0301: Line too long (102/100) (line-too-long)
agentlib_mpc/modules/ml_model_training/ml_model_trainer.py:1:0: C0114: Missing module docstring (missing-module-docstring)
agentlib_mpc/modules/ml_model_training/ml_model_trainer.py:1:0: F0002: agentlib_mpc/modules/ml_model_training/ml_model_trainer.py: Fatal error while checking 'agentlib_mpc/modules/ml_model_training/ml_model_trainer.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-14-55.txt'. (astroid-error)
************* Module agentlib_mpc.modules.InputPrediction.try_predictor
agentlib_mpc/modules/InputPrediction/try_predictor.py:1:0: C0114: Missing module docstring (missing-module-docstring)
agentlib_mpc/modules/InputPrediction/try_predictor.py:1:0: E0401: Unable to import 'pandas' (import-error)
agentlib_mpc/modules/InputPrediction/try_predictor.py:2:0: E0401: Unable to import 'pydantic' (import-error)
agentlib_mpc/modules/InputPrediction/try_predictor.py:3:0: E0401: Unable to import 'agentlib.core' (import-error)
agentlib_mpc/modules/InputPrediction/try_predictor.py:4:0: E0401: Unable to import 'agentlib.modules.utils.try_sensor' (import-error)
agentlib_mpc/modules/InputPrediction/try_predictor.py:7:0: C0115: Missing class docstring (missing-class-docstring)
agentlib_mpc/modules/InputPrediction/try_predictor.py:70:0: C0115: Missing class docstring (missing-class-docstring)
agentlib_mpc/modules/InputPrediction/try_predictor.py:74:4: C0116: Missing function or method docstring (missing-function-docstring)
agentlib_mpc/modules/InputPrediction/try_predictor.py:80:4: C0116: Missing function or method docstring (missing-function-docstring)
agentlib_mpc/modules/InputPrediction/try_predictor.py:87:4: C0116: Missing function or method docstring (missing-function-docstring)
************* Module agentlib_mpc.modules.InputPrediction
agentlib_mpc/modules/InputPrediction/__init__.py:1:0: C0103: Module name "InputPrediction" doesn't conform to snake_case naming style (invalid-name)
************* Module test_examples
ci/test_examples.py:8:0: E0401: Unable to import 'pandas' (import-error)
ci/test_examples.py:9:0: E0401: Unable to import 'pytest' (import-error)
ci/test_examples.py:11:0: E0401: Unable to import 'agentlib.utils' (import-error)
ci/test_examples.py:12:0: E0401: Unable to import 'agentlib.utils.local_broadcast_broker' (import-error)
ci/test_examples.py:60:8: W0105: String statement has no effect (pointless-string-statement)
ci/test_examples.py:68:4: C0116: Missing function or method docstring (missing-function-docstring)
ci/test_examples.py:76:4: C0116: Missing function or method docstring (missing-function-docstring)
ci/test_examples.py:86:4: C0116: Missing function or method docstring (missing-function-docstring)
ci/test_examples.py:96:4: C0116: Missing function or method docstring (missing-function-docstring)
ci/test_examples.py:112:4: C0116: Missing function or method docstring (missing-function-docstring)
ci/test_examples.py:5:0: W0611: Unused import subprocess (unused-import)
************* Module test_serialized_ann
tests/test_serialized_ann.py:4:0: E0401: Unable to import 'numpy' (import-error)
tests/test_serialized_ann.py:7:0: E0401: Unable to import 'keras' (import-error)
tests/test_serialized_ann.py:5:0: C0411: standard import "import unittest" should be placed before "import numpy as np" (wrong-import-order)
tests/test_serialized_ann.py:8:0: C0411: standard import "from pathlib import Path" should be placed before "import numpy as np" (wrong-import-order)
tests/test_serialized_ann.py:13:0: C0411: third party import "from fixtures.ann import ANNTrainer" should be placed before "from agentlib_mpc.data_structures import ml_model_datatypes" (wrong-import-order)
tests/test_serialized_ann.py:14:0: C0411: third party import "from fixtures.data_generator import DataGenerator" should be placed before "from agentlib_mpc.data_structures import ml_model_datatypes" (wrong-import-order)
************* Module test_casadi_ml_model
tests/test_casadi_ml_model.py:3:0: E0401: Unable to import 'pytest' (import-error)
tests/test_casadi_ml_model.py:9:0: C0115: Missing class docstring (missing-class-docstring)
tests/test_casadi_ml_model.py:14:0: C0115: Missing class docstring (missing-class-docstring)
tests/test_casadi_ml_model.py:23:0: C0116: Missing function or method docstring (missing-function-docstring)
************* Module test_admm
tests/test_admm.py:1:0: C0114: Missing module docstring (missing-module-docstring)
tests/test_admm.py:8:0: E0401: Unable to import 'numpy' (import-error)
tests/test_admm.py:10:0: E0401: Unable to import 'agentlib.core' (import-error)
tests/test_admm.py:11:0: E0401: Unable to import 'agentlib.utils.local_broadcast_broker' (import-error)
tests/test_admm.py:22:0: C0103: Constant name "a" doesn't conform to UPPER_CASE naming style (invalid-name)
tests/test_admm.py:63:0: C0115: Missing class docstring (missing-class-docstring)
tests/test_admm.py:74:4: C0116: Missing function or method docstring (missing-function-docstring)
tests/test_admm.py:76:8: W0612: Unused variable 'admm_module' (unused-variable)
tests/test_admm.py:80:4: C0116: Missing function or method docstring (missing-function-docstring)
tests/test_admm.py:85:13: W0212: Access to a protected member _start_executing_callbacks of a client class (protected-access)
tests/test_admm.py:86:13: W0212: Access to a protected member _start_executing_callbacks of a client class (protected-access)
tests/test_admm.py:109:8: W0212: Access to a protected member _solve_local_optimization of a client class (protected-access)
tests/test_admm.py:110:12: W0212: Access to a protected member _solve_local_optimization_debug of a client class (protected-access)
tests/test_admm.py:112:8: W0212: Access to a protected member _solve_local_optimization of a client class (protected-access)
tests/test_admm.py:113:12: W0212: Access to a protected member _solve_local_optimization_debug of a client class (protected-access)
tests/test_admm.py:118:19: W0212: Access to a protected member _admm_loop of a client class (protected-access)
tests/test_admm.py:123:19: W0212: Access to a protected member _admm_loop of a client class (protected-access)
tests/test_admm.py:127:13: W0212: Access to a protected member _process_realtime of a client class (protected-access)
tests/test_admm.py:128:13: W0212: Access to a protected member _process_realtime of a client class (protected-access)
tests/test_admm.py:149:24: W0212: Access to a protected member _admm_variables of a client class (protected-access)
tests/test_admm.py:150:24: W0212: Access to a protected member _admm_variables of a client class (protected-access)
tests/test_admm.py:163:4: C0116: Missing function or method docstring (missing-function-docstring)
tests/test_admm.py:167:4: C0116: Missing function or method docstring (missing-function-docstring)
tests/test_admm.py:88:8: W0201: Attribute 'admm_module1' defined outside __init__ (attribute-defined-outside-init)
tests/test_admm.py:89:8: W0201: Attribute 'admm_module2' defined outside __init__ (attribute-defined-outside-init)
tests/test_admm.py:92:8: W0201: Attribute 'counter' defined outside __init__ (attribute-defined-outside-init)
tests/test_admm.py:93:8: W0201: Attribute 'counter2' defined outside __init__ (attribute-defined-outside-init)
************* Module test_casadi_backend
tests/test_casadi_backend.py:1:0: C0114: Missing module docstring (missing-module-docstring)
tests/test_casadi_backend.py:3:0: E0401: Unable to import 'casadi' (import-error)
tests/test_casadi_backend.py:4:0: E0401: Unable to import 'pytest' (import-error)
tests/test_casadi_backend.py:26:0: C0116: Missing function or method docstring (missing-function-docstring)
tests/test_casadi_backend.py:37:0: C0116: Missing function or method docstring (missing-function-docstring)
tests/test_casadi_backend.py:37:48: W0621: Redefining name 'var_ref' from outer scope (line 26) (redefined-outer-name)
tests/test_casadi_backend.py:44:0: C0116: Missing function or method docstring (missing-function-docstring)
tests/test_casadi_backend.py:44:31: W0621: Redefining name 'example_casadi_system' from outer scope (line 37) (redefined-outer-name)
tests/test_casadi_backend.py:55:0: C0116: Missing function or method docstring (missing-function-docstring)
tests/test_casadi_backend.py:55:32: W0621: Redefining name 'var_ref' from outer scope (line 26) (redefined-outer-name)
tests/test_casadi_backend.py:56:4: C0103: Variable name "be" doesn't conform to snake_case naming style (invalid-name)
tests/test_casadi_backend.py:61:0: C0116: Missing function or method docstring (missing-function-docstring)
tests/test_casadi_backend.py:68:8: W0612: Unused variable 'optimization_variable' (unused-variable)
tests/test_casadi_backend.py:75:4: W0612: Unused variable 'optimization_variable_1' (unused-variable)
tests/test_casadi_backend.py:90:8: W0612: Unused variable 'optimization_variable_3' (unused-variable)
tests/test_casadi_backend.py:97:0: C0116: Missing function or method docstring (missing-function-docstring)
tests/test_casadi_backend.py:97:16: W0621: Redefining name 'example_casadi_system' from outer scope (line 37) (redefined-outer-name)
tests/test_casadi_backend.py:113:0: C0116: Missing function or method docstring (missing-function-docstring)
tests/test_casadi_backend.py:114:4: W0621: Redefining name 'collocation_discretization' from outer scope (line 44) (redefined-outer-name)
tests/test_casadi_backend.py:114:51: W0621: Redefining name 'example_casadi_system' from outer scope (line 37) (redefined-outer-name)
tests/test_casadi_backend.py:135:0: C0116: Missing function or method docstring (missing-function-docstring)
tests/test_casadi_backend.py:135:17: W0621: Redefining name 'example_casadi_system' from outer scope (line 37) (redefined-outer-name)
tests/test_casadi_backend.py:154:0: C0116: Missing function or method docstring (missing-function-docstring)
tests/test_casadi_backend.py:154:24: W0621: Redefining name 'example_backend' from outer scope (line 55) (redefined-outer-name)
tests/test_casadi_backend.py:155:4: C0103: Variable name "be" doesn't conform to snake_case naming style (invalid-name)
tests/test_casadi_backend.py:159:13: W0212: Access to a protected member _mpc_inputs_to_nlp_inputs of a client class (protected-access)
************* Module test_serialized_linreg
tests/test_serialized_linreg.py:1:0: C0114: Missing module docstring (missing-module-docstring)
tests/test_serialized_linreg.py:1:0: E0401: Unable to import 'numpy' (import-error)
tests/test_serialized_linreg.py:6:0: E0401: Unable to import 'sklearn.linear_model' (import-error)
tests/test_serialized_linreg.py:2:0: C0411: standard import "import os" should be placed before "import numpy as np" (wrong-import-order)
tests/test_serialized_linreg.py:3:0: C0411: standard import "import unittest" should be placed before "import numpy as np" (wrong-import-order)
tests/test_serialized_linreg.py:5:0: C0411: standard import "from pathlib import Path" should be placed before "import numpy as np" (wrong-import-order)
tests/test_serialized_linreg.py:11:0: C0411: third party import "from fixtures.linreg import LinRegTrainer" should be placed before "from agentlib_mpc.data_structures import ml_model_datatypes" (wrong-import-order)
tests/test_serialized_linreg.py:12:0: C0411: third party import "from fixtures.data_generator import DataGenerator" should be placed before "from agentlib_mpc.data_structures import ml_model_datatypes" (wrong-import-order)
************* Module test_serialized_gpr
tests/test_serialized_gpr.py:1:0: C0114: Missing module docstring (missing-module-docstring)
tests/test_serialized_gpr.py:1:0: E0401: Unable to import 'numpy' (import-error)
tests/test_serialized_gpr.py:6:0: E0401: Unable to import 'sklearn.gaussian_process' (import-error)
tests/test_serialized_gpr.py:2:0: C0411: standard import "import os" should be placed before "import numpy as np" (wrong-import-order)
tests/test_serialized_gpr.py:3:0: C0411: standard import "import unittest" should be placed before "import numpy as np" (wrong-import-order)
tests/test_serialized_gpr.py:5:0: C0411: standard import "from pathlib import Path" should be placed before "import numpy as np" (wrong-import-order)
tests/test_serialized_gpr.py:11:0: C0411: third party import "from fixtures.gpr import GPRTrainer" should be placed before "from agentlib_mpc.data_structures import ml_model_datatypes" (wrong-import-order)
tests/test_serialized_gpr.py:12:0: C0411: third party import "from fixtures.data_generator import DataGenerator" should be placed before "from agentlib_mpc.data_structures import ml_model_datatypes" (wrong-import-order)
tests/test_serialized_gpr.py:10:0: W0611: Unused MLModels imported from agentlib_mpc.models.serialized_ml_model (unused-import)
************* Module conftest
tests/conftest.py:1:0: C0114: Missing module docstring (missing-module-docstring)
tests/conftest.py:2:0: E0401: Unable to import 'pytest' (import-error)
tests/conftest.py:3:0: E0401: Unable to import 'agentlib.utils' (import-error)
tests/conftest.py:7:0: C0116: Missing function or method docstring (missing-function-docstring)
tests/conftest.py:13:0: C0116: Missing function or method docstring (missing-function-docstring)
tests/conftest.py:13:25: W0621: Redefining name 'model_type' from outer scope (line 7) (redefined-outer-name)
************* Module test_mpc
tests/test_mpc.py:176:0: C0301: Line too long (108/100) (line-too-long)
tests/test_mpc.py:187:0: C0301: Line too long (127/100) (line-too-long)
tests/test_mpc.py:1:0: C0114: Missing module docstring (missing-module-docstring)
tests/test_mpc.py:4:0: E0401: Unable to import 'numpy' (import-error)
tests/test_mpc.py:5:0: E0401: Unable to import 'pandas' (import-error)
tests/test_mpc.py:8:0: E0401: Unable to import 'agentlib.core.environment' (import-error)
tests/test_mpc.py:9:0: E0401: Unable to import 'agentlib.core.agent' (import-error)
tests/test_mpc.py:10:0: E0401: Unable to import 'agentlib.core.errors' (import-error)
tests/test_mpc.py:18:0: C0103: Constant name "a" doesn't conform to UPPER_CASE naming style (invalid-name)
tests/test_mpc.py:24:4: C0116: Missing function or method docstring (missing-function-docstring)
tests/test_mpc.py:75:4: C0116: Missing function or method docstring (missing-function-docstring)
tests/test_mpc.py:81:4: C0116: Missing function or method docstring (missing-function-docstring)
tests/test_mpc.py:82:8: C0103: Variable name "sr" doesn't conform to snake_case naming style (invalid-name)
tests/test_mpc.py:94:4: C0116: Missing function or method docstring (missing-function-docstring)
tests/test_mpc.py:105:4: C0116: Missing function or method docstring (missing-function-docstring)
tests/test_mpc.py:152:4: C0103: Method name "test_CasadiMPC" doesn't conform to snake_case naming style (invalid-name)
tests/test_mpc.py:158:14: W0212: Access to a protected member _modules of a client class (protected-access)
tests/test_mpc.py:166:4: C0116: Missing function or method docstring (missing-function-docstring)
tests/test_mpc.py:173:4: C0116: Missing function or method docstring (missing-function-docstring)
tests/test_mpc.py:184:4: C0116: Missing function or method docstring (missing-function-docstring)
tests/test_mpc.py:6:0: C0411: standard import "import pathlib" should be placed before "import numpy as np" (wrong-import-order)
tests/test_mpc.py:13:0: W0611: Unused OptimizationBackend imported from agentlib_mpc.optimization_backends.backend (unused-import)
************* Module fixtures.gpr
tests/fixtures/gpr.py:1:0: C0114: Missing module docstring (missing-module-docstring)
tests/fixtures/gpr.py:1:0: E0401: Unable to import 'sklearn.gaussian_process.kernels' (import-error)
tests/fixtures/gpr.py:29:4: C0116: Missing function or method docstring (missing-function-docstring)
************* Module fixtures.data_generator
tests/fixtures/data_generator.py:1:0: C0114: Missing module docstring (missing-module-docstring)
tests/fixtures/data_generator.py:1:0: E0401: Unable to import 'pytest' (import-error)
tests/fixtures/data_generator.py:3:0: E0401: Unable to import 'numpy' (import-error)
tests/fixtures/data_generator.py:30:8: C0103: Variable name "a" doesn't conform to snake_case naming style (invalid-name)
tests/fixtures/data_generator.py:31:8: C0103: Variable name "b" doesn't conform to snake_case naming style (invalid-name)
tests/fixtures/data_generator.py:41:0: C0116: Missing function or method docstring (missing-function-docstring)
************* Module fixtures.linreg
tests/fixtures/linreg.py:1:0: C0114: Missing module docstring (missing-module-docstring)
tests/fixtures/linreg.py:1:0: E0401: Unable to import 'sklearn.linear_model' (import-error)
tests/fixtures/linreg.py:21:4: C0116: Missing function or method docstring (missing-function-docstring)
tests/fixtures/linreg.py:3:0: W0611: Unused CustomGPR imported from agentlib_mpc.models.serialized_ml_model (unused-import)
************* Module fixtures.casadi_test_model
tests/fixtures/casadi_test_model.py:1:0: C0114: Missing module docstring (missing-module-docstring)
tests/fixtures/casadi_test_model.py:1:0: F0002: tests/fixtures/casadi_test_model.py: Fatal error while checking 'tests/fixtures/casadi_test_model.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-14-56.txt'. (astroid-error)
************* Module fixtures.ann
tests/fixtures/ann.py:1:0: C0114: Missing module docstring (missing-module-docstring)
tests/fixtures/ann.py:1:0: E0401: Unable to import 'keras' (import-error)
tests/fixtures/ann.py:2:0: E0401: Unable to import 'numpy' (import-error)
tests/fixtures/ann.py:3:0: E0401: Unable to import 'pytest' (import-error)
tests/fixtures/ann.py:4:0: E0401: Unable to import 'keras' (import-error)
tests/fixtures/ann.py:42:0: C0116: Missing function or method docstring (missing-function-docstring)
tests/fixtures/ann.py:49:0: C0116: Missing function or method docstring (missing-function-docstring)
tests/fixtures/ann.py:49:27: W0621: Redefining name 'example_ann' from outer scope (line 42) (redefined-outer-name)
tests/fixtures/ann.py:2:0: W0611: Unused numpy imported as np (unused-import)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==mixed_integer.mixed_integer_mpc:[0:150]
==mixed_integer.mixed_integer_mpc_cia:[0:149]
import logging
import os
from pathlib import Path
from typing import List

import casadi as ca

from agentlib_mpc.models.casadi_model import (
    CasadiModel,
    CasadiInput,
    CasadiState,
    CasadiParameter,
    CasadiOutput,
    CasadiModelConfig,
)
from agentlib.utils.multi_agent_system import LocalMASAgency

logger = logging.getLogger(__name__)


# script variables
ub = 295.15

# constants
COOLING = 1000


class MyCasadiModelConfig(CasadiModelConfig):
    inputs: List[CasadiInput] = [
        # controls
        CasadiInput(
            name="cooling_power",
            value=400,
            unit="W",
            description="Air mass flow " "into zone",
        ),
        CasadiInput(
            name="cooler_on",
            value=1,
            unit="-",
            description="On / off signal of mass flow.",
            lb=0,
            ub=1,
        ),
        # disturbances
        CasadiInput(
            name="load", value=150, unit="W", description="Heat " "load into zone"
        ),
        CasadiInput(
            name="T_in", value=290.15, unit="K", description="Inflow air temperature"
        ),
        # settings
        CasadiInput(
            name="T_upper",
            value=294.15,
            unit="K",
            description="Upper boundary (soft) for T.",
        ),
    ]

    states: List[CasadiState] = [
        # differential
        CasadiState(
            name="T", value=293.15, unit="K", description="Temperature of zone"
        ),
        # algebraic
        # slack variables
        CasadiState(
            name="T_slack",
            value=0,
            unit="K",
            description="Slack variable of temperature of zone",
        ),
    ]

    parameters: List[CasadiParameter] = [
        CasadiParameter(
            name="cp",
            value=1000,
            unit="J/kg*K",
            description="thermal capacity of the air",
        ),
        CasadiParameter(
            name="C", value=100000, unit="J/K", description="thermal capacity of zone"
        ),
        CasadiParameter(
            name="s_T",
            value=1,
            unit="-",
            description="Weight for T in constraint function",
        ),
        CasadiParameter(
            name="r_cooling",
            value=1 / 5,
            unit="-",
            description="Weight for mDot in objective function",
        ),
        CasadiParameter(
            name="cooler_mod_limit",
            value=200,
            unit="W",
            description="Cooling power cannot modulate below this value",
        ),
    ]
    outputs: List[CasadiOutput] = [
        CasadiOutput(name="T_out", unit="K", description="Temperature of zone")
    ]


class MyCasadiModel(CasadiModel):
    config: MyCasadiModelConfig

    def setup_system(self):
        # Define ode
        self.T.ode = (self.load - self.cooling_power) / self.C

        # Define ae
        self.T_out.alg = self.T  # math operation to get the symbolic variable

        # Constraints: List[(lower bound, function, upper bound)]
        self.constraints = [
            # bigM reformulation
            (-ca.inf, self.cooling_power - self.cooler_on * COOLING, 0),
            (0, self.cooling_power - self.cooler_on * self.cooler_mod_limit, ca.inf),
            # soft constraints
            (0, self.T + self.T_slack, self.T_upper),
        ]

        # Objective function
        objective = sum(
            [
                self.r_cooling * self.cooling_power,
                self.s_T * self.T_slack**2,
            ]
        )

        return objective


ENV_CONFIG = {"rt": False, "factor": 0.01, "t_sample": 60}

AGENT_MPC = {
    "id": "myMPCAgent",
    "modules": [
        {"module_id": "Ag1Com", "type": "local_broadcast"},
        {
            "module_id": "myMPC",
            "type": "agentlib_mpc.minlp_mpc",
            "optimization_backend": { (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==simple_mpc:[0:136]
==simple_mpc_multiple_shooting:[0:136]
import logging
import os
from pathlib import Path
from typing import List

import pandas as pd

from agentlib_mpc.models.casadi_model import (
    CasadiModel,
    CasadiInput,
    CasadiState,
    CasadiParameter,
    CasadiOutput,
    CasadiModelConfig,
)
from agentlib.utils.multi_agent_system import LocalMASAgency

from agentlib_mpc.utils.analysis import load_mpc_stats
from agentlib_mpc.utils.plotting.interactive import show_dashboard

logger = logging.getLogger(__name__)

# script variables
ub = 295.15


class MyCasadiModelConfig(CasadiModelConfig):
    inputs: List[CasadiInput] = [
        # controls
        CasadiInput(
            name="mDot",
            value=0.0225,
            unit="m³/s",
            description="Air mass flow into zone",
        ),
        # disturbances
        CasadiInput(
            name="load", value=150, unit="W", description="Heat load into zone"
        ),
        CasadiInput(
            name="T_in", value=290.15, unit="K", description="Inflow air temperature"
        ),
        # settings
        CasadiInput(
            name="T_upper",
            value=294.15,
            unit="K",
            description="Upper boundary (soft) for T.",
        ),
    ]

    states: List[CasadiState] = [
        # differential
        CasadiState(
            name="T", value=293.15, unit="K", description="Temperature of zone"
        ),
        # algebraic
        # slack variables
        CasadiState(
            name="T_slack",
            value=0,
            unit="K",
            description="Slack variable of temperature of zone",
        ),
    ]

    parameters: List[CasadiParameter] = [
        CasadiParameter(
            name="cp",
            value=1000,
            unit="J/kg*K",
            description="thermal capacity of the air",
        ),
        CasadiParameter(
            name="C", value=100000, unit="J/K", description="thermal capacity of zone"
        ),
        CasadiParameter(
            name="s_T",
            value=1,
            unit="-",
            description="Weight for T in constraint function",
        ),
        CasadiParameter(
            name="r_mDot",
            value=1,
            unit="-",
            description="Weight for mDot in objective function",
        ),
    ]
    outputs: List[CasadiOutput] = [
        CasadiOutput(name="T_out", unit="K", description="Temperature of zone")
    ]


class MyCasadiModel(CasadiModel):
    config: MyCasadiModelConfig

    def setup_system(self):
        # Define ode
        self.T.ode = (
            self.cp * self.mDot / self.C * (self.T_in - self.T) + self.load / self.C
        )

        # Define ae
        self.T_out.alg = self.T  # math operation to get the symbolic variable

        # Constraints: List[(lower bound, function, upper bound)]
        self.constraints = [
            # soft constraints
            (0, self.T + self.T_slack, self.T_upper),
        ]

        # Objective function
        objective = sum(
            [
                self.r_mDot * self.mDot,
                self.s_T * self.T_slack**2,
            ]
        )

        return objective


ENV_CONFIG = {"rt": False, "factor": 0.01, "t_sample": 60}

AGENT_MPC = {
    "id": "myMPCAgent",
    "modules": [
        {"module_id": "Ag1Com", "type": "local_broadcast"},
        {
            "module_id": "myMPC",
            "type": "agentlib_mpc.mpc",
            "optimization_backend": {
                "type": "casadi",
                "model": {"type": {"file": __file__, "class_name": "MyCasadiModel"}},
                "discretization_options": { (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==simple_mpc:[168:271]
==simple_mpc_time_dependent_obj:[190:293]
            ],
        },
    ],
}
AGENT_SIM = {
    "id": "SimAgent",
    "modules": [
        {"module_id": "Ag1Com", "type": "local_broadcast"},
        {
            "module_id": "room",
            "type": "simulator",
            "model": {
                "type": {"file": __file__, "class_name": "MyCasadiModel"},
                "states": [{"name": "T", "value": 298.16}],
            },
            "t_sample": 10,
            "update_inputs_on_callback": False,
            "save_results": True,
            "outputs": [
                {"name": "T_out", "value": 298, "alias": "T"},
            ],
            "inputs": [
                {"name": "mDot", "value": 0.02, "alias": "mDot"},
            ],
        },
    ],
}


def run_example(
    with_plots=True, log_level=logging.INFO, until=10000, with_dashboard=False
):
    # Change the working directly so that relative paths work
    os.chdir(Path(__file__).parent)

    # Set the log-level
    logging.basicConfig(level=log_level)
    mas = LocalMASAgency(
        agent_configs=[AGENT_MPC, AGENT_SIM], env=ENV_CONFIG, variable_logging=False
    )
    mas.run(until=until)
    try:
        stats = load_mpc_stats("results/__mpc.csv")
    except Exception:
        stats = None
    results = mas.get_results(cleanup=False)
    mpc_results = results["myMPCAgent"]["myMPC"]
    sim_res = results["SimAgent"]["room"]

    if with_dashboard:
        show_dashboard(mpc_results, stats)

    if with_plots:
        plot(mpc_results, sim_res, until)

    return results


def plot(mpc_results: pd.DataFrame, sim_res: pd.DataFrame, until: float):
    import matplotlib.pyplot as plt
    from agentlib_mpc.utils.plotting.mpc import plot_mpc

    fig, ax = plt.subplots(2, 1, sharex=True)
    t_sim = sim_res["T_out"]
    t_sample = t_sim.index[1] - t_sim.index[0]
    aie_kh = (t_sim - ub).abs().sum() * t_sample / 3600
    energy_cost_kWh = (
        (sim_res["mDot"] * (sim_res["T_out"] - sim_res["T_in"])).sum()
        * t_sample
        * 1
        / 3600
    )  # cp is 1
    print(f"Absoulute integral error: {aie_kh} Kh.")
    print(f"Cooling energy used: {energy_cost_kWh} kWh.")

    plot_mpc(
        series=mpc_results["variable"]["T"] - 273.15,
        ax=ax[0],
        plot_actual_values=True,
        plot_predictions=True,
    )
    ax[0].axhline(ub - 273.15, color="grey", linestyle="--", label="upper boundary")
    plot_mpc(
        series=mpc_results["variable"]["mDot"],
        ax=ax[1],
        plot_actual_values=True,
        plot_predictions=True,
    )

    ax[1].legend()
    ax[0].legend()
    ax[0].set_ylabel("$T_{room}$ / °C")
    ax[1].set_ylabel("$\dot{m}_{air}$ / kg/s")
    ax[1].set_xlabel("simulation time / s")
    ax[1].set_ylim([0, 0.06])
    ax[1].set_xlim([0, until])
    plt.show()


if __name__ == "__main__":
    run_example(
        with_plots=True, with_dashboard=True, until=7200, log_level=logging.INFO
    ) (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==model:[0:99]
==model:[0:99]
from typing import List

from agentlib_mpc.models.casadi_model import (
    CasadiModelConfig,
    CasadiInput,
    CasadiState,
    CasadiParameter,
    CasadiOutput,
    CasadiModel,
)
from agentlib_mpc.models.casadi_ml_model import CasadiMLModel, CasadiMLModelConfig


class PhysicalModelConfig(CasadiModelConfig):
    inputs: List[CasadiInput] = [
        # controls
        CasadiInput(
            name="mDot", value=0.0225, unit="K", description="Air mass flow into zone"
        ),
        # disturbances
        CasadiInput(
            name="load", value=150, unit="W", description="Heat load into zone"
        ),
        CasadiInput(
            name="T_in", value=290.15, unit="K", description="Inflow air temperature"
        ),
        # settings
        CasadiInput(
            name="T_upper",
            value=294.15,
            unit="K",
            description="Upper boundary (soft) for T.",
        ),
    ]

    states: List[CasadiState] = [
        # differential
        CasadiState(
            name="T", value=293.15, unit="K", description="Temperature of zone"
        ),
        # algebraic
        # slack variables
        CasadiState(
            name="T_slack",
            value=0,
            unit="K",
            description="Slack variable of temperature of zone",
        ),
    ]

    parameters: List[CasadiParameter] = [
        CasadiParameter(
            name="cp",
            value=1000,
            unit="J/kg*K",
            description="thermal capacity of the air",
        ),
        CasadiParameter(
            name="C", value=100000, unit="J/K", description="thermal capacity of zone"
        ),
        CasadiParameter(
            name="s_T",
            value=1,
            unit="-",
            description="Weight for T in constraint function",
        ),
        CasadiParameter(
            name="r_mDot",
            value=1,
            unit="-",
            description="Weight for mDot in objective function",
        ),
    ]
    outputs: List[CasadiOutput] = [
        CasadiOutput(name="T_out", unit="K", description="Temperature of zone")
    ]


class PhysicalModel(CasadiModel):
    config: PhysicalModelConfig

    def setup_system(self):
        # Define ode
        self.T.ode = (
            self.cp * self.mDot / self.C * (self.T_in - self.T) + self.load / self.C
        )

        # Define ae
        self.T_out.alg = self.T  # math operation to get the symbolic variable

        # Constraints: List[(lower bound, function, upper bound)]
        self.constraints = [
            # soft constraints
            (0, self.T + self.T_slack, self.T_upper),
        ]

        # Objective function
        objective = sum(
            [ (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==simple_mpc_multiple_shooting:[38:135]
==with_change_control_penalty:[30:127]
        ),
        CasadiInput(
            name="T_in", value=290.15, unit="K", description="Inflow air temperature"
        ),
        # settings
        CasadiInput(
            name="T_upper",
            value=294.15,
            unit="K",
            description="Upper boundary (soft) for T.",
        ),
    ]

    states: List[CasadiState] = [
        # differential
        CasadiState(
            name="T", value=293.15, unit="K", description="Temperature of zone"
        ),
        # algebraic
        # slack variables
        CasadiState(
            name="T_slack",
            value=0,
            unit="K",
            description="Slack variable of temperature of zone",
        ),
    ]

    parameters: List[CasadiParameter] = [
        CasadiParameter(
            name="cp",
            value=1000,
            unit="J/kg*K",
            description="thermal capacity of the air",
        ),
        CasadiParameter(
            name="C", value=100000, unit="J/K", description="thermal capacity of zone"
        ),
        CasadiParameter(
            name="s_T",
            value=1,
            unit="-",
            description="Weight for T in constraint function",
        ),
        CasadiParameter(
            name="r_mDot",
            value=1,
            unit="-",
            description="Weight for mDot in objective function",
        ),
    ]
    outputs: List[CasadiOutput] = [
        CasadiOutput(name="T_out", unit="K", description="Temperature of zone")
    ]


class MyCasadiModel(CasadiModel):
    config: MyCasadiModelConfig

    def setup_system(self):
        # Define ode
        self.T.ode = (
            self.cp * self.mDot / self.C * (self.T_in - self.T) + self.load / self.C
        )

        # Define ae
        self.T_out.alg = self.T  # math operation to get the symbolic variable

        # Constraints: List[(lower bound, function, upper bound)]
        self.constraints = [
            # soft constraints
            (0, self.T + self.T_slack, self.T_upper),
        ]

        # Objective function
        objective = sum(
            [
                self.r_mDot * self.mDot,
                self.s_T * self.T_slack**2,
            ]
        )

        return objective


ENV_CONFIG = {"rt": False, "factor": 0.01, "t_sample": 60}

AGENT_MPC = {
    "id": "myMPCAgent",
    "modules": [
        {"module_id": "Ag1Com", "type": "local_broadcast"},
        {
            "module_id": "myMPC",
            "type": "agentlib_mpc.mpc",
            "optimization_backend": {
                "type": "casadi",
                "model": {"type": {"file": __file__, "class_name": "MyCasadiModel"}}, (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==simple_mpc_gpr:[9:98]
==simple_mpc_nn:[7:94]
logger = logging.getLogger(__name__)

# script variables
ub = 295.15

ENV_CONFIG = {"rt": False, "factor": 0.01, "t_sample": 60}


def agent_configs(ml_model_path: str) -> list[dict]:
    agent_mpc = {
        "id": "myMPCAgent",
        "modules": [
            {"module_id": "Ag1Com", "type": "local_broadcast"},
            {
                "module_id": "myMPC",
                "type": "agentlib_mpc.mpc",
                "optimization_backend": {
                    "type": "casadi_ml",
                    "model": {
                        "type": {
                            "file": "model.py",
                            "class_name": "DataDrivenModel",
                        },
                        "ml_model_sources": [ml_model_path],
                    },
                    "discretization_options": {
                        "method": "multiple_shooting",
                    },
                    "results_file": "results//opt.csv",
                    "overwrite_result_file": True,
                    "solver": {"name": "ipopt", "options": {"ipopt.print_level": 0}},
                },
                "time_step": 300,
                "prediction_horizon": 15,
                "parameters": [
                    {"name": "s_T", "value": 3},
                    {"name": "r_mDot", "value": 1},
                ],
                "inputs": [
                    {"name": "T_in", "value": 290.15},
                    {"name": "load", "value": 150},
                    {"name": "T_upper", "value": ub},
                ],
                "controls": [{"name": "mDot", "value": 0.02, "ub": 0.05, "lb": 0}],
                "states": [{"name": "T", "value": 298.16, "ub": 303.15, "lb": 288.15}],
            },
        ],
    }
    agent_sim = {
        "id": "SimAgent",
        "modules": [
            {"module_id": "Ag1Com", "type": "local_broadcast"},
            {
                "module_id": "room",
                "type": "simulator",
                "model": {
                    "type": {
                        "file": "model.py",
                        "class_name": "PhysicalModel",
                    },
                    "states": [{"name": "T", "value": 298.16}],
                },
                "t_sample": 10,
                "save_results": True,
                "update_inputs_on_callback": False,
                "outputs": [
                    {"name": "T_out", "value": 298, "alias": "T"},
                ],
                "inputs": [
                    {"name": "mDot", "value": 0.02, "alias": "mDot"},
                ],
            },
        ],
    }
    return [agent_mpc, agent_sim]


def run_example(with_plots=True, log_level=logging.INFO, until=8000):
    # Change the working directory so that relative paths work
    script_dir = os.path.abspath(os.path.dirname(__file__))
    os.chdir(script_dir)

    # Add the script directory to Python path for imports
    if script_dir not in sys.path:
        sys.path.insert(0, script_dir)
    logging.basicConfig(level=log_level)

    # gets the subdirectory of anns with the highest number, i.e. the longest training
    # time (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==model:[22:196]
==model:[22:196]
        ),
        CasadiInput(
            name="T_in", value=290.15, unit="K", description="Inflow air temperature"
        ),
        # settings
        CasadiInput(
            name="T_upper",
            value=294.15,
            unit="K",
            description="Upper boundary (soft) for T.",
        ),
    ]

    states: List[CasadiState] = [
        # differential
        CasadiState(
            name="T", value=293.15, unit="K", description="Temperature of zone"
        ),
        # algebraic
        # slack variables
        CasadiState(
            name="T_slack",
            value=0,
            unit="K",
            description="Slack variable of temperature of zone",
        ),
    ]

    parameters: List[CasadiParameter] = [
        CasadiParameter(
            name="cp",
            value=1000,
            unit="J/kg*K",
            description="thermal capacity of the air",
        ),
        CasadiParameter(
            name="C", value=100000, unit="J/K", description="thermal capacity of zone"
        ),
        CasadiParameter(
            name="s_T",
            value=1,
            unit="-",
            description="Weight for T in constraint function",
        ),
        CasadiParameter(
            name="r_mDot",
            value=1,
            unit="-",
            description="Weight for mDot in objective function",
        ),
    ]
    outputs: List[CasadiOutput] = [
        CasadiOutput(name="T_out", unit="K", description="Temperature of zone")
    ]


class PhysicalModel(CasadiModel):
    config: PhysicalModelConfig

    def setup_system(self):
        # Define ode
        self.T.ode = (
            self.cp * self.mDot / self.C * (self.T_in - self.T) + self.load / self.C
        )

        # Define ae
        self.T_out.alg = self.T  # math operation to get the symbolic variable

        # Constraints: List[(lower bound, function, upper bound)]
        self.constraints = [
            # soft constraints
            (0, self.T + self.T_slack, self.T_upper),
        ]

        # Objective function
        objective = sum(
            [
                0 * self.r_mDot * self.mDot,
                self.s_T * self.T_slack**2,
            ]
        )
        return objective


class DataDrivenModelConfig(CasadiMLModelConfig, PhysicalModelConfig):
    # use the same variables as physical,  have some attributes only the ANN Config has
    inputs: List[CasadiInput] = [
        # controls
        CasadiInput(
            name="mDot", value=0.0225, unit="K", description="Air mass flow into zone"
        ),
        # disturbances
        CasadiInput(
            name="load", value=10, unit="W", description="Heat " "load into zone"
        ),
        CasadiInput(
            name="T_in", value=290.15, unit="K", description="Inflow air temperature"
        ),
        # settings
        CasadiInput(
            name="T_upper",
            value=294.15,
            unit="K",
            description="Upper boundary (soft) for T.",
        ),
    ]

    states: List[CasadiState] = [
        # differential
        CasadiState(
            name="T", value=293.15, unit="K", description="Temperature of zone"
        ),
        # algebraic
        # slack variables
        CasadiState(
            name="T_slack",
            value=0,
            unit="K",
            description="Slack variable of temperature of zone",
        ),
    ]

    parameters: List[CasadiParameter] = [
        CasadiParameter(
            name="cp",
            value=1000,
            unit="J/kg*K",
            description="thermal capacity of the air",
        ),
        CasadiParameter(
            name="C", value=100000, unit="J/K", description="thermal capacity of zone"
        ),
        CasadiParameter(
            name="s_T",
            value=1,
            unit="-",
            description="Weight for T in constraint function",
        ),
        CasadiParameter(
            name="r_mDot",
            value=1,
            unit="-",
            description="Weight for mDot in objective function",
        ),
    ]
    outputs: List[CasadiOutput] = [
        CasadiOutput(name="T_out", unit="K", description="Temperature of zone")
    ]


class DataDrivenModel(CasadiMLModel):
    config: DataDrivenModelConfig

    def setup_system(self):
        # ode

        # Define ae
        self.T_out.alg = self.T  # math operation to get the symbolic variable

        # Constraints: List[(lower bound, function, upper bound)]
        self.constraints = [
            # soft constraints
            (0, self.T + self.T_slack, self.T_upper),
        ]

        # Objective function
        objective = sum(
            [
                self.r_mDot * self.mDot,
                self.s_T * self.T_slack**2,
            ]
        )

        return objective (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==simple_mpc_multiple_shooting:[5:88]
==simple_mpc_time_dependent_obj:[6:89]
import pandas as pd

from agentlib_mpc.models.casadi_model import (
    CasadiModel,
    CasadiInput,
    CasadiState,
    CasadiParameter,
    CasadiOutput,
    CasadiModelConfig,
)
from agentlib.utils.multi_agent_system import LocalMASAgency

from agentlib_mpc.utils.analysis import load_mpc_stats
from agentlib_mpc.utils.plotting.interactive import show_dashboard

logger = logging.getLogger(__name__)

# script variables
ub = 295.15


class MyCasadiModelConfig(CasadiModelConfig):
    inputs: List[CasadiInput] = [
        # controls
        CasadiInput(
            name="mDot",
            value=0.0225,
            unit="m³/s",
            description="Air mass flow into zone",
        ),
        # disturbances
        CasadiInput(
            name="load", value=150, unit="W", description="Heat load into zone"
        ),
        CasadiInput(
            name="T_in", value=290.15, unit="K", description="Inflow air temperature"
        ),
        # settings
        CasadiInput(
            name="T_upper",
            value=294.15,
            unit="K",
            description="Upper boundary (soft) for T.",
        ),
    ]

    states: List[CasadiState] = [
        # differential
        CasadiState(
            name="T", value=293.15, unit="K", description="Temperature of zone"
        ),
        # algebraic
        # slack variables
        CasadiState(
            name="T_slack",
            value=0,
            unit="K",
            description="Slack variable of temperature of zone",
        ),
    ]

    parameters: List[CasadiParameter] = [
        CasadiParameter(
            name="cp",
            value=1000,
            unit="J/kg*K",
            description="thermal capacity of the air",
        ),
        CasadiParameter(
            name="C", value=100000, unit="J/K", description="thermal capacity of zone"
        ),
        CasadiParameter(
            name="s_T",
            value=1,
            unit="-",
            description="Weight for T in constraint function",
        ),
        CasadiParameter(
            name="r_mDot",
            value=1,
            unit="-",
            description="Weight for mDot in objective function",
        ), (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==training_gpr:[109:180]
==training_linreg:[103:174]
            },
            {"type": "local", "subscriptions": ["Simulator", "PID"]},
        ],
    }

    # sample rate is at least 1, and maximum 10
    t_sample_sim = min(max(1, int(step_size) // 30), 10)
    simulator_config = {
        "id": "Simulator",
        "modules": [
            {
                "module_id": "simulator",
                "type": "simulator",
                "model": {
                    "type": {
                        "file": model.__file__,
                        "class_name": model.PhysicalModel.__name__,
                    },
                },
                "t_sample": t_sample_sim,
                "save_results": plot_results,
                "result_filename": "results//simulation_data.csv",
                "result_causalities": ["local", "input", "output"],
                "overwrite_result_file": False,
                "inputs": [
                    {"name": "mDot", "value": 0.0225, "source": "PID"},
                    {"name": "load", "value": 30},
                    {"name": "T_in", "value": 290.15},
                ],
                "states": [{"name": "T", "shared": True}],
            },
            {
                "module_id": "input_generator",
                "type": "simulator",
                "t_sample": step_size * 10,
                "model": {"type": {"file": __file__, "class_name": "InputGenerator"}},
                "outputs": [
                    # {"name": "mDot"},
                    {"name": "load", "ub": 150, "lb": 150},
                    {"name": "T_in"},
                ],
            },
            {"type": "local", "subscriptions": ["PID"]},
        ],
    }

    pid_controller = {
        "id": "PID",
        "modules": [
            {
                "module_id": "pid",
                "type": "pid",
                "setpoint": {
                    "name": "setpoint",
                    "value": 273.15 + 22,
                    "alias": "T_set",
                },
                "Kp": 0.01,
                "Ti": 1,
                "input": {"name": "u", "value": 0, "alias": "T"},
                "output": {"name": "y", "value": 0, "alias": "mDot", "shared": "True"},
                "lb": 0,
                "ub": 0.05,
                "reverse": True,
            },
            {
                "module_id": "set_points",
                "type": "agentlib_mpc.set_point_generator",
                "interval": 60 * 10,
                "target_variable": {"name": "T_set", "alias": "T_set"},
            }, (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==simple_mpc:[138:210]
==simple_mpc_multiple_shooting:[138:210]
                },
                "solver": {
                    "name": "fatrop",  # use fatrop with casadi 3.6.6 for speedup
                },
                "results_file": "results//mpc.csv",
                "save_results": True,
                "overwrite_result_file": True,
            },
            "time_step": 300,
            "prediction_horizon": 15,
            "parameters": [
                {"name": "s_T", "value": 3},
                {"name": "r_mDot", "value": 1},
            ],
            "inputs": [
                {"name": "T_in", "value": 290.15},
                {"name": "load", "value": 150},
                {"name": "T_upper", "value": ub},
            ],
            "controls": [{"name": "mDot", "value": 0.02, "ub": 0.05, "lb": 0}],
            "outputs": [{"name": "T_out"}],
            "states": [
                {
                    "name": "T",
                    "value": 298.16,
                    "ub": 303.15,
                    "lb": 288.15,
                    "alias": "T",
                    "source": "SimAgent",
                }
            ],
        },
    ],
}
AGENT_SIM = {
    "id": "SimAgent",
    "modules": [
        {"module_id": "Ag1Com", "type": "local_broadcast"},
        {
            "module_id": "room",
            "type": "simulator",
            "model": {
                "type": {"file": __file__, "class_name": "MyCasadiModel"},
                "states": [{"name": "T", "value": 298.16}],
            },
            "t_sample": 10,
            "update_inputs_on_callback": False,
            "save_results": True,
            "outputs": [
                {"name": "T_out", "value": 298, "alias": "T"},
            ],
            "inputs": [
                {"name": "mDot", "value": 0.02, "alias": "mDot"},
            ],
        },
    ],
}


def run_example(
    with_plots=True, log_level=logging.INFO, until=10000, with_dashboard=False
):
    # Change the working directly so that relative paths work
    os.chdir(Path(__file__).parent)

    # Set the log-level
    logging.basicConfig(level=log_level)
    mas = LocalMASAgency(
        agent_configs=[AGENT_MPC, AGENT_SIM], env=ENV_CONFIG, variable_logging=False
    )
    mas.run(until=until)
    try: (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==agentlib_mpc.optimization_backends.casadi_.casadi_admm_ml:[47:114]
==agentlib_mpc.optimization_backends.casadi_.casadi_ml:[39:104]
        self.states = OptimizationVariable.declare(
            denotation="state",
            variables=model.get_states(var_ref.states),
            ref_list=var_ref.states,
            assert_complete=True,
        )
        self.controls = OptimizationVariable.declare(
            denotation="control",
            variables=model.get_inputs(var_ref.controls),
            ref_list=var_ref.controls,
            assert_complete=True,
        )
        self.algebraics = OptimizationVariable.declare(
            denotation="z",
            variables=model.auxiliaries,
            ref_list=[],
        )
        self.outputs = OptimizationVariable.declare(
            denotation="y",
            variables=model.outputs,
            ref_list=var_ref.outputs,
        )

        # define parameters
        self.non_controlled_inputs = OptimizationParameter.declare(
            denotation="d",
            variables=model.get_inputs(var_ref.inputs),
            ref_list=var_ref.inputs,
            assert_complete=True,
        )
        self.model_parameters = OptimizationParameter.declare(
            denotation="parameter",
            variables=model.parameters,
            ref_list=var_ref.parameters,
        )
        self.initial_state = OptimizationParameter.declare(
            denotation="initial_state",  # append the 0 as a convention to get initial guess
            variables=model.get_states(var_ref.states),
            ref_list=var_ref.states,
            use_in_stage_function=False,
            assert_complete=True,
        )
        self.last_control = OptimizationParameter.declare(
            denotation="initial_control",  # append the 0 as a convention to get initial guess
            variables=model.get_inputs(var_ref.controls),
            ref_list=var_ref.controls,
            use_in_stage_function=False,
            assert_complete=True,
        )
        self.r_del_u = OptimizationParameter.declare(
            denotation="r_del_u",
            variables=[CasadiParameter(name=r_del_u) for r_del_u in var_ref.r_del_u],
            ref_list=var_ref.r_del_u,
            use_in_stage_function=False,
            assert_complete=True,
        )

        self.cost_function = model.cost_func
        self.model_constraints = Constraint(
            function=ca.vertcat(*[c.function for c in model.get_constraints()]),
            lb=ca.vertcat(*[c.lb for c in model.get_constraints()]),
            ub=ca.vertcat(*[c.ub for c in model.get_constraints()]),
        )
        self.sim_step = model.make_predict_function_for_mpc()
        self.model = model
        self.lags_dict: dict[str, int] = model.lags_dict
 (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==model:[22:99]
==model:[22:99]
        ),
        CasadiInput(
            name="T_in", value=290.15, unit="K", description="Inflow air temperature"
        ),
        # settings
        CasadiInput(
            name="T_upper",
            value=294.15,
            unit="K",
            description="Upper boundary (soft) for T.",
        ),
    ]

    states: List[CasadiState] = [
        # differential
        CasadiState(
            name="T", value=293.15, unit="K", description="Temperature of zone"
        ),
        # algebraic
        # slack variables
        CasadiState(
            name="T_slack",
            value=0,
            unit="K",
            description="Slack variable of temperature of zone",
        ),
    ]

    parameters: List[CasadiParameter] = [
        CasadiParameter(
            name="cp",
            value=1000,
            unit="J/kg*K",
            description="thermal capacity of the air",
        ),
        CasadiParameter(
            name="C", value=100000, unit="J/K", description="thermal capacity of zone"
        ),
        CasadiParameter(
            name="s_T",
            value=1,
            unit="-",
            description="Weight for T in constraint function",
        ),
        CasadiParameter(
            name="r_mDot",
            value=1,
            unit="-",
            description="Weight for mDot in objective function",
        ),
    ]
    outputs: List[CasadiOutput] = [
        CasadiOutput(name="T_out", unit="K", description="Temperature of zone")
    ]


class PhysicalModel(CasadiModel):
    config: PhysicalModelConfig

    def setup_system(self):
        # Define ode
        self.T.ode = (
            self.cp * self.mDot / self.C * (self.T_in - self.T) + self.load / self.C
        )

        # Define ae
        self.T_out.alg = self.T  # math operation to get the symbolic variable

        # Constraints: List[(lower bound, function, upper bound)]
        self.constraints = [
            # soft constraints
            (0, self.T + self.T_slack, self.T_upper),
        ]

        # Objective function
        objective = sum(
            [ (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==training_nn:[0:83]
==training_nn:[0:86]
import logging
import random

import agentlib as al
import matplotlib.pyplot as plt

from agentlib.utils.multi_agent_system import LocalMASAgency


import model

logger = logging.getLogger(__name__)


class InputGeneratorConfig(al.ModelConfig):
    outputs: al.ModelOutputs = [
        al.ModelOutput(
            name="mDot",
            value=0.0225,
            lb=0,
            ub=0.05,
            unit="K",
            description="Air mass flow into zone",
        ),
        # disturbances
        al.ModelOutput(
            name="load",
            value=150,
            lb=150,
            ub=150,
            unit="W",
            description="Heat load into zone",
        ),
        al.ModelOutput(
            name="T_in",
            value=290.15,
            lb=290.15,
            ub=290.15,
            unit="K",
            description="Inflow air temperature",
        ),
    ]


class InputGenerator(al.Model):
    config: InputGeneratorConfig

    def do_step(self, *, t_start, t_sample=None):
        for out in self.config.outputs:
            value = random.random() * (out.ub - out.lb) + out.lb
            self.set(out.name, value)

    def initialize(self, **kwargs):
        pass


def plot(results):
    df = results["Simulator"]["simulator"]
    log = results["PID"]["AgentLogger"]

    fig, (ax_T_out, ax_mDot) = plt.subplots(2, 1, sharex=True)

    (df["T"] - 273.15).plot(ax=ax_T_out, label="Physical", color="black")
    (log["T_set"] - 273.15).plot(ax=ax_T_out, color="black", linestyle="--")

    df["mDot"].plot(ax=ax_mDot, label="mDot", color="black")
    ax_T_out.set_ylabel("$T_{room}$ / °C")
    ax_mDot.set_ylabel("$\dot{m}_{air}$ / kg/s")
    ax_mDot.set_xlabel("Simulation time / s")

    plt.show()


def configs(
    training_time: float = 1000, plot_results: bool = False, step_size: float = 60
):
    trainer_config = {
        "id": "Trainer",
        "modules": [
            {
                "step_size": 300,
                "module_id": "trainer",
                "type": "agentlib_mpc.ann_trainer", (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==training_gpr:[0:81]
==training_linreg:[0:82]
import logging
import random

import agentlib as al
import matplotlib.pyplot as plt

from agentlib.utils.multi_agent_system import LocalMASAgency


import model

logger = logging.getLogger(__name__)


class InputGeneratorConfig(al.ModelConfig):
    outputs: al.ModelOutputs = [
        al.ModelOutput(
            name="mDot",
            value=0.0225,
            lb=0,
            ub=0.05,
            unit="K",
            description="Air mass flow into zone",
        ),
        # disturbances
        al.ModelOutput(
            name="load",
            value=150,
            lb=150,
            ub=150,
            unit="W",
            description="Heat load into zone",
        ),
        al.ModelOutput(
            name="T_in",
            value=290.15,
            lb=290.15,
            ub=290.15,
            unit="K",
            description="Inflow air temperature",
        ),
    ]


class InputGenerator(al.Model):
    config: InputGeneratorConfig

    def do_step(self, *, t_start, t_sample=None):
        for out in self.config.outputs:
            value = random.random() * (out.ub - out.lb) + out.lb
            self.set(out.name, value)

    def initialize(self, **kwargs):
        pass


def plot(results):
    df = results["Simulator"]["simulator"]
    log = results["PID"]["AgentLogger"]

    fig, (ax_T_out, ax_mDot) = plt.subplots(2, 1, sharex=True)

    (df["T"] - 273.15).plot(ax=ax_T_out, label="Physical", color="black")
    (log["T_set"] - 273.15).plot(ax=ax_T_out, color="black", linestyle="--")

    df["mDot"].plot(ax=ax_mDot, label="mDot", color="black")
    ax_T_out.set_ylabel("$T_{room}$ / °C")
    ax_mDot.set_ylabel("$\dot{m}_{air}$ / kg/s")
    ax_mDot.set_xlabel("Simulation time / s")

    plt.show()


def configs(
    training_time: float = 1000, plot_results: bool = False, step_size: float = 60
):
    trainer_config = {
        "id": "Trainer",
        "modules": [
            {
                "step_size": 300,
                "module_id": "trainer", (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==model:[14:78]
==with_change_control_penalty:[22:86]
    inputs: List[CasadiInput] = [
        # controls
        CasadiInput(
            name="mDot", value=0.0225, unit="K", description="Air mass flow into zone"
        ),
        # disturbances
        CasadiInput(
            name="load", value=150, unit="W", description="Heat " "load into zone"
        ),
        CasadiInput(
            name="T_in", value=290.15, unit="K", description="Inflow air temperature"
        ),
        # settings
        CasadiInput(
            name="T_upper",
            value=294.15,
            unit="K",
            description="Upper boundary (soft) for T.",
        ),
    ]

    states: List[CasadiState] = [
        # differential
        CasadiState(
            name="T", value=293.15, unit="K", description="Temperature of zone"
        ),
        # algebraic
        # slack variables
        CasadiState(
            name="T_slack",
            value=0,
            unit="K",
            description="Slack variable of temperature of zone",
        ),
    ]

    parameters: List[CasadiParameter] = [
        CasadiParameter(
            name="cp",
            value=1000,
            unit="J/kg*K",
            description="thermal capacity of the air",
        ),
        CasadiParameter(
            name="C", value=100000, unit="J/K", description="thermal capacity of zone"
        ),
        CasadiParameter(
            name="s_T",
            value=1,
            unit="-",
            description="Weight for T in constraint function",
        ),
        CasadiParameter(
            name="r_mDot",
            value=1,
            unit="-",
            description="Weight for mDot in objective function",
        ),
    ]
    outputs: List[CasadiOutput] = [
        CasadiOutput(name="T_out", unit="K", description="Temperature of zone")
    ]

 (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==mixed_integer.mixed_integer_mpc:[162:220]
==mixed_integer.mixed_integer_mpc_cia:[160:218]
                "save_results": True,
            },
            "time_step": 300,
            "prediction_horizon": 10,
            "parameters": [
                {"name": "s_T", "value": 3},
                {"name": "r_cooling", "value": 1 / 3},
                {"name": "cooler_mod_limit", "value": 250},
            ],
            "inputs": [
                {"name": "load", "value": 150},
                {"name": "T_upper", "value": ub},
                {"name": "T_in", "value": 290.15},
            ],
            "controls": [
                {"name": "cooling_power", "value": 250, "ub": 500, "lb": 0},
            ],
            "binary_controls": [
                {"name": "cooler_on", "value": 0, "ub": 1, "lb": 0},
            ],
            "states": [{"name": "T", "value": 298.16, "ub": 303.15, "lb": 288.15}],
        },
    ],
}
AGENT_SIM = {
    "id": "SimAgent",
    "modules": [
        {"module_id": "Ag1Com", "type": "local_broadcast"},
        {
            "module_id": "room",
            "type": "simulator",
            "model": {
                "type": {"file": __file__, "class_name": "MyCasadiModel"},
                "states": [{"name": "T", "value": 298.16}],
            },
            "t_sample": 10,
            "update_inputs_on_callback": False,
            "outputs": [
                {"name": "T_out", "value": 298, "alias": "T"},
            ],
            "inputs": [
                {"name": "cooling_power", "value": 200, "alias": "cooling_power"},
            ],
        },
    ],
}


def run_example(with_plots=True, log_level=logging.INFO, until=10000):
    # Change the working directly so that relative paths work
    os.chdir(Path(__file__).parent)

    # Set the log-level
    logging.basicConfig(level=log_level)
    mas = LocalMASAgency(
        agent_configs=[AGENT_MPC, AGENT_SIM], env=ENV_CONFIG, variable_logging=True
    )
    mas.run(until=until) (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==model:[18:78]
==simple_mpc:[34:94]
        ),
        # disturbances
        CasadiInput(
            name="load", value=150, unit="W", description="Heat load into zone"
        ),
        CasadiInput(
            name="T_in", value=290.15, unit="K", description="Inflow air temperature"
        ),
        # settings
        CasadiInput(
            name="T_upper",
            value=294.15,
            unit="K",
            description="Upper boundary (soft) for T.",
        ),
    ]

    states: List[CasadiState] = [
        # differential
        CasadiState(
            name="T", value=293.15, unit="K", description="Temperature of zone"
        ),
        # algebraic
        # slack variables
        CasadiState(
            name="T_slack",
            value=0,
            unit="K",
            description="Slack variable of temperature of zone",
        ),
    ]

    parameters: List[CasadiParameter] = [
        CasadiParameter(
            name="cp",
            value=1000,
            unit="J/kg*K",
            description="thermal capacity of the air",
        ),
        CasadiParameter(
            name="C", value=100000, unit="J/K", description="thermal capacity of zone"
        ),
        CasadiParameter(
            name="s_T",
            value=1,
            unit="-",
            description="Weight for T in constraint function",
        ),
        CasadiParameter(
            name="r_mDot",
            value=1,
            unit="-",
            description="Weight for mDot in objective function",
        ),
    ]
    outputs: List[CasadiOutput] = [
        CasadiOutput(name="T_out", unit="K", description="Temperature of zone")
    ]

 (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==model:[18:78]
==simple_mpc_multiple_shooting:[34:94]
        ),
        # disturbances
        CasadiInput(
            name="load", value=150, unit="W", description="Heat load into zone"
        ),
        CasadiInput(
            name="T_in", value=290.15, unit="K", description="Inflow air temperature"
        ),
        # settings
        CasadiInput(
            name="T_upper",
            value=294.15,
            unit="K",
            description="Upper boundary (soft) for T.",
        ),
    ]

    states: List[CasadiState] = [
        # differential
        CasadiState(
            name="T", value=293.15, unit="K", description="Temperature of zone"
        ),
        # algebraic
        # slack variables
        CasadiState(
            name="T_slack",
            value=0,
            unit="K",
            description="Slack variable of temperature of zone",
        ),
    ]

    parameters: List[CasadiParameter] = [
        CasadiParameter(
            name="cp",
            value=1000,
            unit="J/kg*K",
            description="thermal capacity of the air",
        ),
        CasadiParameter(
            name="C", value=100000, unit="J/K", description="thermal capacity of zone"
        ),
        CasadiParameter(
            name="s_T",
            value=1,
            unit="-",
            description="Weight for T in constraint function",
        ),
        CasadiParameter(
            name="r_mDot",
            value=1,
            unit="-",
            description="Weight for mDot in objective function",
        ),
    ]
    outputs: List[CasadiOutput] = [
        CasadiOutput(name="T_out", unit="K", description="Temperature of zone")
    ]

 (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==simple_mpc_gpr:[40:99]
==simple_mpc_linreg:[40:100]
                },
                "time_step": 300,
                "prediction_horizon": 15,
                "parameters": [
                    {"name": "s_T", "value": 3},
                    {"name": "r_mDot", "value": 1},
                ],
                "inputs": [
                    {"name": "T_in", "value": 290.15},
                    {"name": "load", "value": 150},
                    {"name": "T_upper", "value": ub},
                ],
                "controls": [{"name": "mDot", "value": 0.02, "ub": 0.05, "lb": 0}],
                "states": [{"name": "T", "value": 298.16, "ub": 303.15, "lb": 288.15}],
            },
        ],
    }
    agent_sim = {
        "id": "SimAgent",
        "modules": [
            {"module_id": "Ag1Com", "type": "local_broadcast"},
            {
                "module_id": "room",
                "type": "simulator",
                "model": {
                    "type": {
                        "file": "model.py",
                        "class_name": "PhysicalModel",
                    },
                    "states": [{"name": "T", "value": 298.16}],
                },
                "t_sample": 10,
                "save_results": True,
                "update_inputs_on_callback": False,
                "outputs": [
                    {"name": "T_out", "value": 298, "alias": "T"},
                ],
                "inputs": [
                    {"name": "mDot", "value": 0.02, "alias": "mDot"},
                ],
            },
        ],
    }
    return [agent_mpc, agent_sim]


def run_example(with_plots=True, log_level=logging.INFO, until=8000):
    # Change the working directory so that relative paths work
    script_dir = os.path.abspath(os.path.dirname(__file__))
    os.chdir(script_dir)

    # Add the script directory to Python path for imports
    if script_dir not in sys.path:
        sys.path.insert(0, script_dir)

    logging.basicConfig(level=log_level)

    # gets the subdirectory of anns with the highest number, i.e. the longest training
    # time
    try: (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==agentlib_mpc.optimization_backends.casadi_.admm:[33:89]
==agentlib_mpc.optimization_backends.casadi_.casadi_admm_ml:[114:168]
        coup_names = [c.name for c in var_ref.couplings]
        exchange_names = [c.name for c in var_ref.exchange]
        pure_outs = [
            m for m in model.outputs if m.name not in coup_names + exchange_names
        ]
        self.outputs = OptimizationVariable.declare(
            denotation="y",
            variables=pure_outs,
            ref_list=var_ref.outputs,
        )

        self.local_couplings = OptimizationVariable.declare(
            denotation="local_couplings",
            variables=[model.get(name) for name in coup_names],
            ref_list=coup_names,
        )
        couplings_global = [coup.mean for coup in var_ref.couplings]
        self.global_couplings = OptimizationParameter.declare(
            denotation="global_couplings",
            variables=[CasadiInput(name=coup) for coup in couplings_global],
            ref_list=couplings_global,
        )

        multipliers = [coup.multiplier for coup in var_ref.couplings]
        self.multipliers = OptimizationParameter.declare(
            denotation="multipliers",
            variables=[CasadiInput(name=coup) for coup in multipliers],
            ref_list=multipliers,
        )

        self.local_exchange = OptimizationVariable.declare(
            denotation="local_exchange",
            variables=[model.get(name) for name in exchange_names],
            ref_list=exchange_names,
        )
        couplings_mean_diff = [coup.mean_diff for coup in var_ref.exchange]
        self.exchange_diff = OptimizationParameter.declare(
            denotation="average_diff",
            variables=[CasadiInput(name=coup) for coup in couplings_mean_diff],
            ref_list=couplings_mean_diff,
        )

        multipliers = [coup.multiplier for coup in var_ref.exchange]
        self.exchange_multipliers = OptimizationParameter.declare(
            denotation="exchange_multipliers",
            variables=[CasadiInput(name=coup) for coup in multipliers],
            ref_list=multipliers,
        )

        self.penalty_factor = OptimizationParameter.declare(
            denotation="rho",
            variables=[CasadiParameter(name="penalty_factor")],
            ref_list=["penalty_factor"],
        ) (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==simple_mpc_linreg:[40:99]
==simple_mpc_nn:[38:94]
                },
                "time_step": 300,
                "prediction_horizon": 15,
                "parameters": [
                    {"name": "s_T", "value": 3},
                    {"name": "r_mDot", "value": 1},
                ],
                "inputs": [
                    {"name": "T_in", "value": 290.15},
                    {"name": "load", "value": 150},
                    {"name": "T_upper", "value": ub},
                ],
                "controls": [{"name": "mDot", "value": 0.02, "ub": 0.05, "lb": 0}],
                "states": [{"name": "T", "value": 298.16, "ub": 303.15, "lb": 288.15}],
            },
        ],
    }
    agent_sim = {
        "id": "SimAgent",
        "modules": [
            {"module_id": "Ag1Com", "type": "local_broadcast"},
            {
                "module_id": "room",
                "type": "simulator",
                "model": {
                    "type": {
                        "file": "model.py",
                        "class_name": "PhysicalModel",
                    },
                    "states": [{"name": "T", "value": 298.16}],
                },
                "t_sample": 10,
                "save_results": True,
                "update_inputs_on_callback": False,
                "outputs": [
                    {"name": "T_out", "value": 298, "alias": "T"},
                ],
                "inputs": [
                    {"name": "mDot", "value": 0.02, "alias": "mDot"},
                ],
            },
        ],
    }
    return [agent_mpc, agent_sim]


def run_example(with_plots=True, log_level=logging.INFO, until=8000):
    # Change the working directory so that relative paths work
    script_dir = os.path.abspath(os.path.dirname(__file__))
    os.chdir(script_dir)

    # Add the script directory to Python path for imports
    if script_dir not in sys.path:
        sys.path.insert(0, script_dir)

    logging.basicConfig(level=log_level)

    # gets the subdirectory of anns with the highest number, i.e. the longest training
    # time (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==model:[116:172]
==model:[22:78]
        ),
        CasadiInput(
            name="T_in", value=290.15, unit="K", description="Inflow air temperature"
        ),
        # settings
        CasadiInput(
            name="T_upper",
            value=294.15,
            unit="K",
            description="Upper boundary (soft) for T.",
        ),
    ]

    states: List[CasadiState] = [
        # differential
        CasadiState(
            name="T", value=293.15, unit="K", description="Temperature of zone"
        ),
        # algebraic
        # slack variables
        CasadiState(
            name="T_slack",
            value=0,
            unit="K",
            description="Slack variable of temperature of zone",
        ),
    ]

    parameters: List[CasadiParameter] = [
        CasadiParameter(
            name="cp",
            value=1000,
            unit="J/kg*K",
            description="thermal capacity of the air",
        ),
        CasadiParameter(
            name="C", value=100000, unit="J/K", description="thermal capacity of zone"
        ),
        CasadiParameter(
            name="s_T",
            value=1,
            unit="-",
            description="Weight for T in constraint function",
        ),
        CasadiParameter(
            name="r_mDot",
            value=1,
            unit="-",
            description="Weight for mDot in objective function",
        ),
    ]
    outputs: List[CasadiOutput] = [
        CasadiOutput(name="T_out", unit="K", description="Temperature of zone")
    ]

 (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==training_linreg:[133:186]
==training_nn:[142:195]
            },
            {
                "module_id": "input_generator",
                "type": "simulator",
                "t_sample": step_size * 10,
                "model": {"type": {"file": __file__, "class_name": "InputGenerator"}},
                "outputs": [
                    # {"name": "mDot"},
                    {"name": "load", "ub": 150, "lb": 150},
                    {"name": "T_in"},
                ],
            },
            {"type": "local", "subscriptions": ["PID"]},
        ],
    }

    pid_controller = {
        "id": "PID",
        "modules": [
            {
                "module_id": "pid",
                "type": "pid",
                "setpoint": {
                    "name": "setpoint",
                    "value": 273.15 + 22,
                    "alias": "T_set",
                },
                "Kp": 0.01,
                "Ti": 1,
                "input": {"name": "u", "value": 0, "alias": "T"},
                "output": {"name": "y", "value": 0, "alias": "mDot", "shared": "True"},
                "lb": 0,
                "ub": 0.05,
                "reverse": True,
            },
            {
                "module_id": "set_points",
                "type": "agentlib_mpc.set_point_generator",
                "interval": 60 * 10,
                "target_variable": {"name": "T_set", "alias": "T_set"},
            },
            {"type": "AgentLogger", "values_only": True, "t_sample": 10},
            {"type": "local", "subscriptions": ["Simulator"]},
        ],
    }
    return [simulator_config, trainer_config, pid_controller]


def main(training_time: float = 1000, plot_results=False, step_size: float = 300):
    env_config = {"rt": False, "t_sample": 60}
    logging.basicConfig(level=logging.INFO)
    mas = LocalMASAgency(
        agent_configs=configs( (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==model:[22:78]
==with_change_control_penalty:[30:86]
        ),
        CasadiInput(
            name="T_in", value=290.15, unit="K", description="Inflow air temperature"
        ),
        # settings
        CasadiInput(
            name="T_upper",
            value=294.15,
            unit="K",
            description="Upper boundary (soft) for T.",
        ),
    ]

    states: List[CasadiState] = [
        # differential
        CasadiState(
            name="T", value=293.15, unit="K", description="Temperature of zone"
        ),
        # algebraic
        # slack variables
        CasadiState(
            name="T_slack",
            value=0,
            unit="K",
            description="Slack variable of temperature of zone",
        ),
    ]

    parameters: List[CasadiParameter] = [
        CasadiParameter(
            name="cp",
            value=1000,
            unit="J/kg*K",
            description="thermal capacity of the air",
        ),
        CasadiParameter(
            name="C", value=100000, unit="J/K", description="thermal capacity of zone"
        ),
        CasadiParameter(
            name="s_T",
            value=1,
            unit="-",
            description="Weight for T in constraint function",
        ),
        CasadiParameter(
            name="r_mDot",
            value=1,
            unit="-",
            description="Weight for mDot in objective function",
        ),
    ]
    outputs: List[CasadiOutput] = [
        CasadiOutput(name="T_out", unit="K", description="Temperature of zone")
    ]

 (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==model:[116:172]
==simple_mpc:[38:94]
        ),
        CasadiInput(
            name="T_in", value=290.15, unit="K", description="Inflow air temperature"
        ),
        # settings
        CasadiInput(
            name="T_upper",
            value=294.15,
            unit="K",
            description="Upper boundary (soft) for T.",
        ),
    ]

    states: List[CasadiState] = [
        # differential
        CasadiState(
            name="T", value=293.15, unit="K", description="Temperature of zone"
        ),
        # algebraic
        # slack variables
        CasadiState(
            name="T_slack",
            value=0,
            unit="K",
            description="Slack variable of temperature of zone",
        ),
    ]

    parameters: List[CasadiParameter] = [
        CasadiParameter(
            name="cp",
            value=1000,
            unit="J/kg*K",
            description="thermal capacity of the air",
        ),
        CasadiParameter(
            name="C", value=100000, unit="J/K", description="thermal capacity of zone"
        ),
        CasadiParameter(
            name="s_T",
            value=1,
            unit="-",
            description="Weight for T in constraint function",
        ),
        CasadiParameter(
            name="r_mDot",
            value=1,
            unit="-",
            description="Weight for mDot in objective function",
        ),
    ]
    outputs: List[CasadiOutput] = [
        CasadiOutput(name="T_out", unit="K", description="Temperature of zone")
    ]

 (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==model:[22:78]
==simple_mpc_multiple_shooting:[38:94]
        ),
        CasadiInput(
            name="T_in", value=290.15, unit="K", description="Inflow air temperature"
        ),
        # settings
        CasadiInput(
            name="T_upper",
            value=294.15,
            unit="K",
            description="Upper boundary (soft) for T.",
        ),
    ]

    states: List[CasadiState] = [
        # differential
        CasadiState(
            name="T", value=293.15, unit="K", description="Temperature of zone"
        ),
        # algebraic
        # slack variables
        CasadiState(
            name="T_slack",
            value=0,
            unit="K",
            description="Slack variable of temperature of zone",
        ),
    ]

    parameters: List[CasadiParameter] = [
        CasadiParameter(
            name="cp",
            value=1000,
            unit="J/kg*K",
            description="thermal capacity of the air",
        ),
        CasadiParameter(
            name="C", value=100000, unit="J/K", description="thermal capacity of zone"
        ),
        CasadiParameter(
            name="s_T",
            value=1,
            unit="-",
            description="Weight for T in constraint function",
        ),
        CasadiParameter(
            name="r_mDot",
            value=1,
            unit="-",
            description="Weight for mDot in objective function",
        ),
    ]
    outputs: List[CasadiOutput] = [
        CasadiOutput(name="T_out", unit="K", description="Temperature of zone")
    ]

 (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==model:[18:72]
==simple_mpc_time_dependent_obj:[35:89]
        ),
        # disturbances
        CasadiInput(
            name="load", value=150, unit="W", description="Heat load into zone"
        ),
        CasadiInput(
            name="T_in", value=290.15, unit="K", description="Inflow air temperature"
        ),
        # settings
        CasadiInput(
            name="T_upper",
            value=294.15,
            unit="K",
            description="Upper boundary (soft) for T.",
        ),
    ]

    states: List[CasadiState] = [
        # differential
        CasadiState(
            name="T", value=293.15, unit="K", description="Temperature of zone"
        ),
        # algebraic
        # slack variables
        CasadiState(
            name="T_slack",
            value=0,
            unit="K",
            description="Slack variable of temperature of zone",
        ),
    ]

    parameters: List[CasadiParameter] = [
        CasadiParameter(
            name="cp",
            value=1000,
            unit="J/kg*K",
            description="thermal capacity of the air",
        ),
        CasadiParameter(
            name="C", value=100000, unit="J/K", description="thermal capacity of zone"
        ),
        CasadiParameter(
            name="s_T",
            value=1,
            unit="-",
            description="Weight for T in constraint function",
        ),
        CasadiParameter(
            name="r_mDot",
            value=1,
            unit="-",
            description="Weight for mDot in objective function",
        ), (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==simple_mpc_multiple_shooting:[211:269]
==simple_mpc_time_dependent_obj:[233:291]
    except Exception:
        stats = None
    results = mas.get_results(cleanup=False)
    mpc_results = results["myMPCAgent"]["myMPC"]
    sim_res = results["SimAgent"]["room"]

    if with_dashboard:
        show_dashboard(mpc_results, stats)

    if with_plots:
        plot(mpc_results, sim_res, until)

    return results


def plot(mpc_results: pd.DataFrame, sim_res: pd.DataFrame, until: float):
    import matplotlib.pyplot as plt
    from agentlib_mpc.utils.plotting.mpc import plot_mpc

    fig, ax = plt.subplots(2, 1, sharex=True)
    t_sim = sim_res["T_out"]
    t_sample = t_sim.index[1] - t_sim.index[0]
    aie_kh = (t_sim - ub).abs().sum() * t_sample / 3600
    energy_cost_kWh = (
        (sim_res["mDot"] * (sim_res["T_out"] - sim_res["T_in"])).sum()
        * t_sample
        * 1
        / 3600
    )  # cp is 1
    print(f"Absoulute integral error: {aie_kh} Kh.")
    print(f"Cooling energy used: {energy_cost_kWh} kWh.")

    plot_mpc(
        series=mpc_results["variable"]["T"] - 273.15,
        ax=ax[0],
        plot_actual_values=True,
        plot_predictions=True,
    )
    ax[0].axhline(ub - 273.15, color="grey", linestyle="--", label="upper boundary")
    plot_mpc(
        series=mpc_results["variable"]["mDot"],
        ax=ax[1],
        plot_actual_values=True,
        plot_predictions=True,
    )

    ax[1].legend()
    ax[0].legend()
    ax[0].set_ylabel("$T_{room}$ / °C")
    ax[1].set_ylabel("$\dot{m}_{air}$ / kg/s")
    ax[1].set_xlabel("simulation time / s")
    ax[1].set_ylim([0, 0.06])
    ax[1].set_xlim([0, until])
    plt.show()


if __name__ == "__main__":
    run_example( (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==model:[116:168]
==simple_mpc_multiple_shooting:[38:90]
        ),
        CasadiInput(
            name="T_in", value=290.15, unit="K", description="Inflow air temperature"
        ),
        # settings
        CasadiInput(
            name="T_upper",
            value=294.15,
            unit="K",
            description="Upper boundary (soft) for T.",
        ),
    ]

    states: List[CasadiState] = [
        # differential
        CasadiState(
            name="T", value=293.15, unit="K", description="Temperature of zone"
        ),
        # algebraic
        # slack variables
        CasadiState(
            name="T_slack",
            value=0,
            unit="K",
            description="Slack variable of temperature of zone",
        ),
    ]

    parameters: List[CasadiParameter] = [
        CasadiParameter(
            name="cp",
            value=1000,
            unit="J/kg*K",
            description="thermal capacity of the air",
        ),
        CasadiParameter(
            name="C", value=100000, unit="J/K", description="thermal capacity of zone"
        ),
        CasadiParameter(
            name="s_T",
            value=1,
            unit="-",
            description="Weight for T in constraint function",
        ),
        CasadiParameter(
            name="r_mDot",
            value=1,
            unit="-",
            description="Weight for mDot in objective function",
        ),
    ]
    outputs: List[CasadiOutput] = [ (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==simple_mpc_linreg:[40:88]
==simple_mpc_nn:[38:86]
                },
                "time_step": 300,
                "prediction_horizon": 15,
                "parameters": [
                    {"name": "s_T", "value": 3},
                    {"name": "r_mDot", "value": 1},
                ],
                "inputs": [
                    {"name": "T_in", "value": 290.15},
                    {"name": "load", "value": 150},
                    {"name": "T_upper", "value": ub},
                ],
                "controls": [{"name": "mDot", "value": 0.02, "ub": 0.05, "lb": 0}],
                "states": [{"name": "T", "value": 298.16, "ub": 303.15, "lb": 288.15}],
            },
        ],
    }
    agent_sim = {
        "id": "SimAgent",
        "modules": [
            {"module_id": "Ag1Com", "type": "local_broadcast"},
            {
                "module_id": "room",
                "type": "simulator",
                "model": {
                    "type": {
                        "file": "model.py",
                        "class_name": "PhysicalModel",
                    },
                    "states": [{"name": "T", "value": 298.16}],
                },
                "t_sample": 10,
                "save_results": True,
                "update_inputs_on_callback": False,
                "outputs": [
                    {"name": "T_out", "value": 298, "alias": "T"},
                ],
                "inputs": [
                    {"name": "mDot", "value": 0.02, "alias": "mDot"},
                ],
            },
        ],
    }
    return [agent_mpc, agent_sim]


def run_example(with_plots=True, log_level=logging.INFO, until=8000):
    # Change the working directly so that relative paths work (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==simple_mpc_time_dependent_obj:[39:89]
==with_change_control_penalty:[30:80]
        ),
        CasadiInput(
            name="T_in", value=290.15, unit="K", description="Inflow air temperature"
        ),
        # settings
        CasadiInput(
            name="T_upper",
            value=294.15,
            unit="K",
            description="Upper boundary (soft) for T.",
        ),
    ]

    states: List[CasadiState] = [
        # differential
        CasadiState(
            name="T", value=293.15, unit="K", description="Temperature of zone"
        ),
        # algebraic
        # slack variables
        CasadiState(
            name="T_slack",
            value=0,
            unit="K",
            description="Slack variable of temperature of zone",
        ),
    ]

    parameters: List[CasadiParameter] = [
        CasadiParameter(
            name="cp",
            value=1000,
            unit="J/kg*K",
            description="thermal capacity of the air",
        ),
        CasadiParameter(
            name="C", value=100000, unit="J/K", description="thermal capacity of zone"
        ),
        CasadiParameter(
            name="s_T",
            value=1,
            unit="-",
            description="Weight for T in constraint function",
        ),
        CasadiParameter(
            name="r_mDot",
            value=1,
            unit="-",
            description="Weight for mDot in objective function",
        ), (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==simple_mpc_gpr:[114:161]
==simple_mpc_linreg:[115:162]
    )
    mas.run(until=until)
    results = mas.get_results()
    if with_plots:
        mpc_results = results["myMPCAgent"]["myMPC"]
        sim_res = results["SimAgent"]["room"]
        fig, ax = plt.subplots(2, 1, sharex=True)
        t_sim = sim_res["T_out"]
        t_sample = t_sim.index[1] - t_sim.index[0]
        aie_kh = (t_sim - ub).abs().sum() * t_sample / 3600
        energy_cost_kWh = (
            (sim_res["mDot"] * (sim_res["T_out"] - sim_res["T_in"])).sum()
            * t_sample
            * 1
            / 3600
        )  # cp is 1
        print(f"Absoulute integral error: {aie_kh} Kh.")
        print(f"Cooling energy used: {energy_cost_kWh} kWh.")
        temperature = mpc_results["variable"]["T"] - 273.15
        plot_mpc(
            series=temperature,
            ax=ax[0],
            plot_actual_values=True,
            plot_predictions=True,
        )
        ax[0].axhline(ub - 273.15, color="grey", linestyle="--", label="upper boundary")
        plot_mpc(
            series=mpc_results["variable"]["mDot"],
            ax=ax[1],
            plot_actual_values=True,
            plot_predictions=True,
        )

        ax[1].legend()
        ax[0].legend()
        ax[0].set_ylabel("$T_{room}$ / °C")
        ax[1].set_ylabel("$\dot{m}_{air}$ / kg/s")
        ax[1].set_xlabel("simulation time / s")
        ax[1].set_ylim([0, 0.06])
        ax[1].set_xlim([0, until])
        plt.show()

    return results


if __name__ == "__main__":
    run_example(with_plots=True, until=3600) (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==mixed_integer.mixed_integer_mpc_cia:[43:92]
==model:[18:67]
        ),
        # disturbances
        CasadiInput(
            name="load", value=150, unit="W", description="Heat " "load into zone"
        ),
        CasadiInput(
            name="T_in", value=290.15, unit="K", description="Inflow air temperature"
        ),
        # settings
        CasadiInput(
            name="T_upper",
            value=294.15,
            unit="K",
            description="Upper boundary (soft) for T.",
        ),
    ]

    states: List[CasadiState] = [
        # differential
        CasadiState(
            name="T", value=293.15, unit="K", description="Temperature of zone"
        ),
        # algebraic
        # slack variables
        CasadiState(
            name="T_slack",
            value=0,
            unit="K",
            description="Slack variable of temperature of zone",
        ),
    ]

    parameters: List[CasadiParameter] = [
        CasadiParameter(
            name="cp",
            value=1000,
            unit="J/kg*K",
            description="thermal capacity of the air",
        ),
        CasadiParameter(
            name="C", value=100000, unit="J/K", description="thermal capacity of zone"
        ),
        CasadiParameter(
            name="s_T",
            value=1,
            unit="-",
            description="Weight for T in constraint function",
        ),
        CasadiParameter( (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==mixed_integer.mixed_integer_mpc:[44:93]
==with_change_control_penalty:[26:75]
        ),
        # disturbances
        CasadiInput(
            name="load", value=150, unit="W", description="Heat " "load into zone"
        ),
        CasadiInput(
            name="T_in", value=290.15, unit="K", description="Inflow air temperature"
        ),
        # settings
        CasadiInput(
            name="T_upper",
            value=294.15,
            unit="K",
            description="Upper boundary (soft) for T.",
        ),
    ]

    states: List[CasadiState] = [
        # differential
        CasadiState(
            name="T", value=293.15, unit="K", description="Temperature of zone"
        ),
        # algebraic
        # slack variables
        CasadiState(
            name="T_slack",
            value=0,
            unit="K",
            description="Slack variable of temperature of zone",
        ),
    ]

    parameters: List[CasadiParameter] = [
        CasadiParameter(
            name="cp",
            value=1000,
            unit="J/kg*K",
            description="thermal capacity of the air",
        ),
        CasadiParameter(
            name="C", value=100000, unit="J/K", description="thermal capacity of zone"
        ),
        CasadiParameter(
            name="s_T",
            value=1,
            unit="-",
            description="Weight for T in constraint function",
        ),
        CasadiParameter( (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==model:[136:190]
==model:[139:193]
        CasadiState(
            name="T_slack",
            value=0,
            unit="K",
            description="Slack variable of temperature of zone",
        ),
    ]

    parameters: List[CasadiParameter] = [
        CasadiParameter(
            name="cp",
            value=1000,
            unit="J/kg*K",
            description="thermal capacity of the air",
        ),
        CasadiParameter(
            name="C", value=100000, unit="J/K", description="thermal capacity of zone"
        ),
        CasadiParameter(
            name="s_T",
            value=1,
            unit="-",
            description="Weight for T in constraint function",
        ),
        CasadiParameter(
            name="r_mDot",
            value=1,
            unit="-",
            description="Weight for mDot in objective function",
        ),
    ]
    outputs: List[CasadiOutput] = [
        CasadiOutput(name="T_out", unit="K", description="Temperature of zone"),
    ]


class DataDrivenModel(CasadiMLModel):
    config: DataDrivenModelConfig

    def setup_system(self):
        # ode

        # Define ae
        self.T_out.alg = self.T  # math operation to get the symbolic variable

        # Constraints: List[(lower bound, function, upper bound)]
        self.constraints = [
            # soft constraints
            (0, self.T + self.T_slack, self.T_upper),
        ]

        # Objective function
        objective = sum(
            [ (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==agentlib_mpc.optimization_backends.casadi_.basic:[46:90]
==agentlib_mpc.optimization_backends.casadi_.casadi_ml:[39:81]
        self.states = OptimizationVariable.declare(
            denotation="state",
            variables=model.get_states(var_ref.states),
            ref_list=var_ref.states,
            assert_complete=True,
        )
        self.controls = OptimizationVariable.declare(
            denotation="control",
            variables=model.get_inputs(var_ref.controls),
            ref_list=var_ref.controls,
            assert_complete=True,
        )
        self.algebraics = OptimizationVariable.declare(
            denotation="z",
            variables=model.auxiliaries,
            ref_list=[],
        )
        self.outputs = OptimizationVariable.declare(
            denotation="y",
            variables=model.outputs,
            ref_list=var_ref.outputs,
        )

        # define parameters
        self.non_controlled_inputs = OptimizationParameter.declare(
            denotation="d",
            variables=model.get_inputs(var_ref.inputs),
            ref_list=var_ref.inputs,
            assert_complete=True,
        )
        self.model_parameters = OptimizationParameter.declare(
            denotation="parameter",
            variables=model.parameters,
            ref_list=var_ref.parameters,
        )
        self.initial_state = OptimizationParameter.declare(
            denotation="initial_state",
            variables=model.get_states(var_ref.states),
            ref_list=var_ref.states,
            use_in_stage_function=False,
            assert_complete=True,
        ) (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==training_gpr:[139:180]
==training_nn:[142:183]
            },
            {
                "module_id": "input_generator",
                "type": "simulator",
                "t_sample": step_size * 10,
                "model": {"type": {"file": __file__, "class_name": "InputGenerator"}},
                "outputs": [
                    # {"name": "mDot"},
                    {"name": "load", "ub": 150, "lb": 150},
                    {"name": "T_in"},
                ],
            },
            {"type": "local", "subscriptions": ["PID"]},
        ],
    }

    pid_controller = {
        "id": "PID",
        "modules": [
            {
                "module_id": "pid",
                "type": "pid",
                "setpoint": {
                    "name": "setpoint",
                    "value": 273.15 + 22,
                    "alias": "T_set",
                },
                "Kp": 0.01,
                "Ti": 1,
                "input": {"name": "u", "value": 0, "alias": "T"},
                "output": {"name": "y", "value": 0, "alias": "mDot", "shared": "True"},
                "lb": 0,
                "ub": 0.05,
                "reverse": True,
            },
            {
                "module_id": "set_points",
                "type": "agentlib_mpc.set_point_generator",
                "interval": 60 * 10,
                "target_variable": {"name": "T_set", "alias": "T_set"},
            }, (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==mixed_integer.mixed_integer_mpc_cia:[47:92]
==simple_mpc_multiple_shooting:[38:83]
        ),
        CasadiInput(
            name="T_in", value=290.15, unit="K", description="Inflow air temperature"
        ),
        # settings
        CasadiInput(
            name="T_upper",
            value=294.15,
            unit="K",
            description="Upper boundary (soft) for T.",
        ),
    ]

    states: List[CasadiState] = [
        # differential
        CasadiState(
            name="T", value=293.15, unit="K", description="Temperature of zone"
        ),
        # algebraic
        # slack variables
        CasadiState(
            name="T_slack",
            value=0,
            unit="K",
            description="Slack variable of temperature of zone",
        ),
    ]

    parameters: List[CasadiParameter] = [
        CasadiParameter(
            name="cp",
            value=1000,
            unit="J/kg*K",
            description="thermal capacity of the air",
        ),
        CasadiParameter(
            name="C", value=100000, unit="J/K", description="thermal capacity of zone"
        ),
        CasadiParameter(
            name="s_T",
            value=1,
            unit="-",
            description="Weight for T in constraint function",
        ),
        CasadiParameter( (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==mixed_integer.mixed_integer_mpc:[48:93]
==simple_mpc_time_dependent_obj:[39:84]
        ),
        CasadiInput(
            name="T_in", value=290.15, unit="K", description="Inflow air temperature"
        ),
        # settings
        CasadiInput(
            name="T_upper",
            value=294.15,
            unit="K",
            description="Upper boundary (soft) for T.",
        ),
    ]

    states: List[CasadiState] = [
        # differential
        CasadiState(
            name="T", value=293.15, unit="K", description="Temperature of zone"
        ),
        # algebraic
        # slack variables
        CasadiState(
            name="T_slack",
            value=0,
            unit="K",
            description="Slack variable of temperature of zone",
        ),
    ]

    parameters: List[CasadiParameter] = [
        CasadiParameter(
            name="cp",
            value=1000,
            unit="J/kg*K",
            description="thermal capacity of the air",
        ),
        CasadiParameter(
            name="C", value=100000, unit="J/K", description="thermal capacity of zone"
        ),
        CasadiParameter(
            name="s_T",
            value=1,
            unit="-",
            description="Weight for T in constraint function",
        ),
        CasadiParameter( (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==model:[0:48]
==model:[0:48]
from typing import List

from agentlib_mpc.models.casadi_model import (
    CasadiModelConfig,
    CasadiInput,
    CasadiState,
    CasadiParameter,
    CasadiOutput,
    CasadiModel,
)
from agentlib_mpc.models.casadi_ml_model import CasadiMLModel, CasadiMLModelConfig


class PhysicalModelConfig(CasadiModelConfig):
    inputs: List[CasadiInput] = [
        # controls
        CasadiInput(
            name="mDot", value=0.0225, unit="K", description="Air mass flow into zone"
        ),
        # disturbances
        CasadiInput(
            name="load", value=150, unit="W", description="Heat " "load into zone"
        ),
        CasadiInput(
            name="T_in", value=290.15, unit="K", description="Inflow air temperature"
        ),
        # settings
        CasadiInput(
            name="T_upper",
            value=294.15,
            unit="K",
            description="Upper boundary (soft) for T.",
        ),
    ]

    states: List[CasadiState] = [
        # differential
        CasadiState(
            name="T", value=293.15, unit="K", description="Temperature of zone"
        ),
        # algebraic
        # slack variables
        CasadiState(
            name="T_slack",
            value=0,
            unit="K",
            description="Slack variable of temperature of zone",
        ), (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==agentlib_mpc.optimization_backends.casadi_.casadi_admm_ml:[446:497]
==agentlib_mpc.optimization_backends.casadi_.casadi_ml:[296:347]
                    all_input_variables[l_name] = new_lag_var

                    # add the mx variable to its lag time and denotation
                    lagged_inputs_j = lagged_inputs.setdefault(j, {})
                    lv_mx = lagged_inputs_j.setdefault(q_name, ca.DM([]))
                    lagged_inputs[j][q_name] = ca.vertcat(lv_mx, new_lag_var)

                    # keep track of the variable names that were added
                    lagged_input_names_j = lagged_input_names.setdefault(j, {})
                    lv_names = lagged_input_names_j.setdefault(q_name, [])
                    lv_names.append(v_name)

        self._lagged_input_names = lagged_input_names
        flat_lagged_inputs = {
            f"{den}_{i}": mx
            for i, subdict in lagged_inputs.items()
            for den, mx in subdict.items()
        }

        all_outputs = system.sim_step(**all_input_variables)
        state_output_it = (all_outputs[s_name] for s_name in system.states.full_names)
        state_output = ca.vertcat(*state_output_it)

        # aggregate outputs
        outputs = [
            state_output,
            system.cost_function,
            *constraints_func,
            *constraints_lb,
            *constraints_ub,
        ]
        output_denotations = [
            "next_states",
            "cost_function",
            *constraint_denotations,
            *constraint_lb_denotations,
            *constraint_ub_denotations,
        ]

        # function describing system dynamics and cost function
        self._stage_function = ca.Function(
            "f",
            inputs + list(flat_lagged_inputs.values()),
            outputs,
            # input handles to make kwarg use possible and to debug
            input_denotations + list(flat_lagged_inputs),
            # output handles to make kwarg use possible and to debug
            output_denotations,
        )

    def _create_lag_structure_for_denotations(self, system: CasadiMLSystem): (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==training_nn:[95:131]
==training_nn:[97:133]
                "interpolations": {"mDot": "mean_over_interval"},
                "layers": [{32, "sigmoid"}],
                "train_share": 0.6,
                "validation_share": 0.2,
                "test_share": 0.2,
                "retrain_delay": training_time,
                "save_directory": "anns",
                "use_values_for_incomplete_data": True,
                "data_sources": ["results//simulation_data_14days.csv"],
                "save_data": True,
                "save_ml_model": True,
                "save_plots": True,
                "early_stopping": {"activate": "True", "patience": 800},
            },
            {"type": "local", "subscriptions": ["Simulator", "PID"]},
        ],
    }

    # sample rate is at least 1, and maximum 10
    t_sample_sim = min(max(1, int(step_size) // 30), 10)
    simulator_config = {
        "id": "Simulator",
        "modules": [
            {
                "module_id": "simulator",
                "type": "simulator",
                "model": {
                    "type": {
                        "file": model.__file__,
                        "class_name": model.PhysicalModel.__name__,
                    },
                },
                "t_sample": t_sample_sim,
                "save_results": plot_results,
                "result_filename": "results//simulation_data.csv",
                "result_causalities": ["local", "input", "output"], (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==simple_mpc_multiple_shooting:[168:210]
==simple_mpc_time_dependent_obj:[190:232]
            ],
        },
    ],
}
AGENT_SIM = {
    "id": "SimAgent",
    "modules": [
        {"module_id": "Ag1Com", "type": "local_broadcast"},
        {
            "module_id": "room",
            "type": "simulator",
            "model": {
                "type": {"file": __file__, "class_name": "MyCasadiModel"},
                "states": [{"name": "T", "value": 298.16}],
            },
            "t_sample": 10,
            "update_inputs_on_callback": False,
            "save_results": True,
            "outputs": [
                {"name": "T_out", "value": 298, "alias": "T"},
            ],
            "inputs": [
                {"name": "mDot", "value": 0.02, "alias": "mDot"},
            ],
        },
    ],
}


def run_example(
    with_plots=True, log_level=logging.INFO, until=10000, with_dashboard=False
):
    # Change the working directly so that relative paths work
    os.chdir(Path(__file__).parent)

    # Set the log-level
    logging.basicConfig(level=log_level)
    mas = LocalMASAgency(
        agent_configs=[AGENT_MPC, AGENT_SIM], env=ENV_CONFIG, variable_logging=False
    )
    mas.run(until=until)
    try: (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==simple_mpc_gpr:[0:39]
==simple_mpc_linreg:[0:39]
import logging
import sys
from pathlib import Path
import matplotlib.pyplot as plt
import os

from agentlib.utils.multi_agent_system import LocalMASAgency
from agentlib_mpc.utils.plotting.mpc import plot_mpc

logger = logging.getLogger(__name__)

# script variables
ub = 295.15

ENV_CONFIG = {"rt": False, "factor": 0.01, "t_sample": 60}


def agent_configs(ml_model_path: str) -> list[dict]:
    agent_mpc = {
        "id": "myMPCAgent",
        "modules": [
            {"module_id": "Ag1Com", "type": "local_broadcast"},
            {
                "module_id": "myMPC",
                "type": "agentlib_mpc.mpc",
                "optimization_backend": {
                    "type": "casadi_ml",
                    "model": {
                        "type": {
                            "file": "model.py",
                            "class_name": "DataDrivenModel",
                        },
                        "ml_model_sources": [ml_model_path],
                    },
                    "discretization_options": {
                        "method": "multiple_shooting",
                    },
                    "results_file": "results//opt.csv",
                    "overwrite_result_file": True, (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==model:[139:171]
==simple_mpc_multiple_shooting:[58:90]
        CasadiState(
            name="T_slack",
            value=0,
            unit="K",
            description="Slack variable of temperature of zone",
        ),
    ]

    parameters: List[CasadiParameter] = [
        CasadiParameter(
            name="cp",
            value=1000,
            unit="J/kg*K",
            description="thermal capacity of the air",
        ),
        CasadiParameter(
            name="C", value=100000, unit="J/K", description="thermal capacity of zone"
        ),
        CasadiParameter(
            name="s_T",
            value=1,
            unit="-",
            description="Weight for T in constraint function",
        ),
        CasadiParameter(
            name="r_mDot",
            value=1,
            unit="-",
            description="Weight for mDot in objective function",
        ),
    ]
    outputs: List[CasadiOutput] = [ (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==examples.three_zone_datadriven_admm.training_direct:[102:132]
==simulation_model:[70:100]
        ),
        CasadiParameter(
            name="c_BKA",
            value=500000,
            unit="J/kg*K",
            description="thermal capacity of zone 0",
        ),
        CasadiParameter(
            name="cw", value=518000, unit="J/kg*K", description="Wärmekapazität Wand"
        ),
        CasadiParameter(
            name="cl", value=1000, unit="J/kg*K", description="Wärmekapazität Luft"
        ),
        CasadiParameter(
            name="hw", value=0.17, unit="J/kg*K", description="Leitfähigkeit Wand"
        ),
        CasadiParameter(
            name="hBKA", value=2, unit="J/kg*K", description="Leitfähigkeit BKA"
        ),
        CasadiParameter(
            name="hFenster",
            value=1.23,
            unit="J/kg*K",
            description="Leitfähigkeit Fenster",
        ),
        CasadiParameter(name="Aw", value=13.85, unit="m2", description="Fläche Wand"),
        CasadiParameter(name="ABKA", value=39.5, unit="m2", description="Fläche BKA"),
        CasadiParameter(
            name="AFenster", value=6.6, unit="m2", description="Fläche Fenster"
        ), (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==models.room_model:[54:90]
==room_model:[39:76]
        CasadiParameter(
            name="cp",
            value=1000,
            unit="J/kg*K",
            description="thermal capacity of the air",
        ),
        CasadiParameter(
            name="cZ",
            value=60000,
            unit="J/kg*K",
            description="thermal capacity of zone",
        ),
        CasadiParameter(
            name="q_T",
            value=1,
            unit="-",
            description="Weight for T in objective function",
        ),
        CasadiParameter(
            name="q_mDot",
            value=1,
            unit="-",
            description="Weight for mDot in objective function",
        ),
    ]


class CaCooledRoom(CasadiModel):
    config: CaCooledRoomConfig

    def setup_system(self):
        # Define ode
        self.T.ode = (
            self.cp * self.mDot / self.cZ * (self.T_in - self.T) + self.d / self.cZ
        )

        # Constraints: List[(lower bound, function, upper bound)] (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==agentlib_mpc.optimization_backends.casadi_.basic:[208:275]
==agentlib_mpc.optimization_backends.casadi_.mhe:[231:298]
        constraints_func = [c.function for c in constraints.values()]
        constraints_lb = [c.lb for c in constraints.values()]
        constraints_ub = [c.ub for c in constraints.values()]
        constraint_denotations = list(constraints.keys())
        constraint_lb_denotations = [LB_PREFIX + k for k in constraints]
        constraint_ub_denotations = [UB_PREFIX + k for k in constraints]

        # aggregate outputs
        outputs = [
            system.ode,
            system.cost_function,
            *constraints_func,
            *constraints_lb,
            *constraints_ub,
        ]
        output_denotations = [
            "ode",
            "cost_function",
            *constraint_denotations,
            *constraint_lb_denotations,
            *constraint_ub_denotations,
        ]

        # function describing system dynamics and cost function
        self._stage_function = ca.Function(
            "f",
            inputs,
            outputs,
            # input handles to make kwarg use possible and to debug
            input_denotations,
            # output handles to make kwarg use possible and to debug
            output_denotations,
        )

    def initialize(self, system: BaseSystem, solver_factory: SolverFactory):
        """Initializes the trajectory optimization problem, creating all symbolic
        variables of the OCP, the mapping function and the numerical solver."""
        self._construct_stage_function(system)
        super().initialize(system=system, solver_factory=solver_factory)

    def _collocation_inner_loop(
        self,
        state_at_beginning: ca.MX,
        collocation: CollocationMatrices,
        states: OptimizationVariable,
        opt_vars: list[OptimizationVariable],
        opt_pars: list[OptimizationParameter],
        const: dict[OptimizationQuantity, ca.MX],
    ) -> tuple[ca.MX, tuple]:
        """
        Constructs the inner loop of a collocation discretization. Takes the

        Args
            collocation: The collocation matrices
            state_at_beginning: The casadi MX instance representing the state at the
                beginning of the collocation interval
            states: The OptimizationVariable representing the states
            opt_vars: The OptimizationVariables which should be defined at each
                collocation point
            par_vars: The OptimizationParameters which should be defined at each
                collocation point
            const: Variables or parameters to feed into the system function that are
                constant over the inner loop. Value is the current MX to be used.

        Returns:
            state_k_end[MX]: state at the end of collocation interval
        """ (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==model:[139:169]
==simple_mpc_time_dependent_obj:[59:89]
        CasadiState(
            name="T_slack",
            value=0,
            unit="K",
            description="Slack variable of temperature of zone",
        ),
    ]

    parameters: List[CasadiParameter] = [
        CasadiParameter(
            name="cp",
            value=1000,
            unit="J/kg*K",
            description="thermal capacity of the air",
        ),
        CasadiParameter(
            name="C", value=100000, unit="J/K", description="thermal capacity of zone"
        ),
        CasadiParameter(
            name="s_T",
            value=1,
            unit="-",
            description="Weight for T in constraint function",
        ),
        CasadiParameter(
            name="r_mDot",
            value=1,
            unit="-",
            description="Weight for mDot in objective function",
        ), (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==mixed_integer.mixed_integer_mpc:[229:261]
==mixed_integer.mixed_integer_mpc_cia:[229:262]
        plot_mpc(
            series=mpc_results["variable"]["T"] - 273.15,
            ax=ax[0],
            plot_actual_values=True,
            plot_predictions=True,
        )
        ax[0].axhline(ub - 273.15, color="grey", linestyle="--", label="upper boundary")
        plot_mpc(
            series=mpc_results["variable"]["cooling_power"],
            ax=ax[1],
            plot_actual_values=True,
            plot_predictions=True,
            step=True,
        )
        ax[1].axhline(250, color="grey", linestyle="--", label="modulation limit")
        # ax[1].plot(
        #     results["myMPCAgent"]["AgentLogger"]["cooling_power"], label="air mass flow"
        # )
        plot_mpc(
            series=mpc_results["variable"]["cooler_on"],
            ax=ax[2],
            plot_actual_values=True,
            plot_predictions=True,
            step=True,
        )
        ax[0].set_ylabel("$T_{room}$ / °C")
        ax[1].set_ylabel("$\dot{Q}_{cool}$ / W")
        ax[2].set_ylabel("Switch")
        ax[2].set_xlabel("simulation time / s")
        ax[2].set_yticks([0, 1])
        ax[1].set_ylim([0, 510])
        # results["myMPCAgent"]["AgentLogger"]["cooler_on"].plot(ax=ax[2], color="black", drawstyle="steps-post", label="Switch") (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==model:[142:172]
==model:[49:79]
    ]

    parameters: List[CasadiParameter] = [
        CasadiParameter(
            name="cp",
            value=1000,
            unit="J/kg*K",
            description="thermal capacity of the air",
        ),
        CasadiParameter(
            name="C", value=100000, unit="J/K", description="thermal capacity of zone"
        ),
        CasadiParameter(
            name="s_T",
            value=1,
            unit="-",
            description="Weight for T in constraint function",
        ),
        CasadiParameter(
            name="r_mDot",
            value=1,
            unit="-",
            description="Weight for mDot in objective function",
        ),
    ]
    outputs: List[CasadiOutput] = [
        CasadiOutput(name="T_out", unit="K", description="Temperature of zone"),
    ]

 (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==model:[14:48]
==with_change_control_penalty:[22:56]
    inputs: List[CasadiInput] = [
        # controls
        CasadiInput(
            name="mDot", value=0.0225, unit="K", description="Air mass flow into zone"
        ),
        # disturbances
        CasadiInput(
            name="load", value=150, unit="W", description="Heat " "load into zone"
        ),
        CasadiInput(
            name="T_in", value=290.15, unit="K", description="Inflow air temperature"
        ),
        # settings
        CasadiInput(
            name="T_upper",
            value=294.15,
            unit="K",
            description="Upper boundary (soft) for T.",
        ),
    ]

    states: List[CasadiState] = [
        # differential
        CasadiState(
            name="T", value=293.15, unit="K", description="Temperature of zone"
        ),
        # algebraic
        # slack variables
        CasadiState(
            name="T_slack",
            value=0,
            unit="K",
            description="Slack variable of temperature of zone",
        ), (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==simple_mpc_nn:[114:144]
==simple_mpc_nn:[141:171]
        fig, ax = plt.subplots(2, 1, sharex=True)
        temperature = mpc_results["variable"]["T"] - 273.15
        plot_mpc(
            series=temperature,
            ax=ax[0],
            plot_actual_values=True,
            plot_predictions=True,
        )
        ax[0].axhline(ub - 273.15, color="grey", linestyle="--", label="upper boundary")
        plot_mpc(
            series=mpc_results["variable"]["mDot"],
            ax=ax[1],
            plot_actual_values=True,
            plot_predictions=True,
        )

        ax[1].legend()
        ax[0].legend()
        ax[0].set_ylabel("$T_{room}$ / °C")
        ax[1].set_ylabel("$\dot{m}_{air}$ / kg/s")
        ax[1].set_xlabel("simulation time / s")
        ax[1].set_ylim([0, 0.06])
        ax[1].set_xlim([0, until])
        plt.show()

    return results


if __name__ == "__main__":
    run_example(with_plots=True, until=3600) (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==agentlib_mpc.optimization_backends.casadi_.casadi_admm_ml:[248:286]
==agentlib_mpc.optimization_backends.casadi_.casadi_ml:[125:163]
        du_weights = self.add_opt_par(sys.r_del_u)

        pre_grid_states = [ts * i for i in range(-sys.max_lag + 1, 1)]
        inputs_lag = min(-2, -sys.max_lag)  # at least -2, to consider last control
        pre_grid_inputs = [ts * i for i in range(inputs_lag + 1, 0)]
        prediction_grid = [ts * i for i in range(0, n)]

        # sort for debugging purposes
        full_grid = sorted(
            list(set(prediction_grid + pre_grid_inputs + pre_grid_states))
        )

        # dict[time, dict[denotation, ca.MX]]
        mx_dict: dict[float, dict[str, ca.MX]] = {time: {} for time in full_grid}

        # add past state variables
        for time in pre_grid_states:
            self.pred_time = time
            x_past = self.add_opt_par(sys.initial_state)
            # add past states as optimization variables with fixed values so they can
            # be accessed by the first few steps, when there are lags
            mx_dict[time][sys.states.name] = self.add_opt_var(
                sys.states, lb=x_past, ub=x_past, guess=x_past
            )
            mx_dict[time][sys.initial_state.name] = x_past

        # add past inputs
        for time in pre_grid_inputs:
            self.pred_time = time
            d = sys.non_controlled_inputs
            mx_dict[time][d.name] = self.add_opt_par(d)
            u_past = self.add_opt_par(sys.last_control)
            mx_dict[time][sys.controls.name] = self.add_opt_var(
                sys.controls, lb=u_past, ub=u_past, guess=u_past
            )
            mx_dict[time][sys.last_control.name] = u_past

            # admm quantities (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==ca_room_model:[13:41]
==simulation_model:[14:42]
        CasadiInput(
            name="mDot_0",
            value=0.0225,
            unit="K",
            description="Air mass flow into zone 0",
        ),
        # disturbances
        CasadiInput(
            name="d_0", value=150, unit="W", description="Heat load into zone 0"
        ),
        CasadiInput(
            name="T_in", value=290.15, unit="K", description="Inflow air temperature"
        ),
        # settings
        CasadiInput(
            name="T_0_set",
            value=294.15,
            unit="K",
            description="Set point for T_0 in objective function",
        ),
        CasadiInput(
            name="T_0_upper",
            value=294.15,
            unit="K",
            description="Upper boundary (soft) for T_0.",
        ),
    ]
 (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==simple_mpc_gpr:[132:161]
==simple_mpc_nn:[115:144]
        temperature = mpc_results["variable"]["T"] - 273.15
        plot_mpc(
            series=temperature,
            ax=ax[0],
            plot_actual_values=True,
            plot_predictions=True,
        )
        ax[0].axhline(ub - 273.15, color="grey", linestyle="--", label="upper boundary")
        plot_mpc(
            series=mpc_results["variable"]["mDot"],
            ax=ax[1],
            plot_actual_values=True,
            plot_predictions=True,
        )

        ax[1].legend()
        ax[0].legend()
        ax[0].set_ylabel("$T_{room}$ / °C")
        ax[1].set_ylabel("$\dot{m}_{air}$ / kg/s")
        ax[1].set_xlabel("simulation time / s")
        ax[1].set_ylim([0, 0.06])
        ax[1].set_xlim([0, until])
        plt.show()

    return results


if __name__ == "__main__":
    run_example(with_plots=True, until=3600) (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==simple_mpc_linreg:[133:162]
==simple_mpc_nn:[142:171]
        temperature = mpc_results["variable"]["T"] - 273.15
        plot_mpc(
            series=temperature,
            ax=ax[0],
            plot_actual_values=True,
            plot_predictions=True,
        )
        ax[0].axhline(ub - 273.15, color="grey", linestyle="--", label="upper boundary")
        plot_mpc(
            series=mpc_results["variable"]["mDot"],
            ax=ax[1],
            plot_actual_values=True,
            plot_predictions=True,
        )

        ax[1].legend()
        ax[0].legend()
        ax[0].set_ylabel("$T_{room}$ / °C")
        ax[1].set_ylabel("$\dot{m}_{air}$ / kg/s")
        ax[1].set_xlabel("simulation time / s")
        ax[1].set_ylim([0, 0.06])
        ax[1].set_xlim([0, until])
        plt.show()

    return results


if __name__ == "__main__":
    run_example(with_plots=True, until=3600) (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==model:[49:75]
==simple_mpc_multiple_shooting:[64:90]
    ]

    parameters: List[CasadiParameter] = [
        CasadiParameter(
            name="cp",
            value=1000,
            unit="J/kg*K",
            description="thermal capacity of the air",
        ),
        CasadiParameter(
            name="C", value=100000, unit="J/K", description="thermal capacity of zone"
        ),
        CasadiParameter(
            name="s_T",
            value=1,
            unit="-",
            description="Weight for T in constraint function",
        ),
        CasadiParameter(
            name="r_mDot",
            value=1,
            unit="-",
            description="Weight for mDot in objective function",
        ),
    ]
    outputs: List[CasadiOutput] = [ (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==agentlib_mpc.optimization_backends.casadi_.basic:[344:392]
==agentlib_mpc.optimization_backends.casadi_.mhe:[365:413]
        d = self.options.collocation_order
        polynomial = self.options.collocation_method

        # Get collocation points
        tau_root = np.append(0, ca.collocation_points(d, polynomial))

        # Coefficients of the collocation equation
        C = np.zeros((d + 1, d + 1))

        # Coefficients of the continuity equation
        D = np.zeros(d + 1)

        # Coefficients of the quadrature function
        B = np.zeros(d + 1)

        # Construct polynomial basis
        for j in range(d + 1):
            # Construct Lagrange polynomials to get the polynomial basis at
            # the collocation point
            p = np.poly1d([1])
            for r in range(d + 1):
                if r != j:
                    p *= np.poly1d([1, -tau_root[r]]) / (tau_root[j] - tau_root[r])

            # Evaluate the polynomial at the final time to get the
            # coefficients of the continuity equation
            D[j] = p(1.0)

            # Evaluate the time derivative of the polynomial at all collocation
            # points to get the coefficients of the continuity equation
            pder = np.polyder(p)
            for r in range(d + 1):
                C[j, r] = pder(tau_root[r])

            # Evaluate the integral of the polynomial to get the coefficients
            # of the quadrature function
            pint = np.polyint(p)
            B[j] = pint(1.0)

        return CollocationMatrices(
            order=d,
            root=tau_root,
            B=B,
            C=C,
            D=D,
        )

 (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==ca_room_model:[57:81]
==simulation_model:[58:82]
        CasadiParameter(
            name="cp",
            value=1000,
            unit="J/kg*K",
            description="thermal capacity of the air",
        ),
        CasadiParameter(
            name="c_0",
            value=100000,
            unit="J/kg*K",
            description="thermal capacity of zone 0",
        ),
        CasadiParameter(
            name="q_T_0",
            value=1,
            unit="-",
            description="Weight for T_0 in objective function",
        ),
        CasadiParameter(
            name="s_T_0",
            value=1,
            unit="-",
            description="Weight for T_0 in constraint function",
        ), (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==simple_mpc_linreg:[9:39]
==simple_mpc_nn:[7:37]
logger = logging.getLogger(__name__)

# script variables
ub = 295.15

ENV_CONFIG = {"rt": False, "factor": 0.01, "t_sample": 60}


def agent_configs(ml_model_path: str) -> list[dict]:
    agent_mpc = {
        "id": "myMPCAgent",
        "modules": [
            {"module_id": "Ag1Com", "type": "local_broadcast"},
            {
                "module_id": "myMPC",
                "type": "agentlib_mpc.mpc",
                "optimization_backend": {
                    "type": "casadi_ml",
                    "model": {
                        "type": {
                            "file": "model.py",
                            "class_name": "DataDrivenModel",
                        },
                        "ml_model_sources": [ml_model_path],
                    },
                    "discretization_options": {
                        "method": "multiple_shooting",
                    },
                    "results_file": "results//opt.csv",
                    "overwrite_result_file": True, (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==mixed_integer.mixed_integer_mpc:[68:93]
==model:[139:164]
        CasadiState(
            name="T_slack",
            value=0,
            unit="K",
            description="Slack variable of temperature of zone",
        ),
    ]

    parameters: List[CasadiParameter] = [
        CasadiParameter(
            name="cp",
            value=1000,
            unit="J/kg*K",
            description="thermal capacity of the air",
        ),
        CasadiParameter(
            name="C", value=100000, unit="J/K", description="thermal capacity of zone"
        ),
        CasadiParameter(
            name="s_T",
            value=1,
            unit="-",
            description="Weight for T in constraint function",
        ),
        CasadiParameter( (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==mixed_integer.mixed_integer_mpc:[44:74]
==model:[18:48]
        ),
        # disturbances
        CasadiInput(
            name="load", value=150, unit="W", description="Heat " "load into zone"
        ),
        CasadiInput(
            name="T_in", value=290.15, unit="K", description="Inflow air temperature"
        ),
        # settings
        CasadiInput(
            name="T_upper",
            value=294.15,
            unit="K",
            description="Upper boundary (soft) for T.",
        ),
    ]

    states: List[CasadiState] = [
        # differential
        CasadiState(
            name="T", value=293.15, unit="K", description="Temperature of zone"
        ),
        # algebraic
        # slack variables
        CasadiState(
            name="T_slack",
            value=0,
            unit="K",
            description="Slack variable of temperature of zone",
        ), (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==model:[49:73]
==simple_mpc_time_dependent_obj:[65:89]
    ]

    parameters: List[CasadiParameter] = [
        CasadiParameter(
            name="cp",
            value=1000,
            unit="J/kg*K",
            description="thermal capacity of the air",
        ),
        CasadiParameter(
            name="C", value=100000, unit="J/K", description="thermal capacity of zone"
        ),
        CasadiParameter(
            name="s_T",
            value=1,
            unit="-",
            description="Weight for T in constraint function",
        ),
        CasadiParameter(
            name="r_mDot",
            value=1,
            unit="-",
            description="Weight for mDot in objective function",
        ), (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==agentlib_mpc.optimization_backends.casadi_.full:[78:115]
==agentlib_mpc.optimization_backends.casadi_.minlp:[99:136]
            xk_end, constraints = self._collocation_inner_loop(
                collocation=collocation_matrices,
                state_at_beginning=xk,
                states=sys.states,
                opt_vars=opt_vars_inside_inner,
                opt_pars=opt_pars_inside_inner,
                const=constant_over_inner,
            )

            # increment loop counter and time
            self.k += 1
            self.pred_time = ts * self.k

            # New NLP variable for differential state at end of interval
            xk = self.add_opt_var(sys.states)

            # Add continuity constraint
            self.add_constraint(xk - xk_end, gap_closing=True)

            # add collocation constraints later for fatrop
            for constraint in constraints:
                self.add_constraint(*constraint)


class MultipleShooting(basic.MultipleShooting):
    def _discretize(self, sys: CasadiMINLPSystem):
        """
        Defines a multiple shooting discretization
        """
        vars_dict = {sys.states.name: {}}
        n = self.options.prediction_horizon
        ts = self.options.time_step
        opts = {"t0": 0, "tf": ts}
        # Initial State
        x0 = self.add_opt_par(sys.initial_state)
        xk = self.add_opt_var(sys.states, lb=x0, ub=x0, guess=x0)
        vars_dict[sys.states.name][0] = xk (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==agentlib_mpc.optimization_backends.casadi_.mhe:[484:518]
==agentlib_mpc.utils.sampling:[109:143]
        if (target_grid.shape == source_grid.shape) and all(target_grid == source_grid):
            return list(values)
        values = np.array(values)

        # check requested portion of trajectory, whether the most recent value in the
        # source grid is older than the first value in the MHE trajectory
        if target_grid[0] >= source_grid[-1]:
            # return the last value of the trajectory if requested sample
            # starts out of range
            logger.warning(
                f"Latest value of source grid %s is older than "
                f"current time (%s. Returning latest value anyway.",
                source_grid[-1],
                current,
            )
            return [values[-1]] * target_grid_length

        # determine whether the target grid lies within the available source grid, and
        # how many entries to extrapolate on either side
        source_grid_oldest_time: float = source_grid[0]
        source_grid_newest_time: float = source_grid[-1]
        source_is_recent_enough: np.ndarray = target_grid < source_grid_newest_time
        source_is_old_enough: np.ndarray = target_grid > source_grid_oldest_time
        number_of_missing_old_entries: int = target_grid_length - np.count_nonzero(
            source_is_old_enough
        )
        number_of_missing_new_entries: int = target_grid_length - np.count_nonzero(
            source_is_recent_enough
        )
        # shorten target interpolation grid by extra points that go above or below
        # available data range
        target_grid = target_grid[source_is_recent_enough * source_is_old_enough]

        # interpolate data to match new grid (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==examples.three_zone_datadriven_admm.training_direct:[157:181]
==simulation_model:[143:167]
        self.T_CCA_0.ode = self.cp * self.mDot * (self.T_v - self.T_CCA_0) / (
            self.c_BKA * self.ABKA
        ) + self.hBKA / self.c_BKA * (self.T_air - self.T_CCA_0)
        self.T_wall.ode = (
            self.hw / self.cw * (self.T_air - self.T_wall)
            + self.hw / self.cw * (self.T_amb - self.T_wall)
            + self.Q_rad / self.cw
        )
        self.T_air.ode = (
            self.hw * self.Aw / (self.cl * self.mRoom) * (self.T_wall - self.T_air)
            + self.hBKA
            * self.ABKA
            / (self.cl * self.mRoom)
            * (self.T_CCA_0 - self.T_air)
            + self.d / (self.cl * self.mRoom)
            + (self.T_ahu - self.T_air) * self.mDot_ahu / self.mRoom
            + self.hFenster
            * self.AFenster
            / (self.cl * self.mRoom)
            * (self.T_amb - self.T_air)
            + self.Q_rad * self.AFenster / (self.cl * self.mRoom)
        )

        # Define ae (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==admm_example_coordinator_multiprocessing:[38:75]
==admm_example_multiprocessing:[40:78]
    import matplotlib.pyplot as plt
    from agentlib_mpc.utils.analysis import admm_at_time_step

    res_sim = results["Simulation"]["simulator"]
    start_time = res_sim.index[0]
    res_sim.index = res_sim.index - start_time
    mpc_room_results = results["CooledRoom"]["admm_module"]

    room_res = admm_at_time_step(
        data=mpc_room_results,
        time_step=start_pred,
        iteration=-1,
        index_offset=start_time,
    )

    fig, ax = plt.subplots(2, 1)
    ax[0].axhline(294.55, label="reference value")
    ax[0].plot(res_sim["T_0_out"], label="temperature")
    ax[0].plot(room_res["variable"]["T_0"], label="temperature prediction")
    ax[1].plot(res_sim["mDot_0"], label="air mass flow")
    ax[1].plot(room_res["variable"]["mDot_0"].dropna(), label="air flow prediction")
    ax[1].legend()
    ax[0].legend()
    plt.show()


def run_example(
    until=3000,
    with_plots=True,
    start_pred=0,
    log_level: int = logging.INFO,
    cleanup=True,
):
    # Set the log-level
    logging.basicConfig(level=log_level)

    # Change the working directly so that relative paths work (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==simple_mpc_linreg:[136:162]
==with_change_control_penalty:[201:227]
            ax=ax[0],
            plot_actual_values=True,
            plot_predictions=True,
        )
        ax[0].axhline(ub - 273.15, color="grey", linestyle="--", label="upper boundary")
        plot_mpc(
            series=mpc_results["variable"]["mDot"],
            ax=ax[1],
            plot_actual_values=True,
            plot_predictions=True,
        )

        ax[1].legend()
        ax[0].legend()
        ax[0].set_ylabel("$T_{room}$ / °C")
        ax[1].set_ylabel("$\dot{m}_{air}$ / kg/s")
        ax[1].set_xlabel("simulation time / s")
        ax[1].set_ylim([0, 0.06])
        ax[1].set_xlim([0, until])
        plt.show()

    return results


if __name__ == "__main__":
    run_example(with_plots=True, until=3600) (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==agentlib_mpc.optimization_backends.casadi_.casadi_admm_ml:[326:355]
==agentlib_mpc.optimization_backends.casadi_.casadi_ml:[175:204]
        self.pred_time = 0
        for time in prediction_grid[1:]:
            self.pred_time = time
            mx_dict[time][sys.states.name] = self.add_opt_var(sys.states)
        self.pred_time += ts
        mx_dict[self.pred_time] = {sys.states.name: self.add_opt_var(sys.states)}

        all_quantities = sys.all_system_quantities()
        # add constraints and create the objective function for all stages
        for time in prediction_grid:
            stage_mx = mx_dict[time]

            # add penalty on control change between intervals
            u_prev = mx_dict[time - ts][sys.controls.name]
            uk = stage_mx[sys.controls.name]
            self.objective_function += ts * ca.dot(du_weights, (u_prev - uk) ** 2)

            # get stage arguments from current time step
            stage_arguments = {
                # variables
                sys.states.name: stage_mx[sys.states.name],
                sys.algebraics.name: stage_mx[sys.algebraics.name],
                sys.outputs.name: stage_mx[sys.outputs.name],
                # parameters
                sys.controls.name: stage_mx[sys.controls.name],
                sys.non_controlled_inputs.name: stage_mx[
                    sys.non_controlled_inputs.name
                ],
                sys.model_parameters.name: const_par, (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==training_linreg:[103:126]
==training_nn:[108:131]
            },
            {"type": "local", "subscriptions": ["Simulator", "PID"]},
        ],
    }

    # sample rate is at least 1, and maximum 10
    t_sample_sim = min(max(1, int(step_size) // 30), 10)
    simulator_config = {
        "id": "Simulator",
        "modules": [
            {
                "module_id": "simulator",
                "type": "simulator",
                "model": {
                    "type": {
                        "file": model.__file__,
                        "class_name": model.PhysicalModel.__name__,
                    },
                },
                "t_sample": t_sample_sim,
                "save_results": plot_results,
                "result_filename": "results//simulation_data.csv",
                "result_causalities": ["local", "input", "output"], (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==mixed_integer.mixed_integer_mpc:[182:203]
==with_change_control_penalty:[154:175]
            "states": [{"name": "T", "value": 298.16, "ub": 303.15, "lb": 288.15}],
        },
    ],
}
AGENT_SIM = {
    "id": "SimAgent",
    "modules": [
        {"module_id": "Ag1Com", "type": "local_broadcast"},
        {
            "module_id": "room",
            "type": "simulator",
            "model": {
                "type": {"file": __file__, "class_name": "MyCasadiModel"},
                "states": [{"name": "T", "value": 298.16}],
            },
            "t_sample": 10,
            "update_inputs_on_callback": False,
            "outputs": [
                {"name": "T_out", "value": 298, "alias": "T"},
            ],
            "inputs": [ (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==model:[22:48]
==simple_mpc_time_dependent_obj:[39:65]
        ),
        CasadiInput(
            name="T_in", value=290.15, unit="K", description="Inflow air temperature"
        ),
        # settings
        CasadiInput(
            name="T_upper",
            value=294.15,
            unit="K",
            description="Upper boundary (soft) for T.",
        ),
    ]

    states: List[CasadiState] = [
        # differential
        CasadiState(
            name="T", value=293.15, unit="K", description="Temperature of zone"
        ),
        # algebraic
        # slack variables
        CasadiState(
            name="T_slack",
            value=0,
            unit="K",
            description="Slack variable of temperature of zone",
        ), (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==simple_mpc_time_dependent_obj:[265:289]
==with_change_control_penalty:[199:222]
    plot_mpc(
        series=mpc_results["variable"]["T"] - 273.15,
        ax=ax[0],
        plot_actual_values=True,
        plot_predictions=True,
    )
    ax[0].axhline(ub - 273.15, color="grey", linestyle="--", label="upper boundary")
    plot_mpc(
        series=mpc_results["variable"]["mDot"],
        ax=ax[1],
        plot_actual_values=True,
        plot_predictions=True,
    )

    ax[1].legend()
    ax[0].legend()
    ax[0].set_ylabel("$T_{room}$ / °C")
    ax[1].set_ylabel("$\dot{m}_{air}$ / kg/s")
    ax[1].set_xlabel("simulation time / s")
    ax[1].set_ylim([0, 0.06])
    ax[1].set_xlim([0, until])
    plt.show()

 (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==models.room_model:[13:36]
==room_model:[6:29]
        CasadiInput(
            name="mDot",
            value=0.0225,
            unit="kg/s",
            description="Air mass flow into zone",
        ),
        # disturbances
        CasadiInput(name="d", value=150, unit="W", description="Heat load into zone"),
        CasadiInput(
            name="T_in", value=290.15, unit="K", description="Inflow air temperature"
        ),
        # settings
        CasadiInput(
            name="T_set",
            value=294.15,
            unit="K",
            description="Set point for T in objective function",
        ),
        CasadiInput(
            name="T_upper", value=294.15, unit="K", description="Upper boundary for T."
        ),
    ]
 (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==agentlib_mpc.optimization_backends.casadi_.casadi_admm_ml:[363:405]
==agentlib_mpc.optimization_backends.casadi_.casadi_ml:[205:235]
            }

            # collect stage arguments for lagged variables
            for lag, denotation_dict in self._lagged_input_names.items():
                for denotation, var_names in denotation_dict.items():
                    l_name = name_with_lag(denotation, lag)
                    mx_list = []
                    for v_name in var_names:
                        index = all_quantities[denotation].full_names.index(v_name)
                        mx_list.append(mx_dict[time - lag * ts][denotation][index])
                    stage_arguments[l_name] = ca.vertcat(*mx_list)

            # evaluate a stage, add path constraints, multiple shooting constraints
            # and add to the objective function
            stage_result = self._stage_function(**stage_arguments)
            self.add_constraint(
                stage_result["model_constraints"],
                lb=stage_result["lb_model_constraints"],
                ub=stage_result["ub_model_constraints"],
            )
            self.add_constraint(
                stage_result["next_states"] - mx_dict[time + ts][sys.states.name]
            )
            self.objective_function += stage_result["cost_function"] * ts

    def _construct_stage_function(self, system: CasadiADMMNNSystem):
        """
        Combine information from the model and the var_ref to create CasADi
        functions which describe the system dynamics and constraints at each
        stage of the optimization problem. Sets the stage function. It has
        all mpc variables as inputs, sorted by denotation (declared in
        self.declare_quantities) and outputs ode, cost function and 3 outputs
        per constraint (constraint, lb_constraint, ub_constraint).

        In the basic case, it has the form:
        CasadiFunction: ['x', 'z', 'u', 'y', 'd', 'p'] ->
            ['ode', 'cost_function', 'model_constraints',
            'ub_model_constraints', 'lb_model_constraints']

        Args:
            system
        """ (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==agentlib_mpc.optimization_backends.casadi_.basic:[495:519]
==agentlib_mpc.optimization_backends.casadi_.casadi_ml:[256:280]
        constraints = {"model_constraints": system.model_constraints}

        inputs = [
            q.full_symbolic
            for q in all_system_quantities.values()
            if q.use_in_stage_function
        ]
        inputs.append(system.time)
        input_denotations = [
            q.name
            for denotation, q in all_system_quantities.items()
            if q.use_in_stage_function
        ]
        input_denotations.append("__time")

        # aggregate constraints
        constraints_func = [c.function for c in constraints.values()]
        constraints_lb = [c.lb for c in constraints.values()]
        constraints_ub = [c.ub for c in constraints.values()]
        constraint_denotations = list(constraints.keys())
        constraint_lb_denotations = [LB_PREFIX + k for k in constraints]
        constraint_ub_denotations = [UB_PREFIX + k for k in constraints]

        # aggregate outputs (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==simple_mpc:[245:267]
==simple_mpc_nn:[145:166]
        ax=ax[0],
        plot_actual_values=True,
        plot_predictions=True,
    )
    ax[0].axhline(ub - 273.15, color="grey", linestyle="--", label="upper boundary")
    plot_mpc(
        series=mpc_results["variable"]["mDot"],
        ax=ax[1],
        plot_actual_values=True,
        plot_predictions=True,
    )

    ax[1].legend()
    ax[0].legend()
    ax[0].set_ylabel("$T_{room}$ / °C")
    ax[1].set_ylabel("$\dot{m}_{air}$ / kg/s")
    ax[1].set_xlabel("simulation time / s")
    ax[1].set_ylim([0, 0.06])
    ax[1].set_xlim([0, until])
    plt.show()

 (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==simple_mpc_gpr:[135:156]
==simple_mpc_multiple_shooting:[245:267]
        ax=ax[0],
        plot_actual_values=True,
        plot_predictions=True,
    )
    ax[0].axhline(ub - 273.15, color="grey", linestyle="--", label="upper boundary")
    plot_mpc(
        series=mpc_results["variable"]["mDot"],
        ax=ax[1],
        plot_actual_values=True,
        plot_predictions=True,
    )

    ax[1].legend()
    ax[0].legend()
    ax[0].set_ylabel("$T_{room}$ / °C")
    ax[1].set_ylabel("$\dot{m}_{air}$ / kg/s")
    ax[1].set_xlabel("simulation time / s")
    ax[1].set_ylim([0, 0.06])
    ax[1].set_xlim([0, until])
    plt.show()

 (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==simple_mpc_linreg:[136:157]
==simple_mpc_time_dependent_obj:[267:289]
        ax=ax[0],
        plot_actual_values=True,
        plot_predictions=True,
    )
    ax[0].axhline(ub - 273.15, color="grey", linestyle="--", label="upper boundary")
    plot_mpc(
        series=mpc_results["variable"]["mDot"],
        ax=ax[1],
        plot_actual_values=True,
        plot_predictions=True,
    )

    ax[1].legend()
    ax[0].legend()
    ax[0].set_ylabel("$T_{room}$ / °C")
    ax[1].set_ylabel("$\dot{m}_{air}$ / kg/s")
    ax[1].set_xlabel("simulation time / s")
    ax[1].set_ylim([0, 0.06])
    ax[1].set_xlim([0, until])
    plt.show()

 (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==agentlib_mpc.optimization_backends.casadi_.basic:[276:307]
==agentlib_mpc.optimization_backends.casadi_.mhe:[298:331]
        constants = {var.name: mx for var, mx in const.items()}

        # remember time at start of collocation loop
        start_time = self.pred_time

        # shorthands
        ts = self.options.time_step

        # State variables at collocation points
        state_collocation = []
        opt_vars_collocation = []
        opt_pars_collocation = []

        # add variables at collocation points
        for j in range(collocation.order):  # d is collocation order
            # set time
            self.pred_time = start_time + collocation.root[j + 1] * ts

            # differential state
            state_kj = self.add_opt_var(states, post_den=f"_{j}")
            state_collocation.append(state_kj)

            opt_vars_collocation.append({})
            for opt_var in opt_vars:
                var_kj = self.add_opt_var(opt_var, post_den=f"_{j}")
                opt_vars_collocation[-1].update({opt_var.name: var_kj})

            opt_pars_collocation.append({})
            for opt_par in opt_pars:
                par_kj = self.add_opt_par(opt_par, post_den=f"_{j}")
                opt_pars_collocation[-1].update({opt_par.name: par_kj}) (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==mixed_integer.mixed_integer_mpc:[74:93]
==model:[49:68]
    ]

    parameters: List[CasadiParameter] = [
        CasadiParameter(
            name="cp",
            value=1000,
            unit="J/kg*K",
            description="thermal capacity of the air",
        ),
        CasadiParameter(
            name="C", value=100000, unit="J/K", description="thermal capacity of zone"
        ),
        CasadiParameter(
            name="s_T",
            value=1,
            unit="-",
            description="Weight for T in constraint function",
        ),
        CasadiParameter( (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==agentlib_mpc.optimization_backends.casadi_.casadi_admm_ml:[406:428]
==agentlib_mpc.optimization_backends.casadi_.mhe:[217:239]
        constraints = {"model_constraints": system.model_constraints}

        inputs = [
            q.full_symbolic
            for q in all_system_quantities.values()
            if q.use_in_stage_function
        ]
        input_denotations = [
            q.name
            for denotation, q in all_system_quantities.items()
            if q.use_in_stage_function
        ]

        # aggregate constraints
        constraints_func = [c.function for c in constraints.values()]
        constraints_lb = [c.lb for c in constraints.values()]
        constraints_ub = [c.ub for c in constraints.values()]
        constraint_denotations = list(constraints.keys())
        constraint_lb_denotations = [LB_PREFIX + k for k in constraints]
        constraint_ub_denotations = [UB_PREFIX + k for k in constraints]

        # aggregate outputs (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==model:[0:21]
==model:[0:21]
from typing import List

from agentlib_mpc.models.casadi_model import (
    CasadiModelConfig,
    CasadiInput,
    CasadiState,
    CasadiParameter,
    CasadiOutput,
    CasadiModel,
)
from agentlib_mpc.models.casadi_ml_model import CasadiMLModel, CasadiMLModelConfig


class PhysicalModelConfig(CasadiModelConfig):
    inputs: List[CasadiInput] = [
        # controls
        CasadiInput(
            name="mDot", value=0.0225, unit="K", description="Air mass flow into zone"
        ),
        # disturbances
        CasadiInput( (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==simple_mpc_linreg:[2:26]
==simple_mpc_nn:[1:25]
from pathlib import Path
import matplotlib.pyplot as plt
import os

from agentlib.utils.multi_agent_system import LocalMASAgency
from agentlib_mpc.utils.plotting.mpc import plot_mpc

logger = logging.getLogger(__name__)

# script variables
ub = 295.15

ENV_CONFIG = {"rt": False, "factor": 0.01, "t_sample": 60}


def agent_configs(ml_model_path: str) -> list[dict]:
    agent_mpc = {
        "id": "myMPCAgent",
        "modules": [
            {"module_id": "Ag1Com", "type": "local_broadcast"},
            {
                "module_id": "myMPC",
                "type": "agentlib_mpc.mpc",
                "optimization_backend": { (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==model:[0:21]
==model:[0:21]
from typing import List

from agentlib_mpc.models.casadi_model import (
    CasadiModelConfig,
    CasadiInput,
    CasadiState,
    CasadiParameter,
    CasadiOutput,
    CasadiModel,
)
from agentlib_mpc.models.casadi_ml_model import CasadiMLModel, CasadiMLModelConfig


class PhysicalModelConfig(CasadiModelConfig):
    inputs: List[CasadiInput] = [
        # controls
        CasadiInput(
            name="mDot", value=0.0225, unit="K", description="Air mass flow into zone"
        ),
        # disturbances
        CasadiInput( (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==mixed_integer.mixed_integer_mpc_cia:[181:197]
==simple_mpc:[169:185]
        },
    ],
}
AGENT_SIM = {
    "id": "SimAgent",
    "modules": [
        {"module_id": "Ag1Com", "type": "local_broadcast"},
        {
            "module_id": "room",
            "type": "simulator",
            "model": {
                "type": {"file": __file__, "class_name": "MyCasadiModel"},
                "states": [{"name": "T", "value": 298.16}],
            },
            "t_sample": 10,
            "update_inputs_on_callback": False, (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==mixed_integer.mixed_integer_mpc:[183:199]
==simple_mpc_multiple_shooting:[169:185]
        },
    ],
}
AGENT_SIM = {
    "id": "SimAgent",
    "modules": [
        {"module_id": "Ag1Com", "type": "local_broadcast"},
        {
            "module_id": "room",
            "type": "simulator",
            "model": {
                "type": {"file": __file__, "class_name": "MyCasadiModel"},
                "states": [{"name": "T", "value": 298.16}],
            },
            "t_sample": 10,
            "update_inputs_on_callback": False, (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==simple_mpc_time_dependent_obj:[191:207]
==with_change_control_penalty:[155:171]
        },
    ],
}
AGENT_SIM = {
    "id": "SimAgent",
    "modules": [
        {"module_id": "Ag1Com", "type": "local_broadcast"},
        {
            "module_id": "room",
            "type": "simulator",
            "model": {
                "type": {"file": __file__, "class_name": "MyCasadiModel"},
                "states": [{"name": "T", "value": 298.16}],
            },
            "t_sample": 10,
            "update_inputs_on_callback": False, (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==agentlib_mpc.optimization_backends.casadi_.admm:[157:182]
==agentlib_mpc.optimization_backends.casadi_.minlp:[98:123]
            }
            xk_end, constraints = self._collocation_inner_loop(
                collocation=collocation_matrices,
                state_at_beginning=xk,
                states=sys.states,
                opt_vars=opt_vars_inside_inner,
                opt_pars=opt_pars_inside_inner,
                const=constant_over_inner,
            )

            # increment loop counter and time
            self.k += 1
            self.pred_time = ts * self.k

            # New NLP variable for differential state at end of interval
            xk = self.add_opt_var(sys.states)

            # Add continuity constraint
            self.add_constraint(xk - xk_end, gap_closing=True)

            # add collocation constraints later for fatrop
            for constraint in constraints:
                self.add_constraint(*constraint)

 (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==Room_model:[61:76]
==simulation_model:[103:118]
        CasadiParameter(
            name="q_T",
            value=1,
            unit="-",
            description="Weight for T in objective function",
        ),
        CasadiParameter(
            name="s_T",
            value=1,
            unit="-",
            description="Weight for T in objective function",
        ),
    ]
    outputs: List[CasadiOutput] = [
        CasadiOutput( (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==simple_mpc_multiple_shooting:[75:90]
==simple_mpc_with_time_variant_inputs:[196:211]
        ),
        CasadiParameter(
            name="s_T",
            value=1,
            unit="-",
            description="Weight for T in constraint function",
        ),
        CasadiParameter(
            name="r_mDot",
            value=1,
            unit="-",
            description="Weight for mDot in objective function",
        ),
    ]
    outputs: List[CasadiOutput] = [ (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==model:[118:137]
==simple_mpc_time_dependent_obj:[39:59]
        ),
        CasadiInput(
            name="T_in", value=290.15, unit="K", description="Inflow air temperature"
        ),
        # settings
        CasadiInput(
            name="T_upper",
            value=294.15,
            unit="K",
            description="Upper boundary (soft) for T.",
        ),
    ]

    states: List[CasadiState] = [
        # differential
        CasadiState(
            name="T", value=293.15, unit="K", description="Temperature of zone"
        ),
        # algebraic
        # slack variables (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==agentlib_mpc.optimization_backends.casadi_.admm:[86:106]
==agentlib_mpc.optimization_backends.casadi_.casadi_admm_ml:[181:202]
        )

        # add admm terms to objective function
        admm_objective = 0
        rho = self.penalty_factor.full_symbolic[0]
        for i in range(len(var_ref.couplings)):
            admm_in = self.global_couplings.full_symbolic[i]
            admm_out = self.local_couplings.full_symbolic[i]
            admm_lam = self.multipliers.full_symbolic[i]
            admm_objective += admm_lam * admm_out + rho / 2 * (admm_in - admm_out) ** 2

        for i in range(len(var_ref.exchange)):
            admm_in = self.exchange_diff.full_symbolic[i]
            admm_out = self.local_exchange.full_symbolic[i]
            admm_lam = self.exchange_multipliers.full_symbolic[i]
            admm_objective += admm_lam * admm_out + rho / 2 * (admm_in - admm_out) ** 2

        self.cost_function += admm_objective

    @property
    def variables(self) -> list[OptimizationVariable]: (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==agentlib_mpc.optimization_backends.casadi_.admm:[158:182]
==agentlib_mpc.optimization_backends.casadi_.full:[78:102]
            xk_end, constraints = self._collocation_inner_loop(
                collocation=collocation_matrices,
                state_at_beginning=xk,
                states=sys.states,
                opt_vars=opt_vars_inside_inner,
                opt_pars=opt_pars_inside_inner,
                const=constant_over_inner,
            )

            # increment loop counter and time
            self.k += 1
            self.pred_time = ts * self.k

            # New NLP variable for differential state at end of interval
            xk = self.add_opt_var(sys.states)

            # Add continuity constraint
            self.add_constraint(xk - xk_end, gap_closing=True)

            # add collocation constraints later for fatrop
            for constraint in constraints:
                self.add_constraint(*constraint)

 (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==agentlib_mpc.optimization_backends.casadi_.admm:[309:325]
==agentlib_mpc.optimization_backends.casadi_.basic:[458:492]
            sys.non_controlled_inputs.full_symbolic,
            sys.model_parameters.full_symbolic,
            sys.algebraics.full_symbolic,
            sys.outputs.full_symbolic,
        )
        integrator_ode = {"x": x, "p": p, "ode": ode}
        if integrator == Integrators.euler:
            xk_end = x + ode * opts["tf"]
            opt_integrator = ca.Function(
                "system", [x, p], [xk_end], ["x0", "p"], ["xf"]
            )
        else:  # rk, cvodes
            opt_integrator = ca.integrator("system", integrator, integrator_ode, opts)
        return opt_integrator

 (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==examples.three_zone_datadriven_admm.three_zone_util:[9:25]
==examples.three_zone_datadriven_admm.training_direct:[20:35]
        contents = f.readlines()
    contents = [x.strip() for x in contents]
    contents = contents[32:]

    res_dict = {}
    title = contents[0].split()
    contents = contents[2:]
    for i in range(len(title)):
        current_list = []
        for j in range(1, len(contents)):
            current_content = contents[j].split()
            current_list.append(float(current_content[i]))
        res_dict.update({title[i]: current_list})

    weather = pd.DataFrame(res_dict)
    weather = weather.iloc[23:] (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==admm_example_coordinator:[63:91]
==admm_example_local:[52:80]
    ax[1].legend()
    ax[0].legend()
    plt.show()


def run_example(
    until=3000,
    with_plots=True,
    start_pred=0,
    log_level=logging.INFO,
    cleanup=True,
    testing: bool = False,
):
    # Set the log-level
    logging.basicConfig(level=log_level)

    # Change the working directly so that relative paths work
    os.chdir(os.path.abspath(os.path.dirname(__file__)))

    conf_dicts = []
    for conf in agent_configs:
        with open(conf) as f:
            conf_dict = json.load(f)
        modules = conf_dict["modules"]
        for i, mod in enumerate(modules):
            if isinstance(mod, str):
                with open(mod) as f:
                    mod = json.load(f) (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==mixed_integer.mixed_integer_mpc:[204:225]
==with_change_control_penalty:[176:197]
            ],
        },
    ],
}


def run_example(with_plots=True, log_level=logging.INFO, until=10000):
    # Change the working directly so that relative paths work
    os.chdir(Path(__file__).parent)

    # Set the log-level
    logging.basicConfig(level=log_level)
    mas = LocalMASAgency(
        agent_configs=[AGENT_MPC, AGENT_SIM], env=ENV_CONFIG, variable_logging=True
    )
    mas.run(until=until)
    results = mas.get_results()
    if with_plots:
        import matplotlib.pyplot as plt
        from agentlib_mpc.utils.plotting.mpc import plot_mpc
 (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==model:[83:106]
==simple_mpc_multiple_shooting:[99:123]
        self.T.ode = (
            self.cp * self.mDot / self.C * (self.T_in - self.T) + self.load / self.C
        )

        # Define ae
        self.T_out.alg = self.T  # math operation to get the symbolic variable

        # Constraints: List[(lower bound, function, upper bound)]
        self.constraints = [
            # soft constraints
            (0, self.T + self.T_slack, self.T_upper),
        ]

        # Objective function
        objective = sum(
            [
                self.r_mDot * self.mDot,
                self.s_T * self.T_slack**2,
            ]
        )

        return objective

 (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==agentlib_mpc.optimization_backends.casadi_.full:[151:168]
==agentlib_mpc.optimization_backends.casadi_.minlp:[164:180]
            )
            xk_end = fk["xf"]
            # calculate model constraint
            self.k += 1
            self.pred_time = ts * self.k
            xk = self.add_opt_var(sys.states)
            vars_dict[sys.states.name][self.k] = xk
            self.add_constraint(xk - xk_end, gap_closing=True)
            self.add_constraint(
                stage["model_constraints"],
                lb=stage["lb_model_constraints"],
                ub=stage["ub_model_constraints"],
            )
            self.objective_function += stage["cost_function"] * ts

 (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==examples.three_zone_datadriven_admm.training_direct:[133:146]
==simulation_model:[103:116]
        CasadiParameter(
            name="q_T",
            value=1,
            unit="-",
            description="Weight for T in objective function",
        ),
        CasadiParameter(
            name="s_T",
            value=1,
            unit="-",
            description="Weight for T in objective function",
        ),
    ] (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==training_gpr:[189:204]
==training_linreg:[183:198]
    logging.basicConfig(level=logging.INFO)
    mas = LocalMASAgency(
        agent_configs=configs(
            training_time=training_time, plot_results=plot_results, step_size=step_size
        ),
        env=env_config,
        variable_logging=False,
    )
    mas.run(until=training_time + 100)
    if plot_results:
        results = mas.get_results(cleanup=True)
        plot(results)


if __name__ == "__main__": (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==training_gpr:[88:102]
==training_linreg:[83:97]
                "inputs": [
                    {"name": "mDot", "value": 0.0225, "source": "PID"},
                    {"name": "load", "value": 30, "source": "Simulator"},
                    {"name": "T_in", "value": 290.15},
                ],
                "outputs": [{"name": "T", "value": 273.15 + 22}],
                # the lags here are not needed, but we have them to validate the code
                "lags": {"load": 2, "T": 2, "mDot": 3},
                "output_types": {"T": "difference"},
                "interpolations": {"mDot": "mean_over_interval"},
                "train_share": 0.6,
                "validation_share": 0.2,
                "test_share": 0.2,
                "retrain_delay": training_time, (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==predictor:[36:51]
==simple_mpc_with_time_variant_inputs:[60:74]
        ),
    ]

    parameters: al.AgentVariables = [
        al.AgentVariable(
            name="sampling_time", value=10, description="Sampling time for prediction."
        ),
        al.AgentVariable(
            name="prediction_length",
            value=10,
            description="Number of sampling points for prediction.",
        ),
        al.AgentVariable(
            name="update_interval", (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==simple_mpc_with_time_variant_inputs:[173:186]
==simulation_model:[51:65]
            value=0,
            unit="K",
            description="Slack variable of temperature of zone 0",
        ),
    ]

    parameters: List[CasadiParameter] = [
        CasadiParameter(
            name="cp",
            value=1000,
            unit="J/kg*K",
            description="thermal capacity of the air",
        ),
        CasadiParameter( (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==simple_mpc:[145:158]
==simple_mpc_gpr:[40:53]
                },
                "time_step": 300,
                "prediction_horizon": 15,
                "parameters": [
                    {"name": "s_T", "value": 3},
                    {"name": "r_mDot", "value": 1},
                ],
                "inputs": [
                    {"name": "T_in", "value": 290.15},
                    {"name": "load", "value": 150},
                    {"name": "T_upper", "value": ub},
                ],
                "controls": [{"name": "mDot", "value": 0.02, "ub": 0.05, "lb": 0}], (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==mhe_example:[113:126]
==simple_mpc_multiple_shooting:[76:89]
        CasadiParameter(
            name="s_T",
            value=1,
            unit="-",
            description="Weight for T in constraint function",
        ),
        CasadiParameter(
            name="r_mDot",
            value=1,
            unit="-",
            description="Weight for mDot in objective function",
        ),
    ] (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==simple_mpc_linreg:[40:53]
==simple_mpc_multiple_shooting:[145:158]
            },
            "time_step": 300,
            "prediction_horizon": 15,
            "parameters": [
                {"name": "s_T", "value": 3},
                {"name": "r_mDot", "value": 1},
            ],
            "inputs": [
                {"name": "T_in", "value": 290.15},
                {"name": "load", "value": 150},
                {"name": "T_upper", "value": ub},
            ],
            "controls": [{"name": "mDot", "value": 0.02, "ub": 0.05, "lb": 0}], (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==simple_mpc_time_dependent_obj:[76:89]
==simple_mpc_with_time_variant_inputs:[196:209]
        ),
        CasadiParameter(
            name="s_T",
            value=1,
            unit="-",
            description="Weight for T in constraint function",
        ),
        CasadiParameter(
            name="r_mDot",
            value=1,
            unit="-",
            description="Weight for mDot in objective function",
        ), (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==simple_mpc_multiple_shooting:[120:136]
==simple_mpc_time_dependent_obj:[139:155]
        return objective


ENV_CONFIG = {"rt": False, "factor": 0.01, "t_sample": 60}

AGENT_MPC = {
    "id": "myMPCAgent",
    "modules": [
        {"module_id": "Ag1Com", "type": "local_broadcast"},
        {
            "module_id": "myMPC",
            "type": "agentlib_mpc.mpc",
            "optimization_backend": {
                "type": "casadi",
                "model": {"type": {"file": __file__, "class_name": "MyCasadiModel"}},
                "discretization_options": { (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==admm_4rooms_main:[54:75]
==admm_4rooms_main_coord:[52:73]
        fig, ax = plt.subplots(2, 1)
        ax[1].set_ylim([0, 0.05])
        ax[0].axhline(296, label="reference value")

        for i in range(1, 5):
            sim_res = results["Simulation"][f"room_{i}"]
            ax[0].plot(sim_res["T_out"], label=f"temperature_{i}")
            ax[1].plot(sim_res["mDot"], label=f"mDot_{i}")

        # ax[1].plot(res_sim["mDot"], label="air mass flow")
        # ax[1].legend()
        # ax[0].legend()
        plt.show()

    return results


if __name__ == "__main__":
    run_example(
        with_plots=True,
        until=1800, (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==agentlib_mpc.optimization_backends.casadi_.casadi_ml:[83:95]
==agentlib_mpc.optimization_backends.casadi_.full:[25:38]
            variables=model.get_inputs(var_ref.controls),
            ref_list=var_ref.controls,
            use_in_stage_function=False,
            assert_complete=True,
        )
        self.r_del_u = OptimizationParameter.declare(
            denotation="r_del_u",
            variables=[CasadiParameter(name=r_del_u) for r_del_u in var_ref.r_del_u],
            ref_list=var_ref.r_del_u,
            use_in_stage_function=False,
            assert_complete=True,
        )
 (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==agentlib_mpc.optimization_backends.casadi_.basic:[192:205]
==agentlib_mpc.optimization_backends.casadi_.casadi_ml:[256:269]
        constraints = {"model_constraints": system.model_constraints}

        inputs = [
            q.full_symbolic
            for q in all_system_quantities.values()
            if q.use_in_stage_function
        ]
        inputs.append(system.time)
        input_denotations = [
            q.name
            for denotation, q in all_system_quantities.items()
            if q.use_in_stage_function
        ] (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==simple_mpc_gpr:[120:132]
==simple_mpc_multiple_shooting:[230:243]
        fig, ax = plt.subplots(2, 1, sharex=True)
        t_sim = sim_res["T_out"]
        t_sample = t_sim.index[1] - t_sim.index[0]
        aie_kh = (t_sim - ub).abs().sum() * t_sample / 3600
        energy_cost_kWh = (
            (sim_res["mDot"] * (sim_res["T_out"] - sim_res["T_in"])).sum()
            * t_sample
            * 1
            / 3600
        )  # cp is 1
        print(f"Absoulute integral error: {aie_kh} Kh.")
        print(f"Cooling energy used: {energy_cost_kWh} kWh.") (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==mhe_example:[260:272]
==simple_mpc_time_dependent_obj:[190:202]
                ],
            },
        ],
    }
    AGENT_SIM = {
        "id": "SimAgent",
        "modules": [
            {"module_id": "Ag1Com", "type": "local_broadcast"},
            {
                "module_id": "room",
                "type": "simulator",
                "model": { (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==mhe_example:[113:125]
==simple_mpc_time_dependent_obj:[77:89]
        CasadiParameter(
            name="s_T",
            value=1,
            unit="-",
            description="Weight for T in constraint function",
        ),
        CasadiParameter(
            name="r_mDot",
            value=1,
            unit="-",
            description="Weight for mDot in objective function",
        ), (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==simple_mpc_linreg:[121:133]
==simple_mpc_time_dependent_obj:[252:265]
        fig, ax = plt.subplots(2, 1, sharex=True)
        t_sim = sim_res["T_out"]
        t_sample = t_sim.index[1] - t_sim.index[0]
        aie_kh = (t_sim - ub).abs().sum() * t_sample / 3600
        energy_cost_kWh = (
            (sim_res["mDot"] * (sim_res["T_out"] - sim_res["T_in"])).sum()
            * t_sample
            * 1
            / 3600
        )  # cp is 1
        print(f"Absoulute integral error: {aie_kh} Kh.")
        print(f"Cooling energy used: {energy_cost_kWh} kWh.") (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==simple_mpc_time_dependent_obj:[208:228]
==with_change_control_penalty:[171:189]
            "outputs": [
                {"name": "T_out", "value": 298, "alias": "T"},
            ],
            "inputs": [
                {"name": "mDot", "value": 0.02, "alias": "mDot"},
            ],
        },
    ],
}


def run_example(with_plots=True, log_level=logging.INFO, until=10000):
    # Change the working directly so that relative paths work
    os.chdir(Path(__file__).parent)

    # Set the log-level
    logging.basicConfig(level=log_level)
    mas = LocalMASAgency( (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==simple_mpc_time_dependent_obj:[139:154]
==with_change_control_penalty:[112:127]
        return objective


ENV_CONFIG = {"rt": False, "factor": 0.01, "t_sample": 60}

AGENT_MPC = {
    "id": "myMPCAgent",
    "modules": [
        {"module_id": "Ag1Com", "type": "local_broadcast"},
        {
            "module_id": "myMPC",
            "type": "agentlib_mpc.mpc",
            "optimization_backend": {
                "type": "casadi",
                "model": {"type": {"file": __file__, "class_name": "MyCasadiModel"}}, (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==agentlib_mpc.optimization_backends.casadi_.casadi_admm_ml:[202:224]
==agentlib_mpc.optimization_backends.casadi_.core.system:[57:76]
        return [
            var
            for var in self.__dict__.values()
            if isinstance(var, OptimizationVariable)
        ]

    @property
    def parameters(self) -> list[OptimizationParameter]:
        return [
            var
            for var in self.__dict__.values()
            if isinstance(var, OptimizationParameter)
        ]

    @property
    def quantities(self) -> list[Union[OptimizationParameter, OptimizationVariable]]:
        return self.variables + self.parameters

 (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==agentlib_mpc.optimization_backends.casadi_.basic:[310:324]
==agentlib_mpc.optimization_backends.casadi_.mhe:[331:345]
        state_k_end = collocation.D[0] * state_at_beginning
        for j in range(1, collocation.order + 1):
            # Expression for the state derivative at the collocation point
            xp = collocation.C[0, j] * state_at_beginning
            for r in range(collocation.order):
                xp = xp + collocation.C[r + 1, j] * state_collocation[r]

            stage = self._stage_function(
                **{states.name: state_collocation[j - 1]},
                **opt_pars_collocation[j - 1],
                **opt_vars_collocation[j - 1],
                **constants,
            )
 (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==agentlib_mpc.optimization_backends.casadi_.basic:[397:411]
==agentlib_mpc.optimization_backends.casadi_.minlp:[128:142]
        vars_dict = {sys.states.name: {}}
        n = self.options.prediction_horizon
        ts = self.options.time_step
        opts = {"t0": 0, "tf": ts}
        # Initial State
        x0 = self.add_opt_par(sys.initial_state)
        xk = self.add_opt_var(sys.states, lb=x0, ub=x0, guess=x0)
        vars_dict[sys.states.name][0] = xk
        const_par = self.add_opt_par(sys.model_parameters)
        # ODE is used here because the algebraics can be calculated with the stage function
        opt_integrator = self._create_ode(sys, opts, integrator=self.options.integrator)
        # initiate states
        while self.k < n:
            uk = self.add_opt_var(sys.controls) (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==agentlib_mpc.optimization_backends.casadi_.mhe:[458:471]
==agentlib_mpc.utils.sampling:[75:88]
        target_grid_length = len(grid)
        if isinstance(trajectory, (float, int)):
            # return constant trajectory for scalars
            return [trajectory] * target_grid_length
        if isinstance(trajectory, list):
            # return lists of matching length without timestamps
            if len(trajectory) == target_grid_length:
                return trajectory
            raise ValueError(
                f"Passed list with length {len(trajectory)} "
                f"does not match target ({target_grid_length})."
            )
        if isinstance(trajectory, pd.Series): (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==simple_mpc_nn:[7:24]
==simple_mpc_nn:[8:25]
logger = logging.getLogger(__name__)

# script variables
ub = 295.15

ENV_CONFIG = {"rt": False, "factor": 0.01, "t_sample": 60}


def agent_configs(ann_path: str) -> list[dict]:
    agent_mpc = {
        "id": "myMPCAgent",
        "modules": [
            {"module_id": "Ag1Com", "type": "local_broadcast"},
            {
                "module_id": "myMPC",
                "type": "agentlib_mpc.mpc",
                "optimization_backend": { (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==mhe_example:[261:272]
==with_change_control_penalty:[155:166]
            },
        ],
    }
    AGENT_SIM = {
        "id": "SimAgent",
        "modules": [
            {"module_id": "Ag1Com", "type": "local_broadcast"},
            {
                "module_id": "room",
                "type": "simulator",
                "model": { (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==model:[179:196]
==with_change_control_penalty:[96:115]
        self.T_out.alg = self.T  # math operation to get the symbolic variable

        # Constraints: List[(lower bound, function, upper bound)]
        self.constraints = [
            # soft constraints
            (0, self.T + self.T_slack, self.T_upper),
        ]

        # Objective function
        objective = sum(
            [
                self.r_mDot * self.mDot,
                self.s_T * self.T_slack**2,
            ]
        )

        return objective (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==mixed_integer.mixed_integer_mpc:[7:25]
==with_change_control_penalty:[4:21]
from agentlib_mpc.models.casadi_model import (
    CasadiModel,
    CasadiInput,
    CasadiState,
    CasadiParameter,
    CasadiOutput,
    CasadiModelConfig,
)
from agentlib.utils.multi_agent_system import LocalMASAgency


logger = logging.getLogger(__name__)


# script variables
ub = 295.15

# constants (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==simple_mpc_with_time_variant_inputs:[190:201]
==simulation_model:[102:113]
        ),
        CasadiParameter(
            name="q_T",
            value=1,
            unit="-",
            description="Weight for T in objective function",
        ),
        CasadiParameter(
            name="s_T",
            value=1,
            unit="-", (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==model:[179:196]
==simple_mpc:[104:123]
        self.T_out.alg = self.T  # math operation to get the symbolic variable

        # Constraints: List[(lower bound, function, upper bound)]
        self.constraints = [
            # soft constraints
            (0, self.T + self.T_slack, self.T_upper),
        ]

        # Objective function
        objective = sum(
            [
                self.r_mDot * self.mDot,
                self.s_T * self.T_slack**2,
            ]
        )

        return objective (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==mixed_integer.mixed_integer_mpc_cia:[132:147]
==simple_mpc:[116:131]
                self.s_T * self.T_slack**2,
            ]
        )

        return objective


ENV_CONFIG = {"rt": False, "factor": 0.01, "t_sample": 60}

AGENT_MPC = {
    "id": "myMPCAgent",
    "modules": [
        {"module_id": "Ag1Com", "type": "local_broadcast"},
        {
            "module_id": "myMPC", (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==model:[179:196]
==simple_mpc_multiple_shooting:[104:123]
        self.T_out.alg = self.T  # math operation to get the symbolic variable

        # Constraints: List[(lower bound, function, upper bound)]
        self.constraints = [
            # soft constraints
            (0, self.T + self.T_slack, self.T_upper),
        ]

        # Objective function
        objective = sum(
            [
                self.r_mDot * self.mDot,
                self.s_T * self.T_slack**2,
            ]
        )

        return objective

 (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==mixed_integer.mixed_integer_mpc:[133:148]
==simple_mpc_multiple_shooting:[116:131]
                self.s_T * self.T_slack**2,
            ]
        )

        return objective


ENV_CONFIG = {"rt": False, "factor": 0.01, "t_sample": 60}

AGENT_MPC = {
    "id": "myMPCAgent",
    "modules": [
        {"module_id": "Ag1Com", "type": "local_broadcast"},
        {
            "module_id": "myMPC", (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==simple_mpc_nn:[129:141]
==simple_mpc_time_dependent_obj:[253:265]
    t_sim = sim_res["T_out"]
    t_sample = t_sim.index[1] - t_sim.index[0]
    aie_kh = (t_sim - ub).abs().sum() * t_sample / 3600
    energy_cost_kWh = (
        (sim_res["mDot"] * (sim_res["T_out"] - sim_res["T_in"])).sum()
        * t_sample
        * 1
        / 3600
    )  # cp is 1
    print(f"Absoulute integral error: {aie_kh} Kh.")
    print(f"Cooling energy used: {energy_cost_kWh} kWh.")
 (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==ca_room_model:[0:14]
==models.room_model:[0:14]
from agentlib_mpc.models.casadi_model import (
    CasadiModel,
    CasadiInput,
    CasadiState,
    CasadiParameter,
    CasadiOutput,
    CasadiModelConfig,
)


class CaCooledRoomConfig(CasadiModelConfig):
    inputs: list[CasadiInput] = [
        # couplings
        CasadiInput( (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==agentlib_mpc.optimization_backends.casadi_.basic:[15:27]
==agentlib_mpc.optimization_backends.casadi_.mhe:[18:30]
from agentlib_mpc.optimization_backends.casadi_.core.casadi_backend import CasADiBackend
from agentlib_mpc.optimization_backends.casadi_.core.VariableGroup import (
    OptimizationQuantity,
    OptimizationVariable,
    OptimizationParameter,
)
from agentlib_mpc.optimization_backends.casadi_.core.discretization import (
    Discretization,
)
from agentlib_mpc.optimization_backends.casadi_.core.system import System

 (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==agentlib_mpc.optimization_backends.casadi_.basic:[411:424]
==agentlib_mpc.optimization_backends.casadi_.full:[129:143]
            dk = self.add_opt_par(sys.non_controlled_inputs)
            zk = self.add_opt_var(sys.algebraics)
            yk = self.add_opt_var(sys.outputs)

            # get path constraints and objective values (stage)
            stage_arguments = {
                # variables
                sys.states.name: xk,
                sys.algebraics.name: zk,
                sys.outputs.name: yk,
                # parameters
                sys.controls.name: uk,
                sys.non_controlled_inputs.name: dk,
                sys.model_parameters.name: const_par, (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==agentlib_mpc.optimization_backends.backend:[70:82]
==agentlib_mpc.optimization_backends.casadi_.minlp_cia:[47:59]
                except FileNotFoundError:
                    pass
            else:
                if os.path.isfile(info.data["results_file"]):
                    raise FileExistsError(
                        f"Results file {res_file} already exists and will not be "
                        f"overwritten automatically. Set 'overwrite_result_file' to "
                        f"True to enable automatic overwrite it."
                    )
        return overwrite_result_file

 (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==AHU:[22:34]
==CCA:[13:25]
    ]

    states: List[CasadiState] = []

    parameters: List[CasadiParameter] = [
        CasadiParameter(
            name="r_T_v",
            value=1,
            unit="-",
            description="Weight for mDot in objective function",
        ),
        CasadiParameter( (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==ca_room_model:[43:56]
==simulation_model:[44:57]
        CasadiState(
            name=f"T_0", value=293.15, unit="K", description="Temperature of zone 0"
        ),
        # algebraic
        # slack variables
        CasadiState(
            name=f"T_0_slack",
            value=0,
            unit="K",
            description="Slack variable of temperature of zone 0",
        ),
    ]
 (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==training_linreg:[187:199]
==training_nn:[198:210]
        ),
        env=env_config,
        variable_logging=False,
    )
    mas.run(until=training_time + 100)
    if plot_results:
        results = mas.get_results(cleanup=True)
        plot(results)


if __name__ == "__main__":
    main(training_time=3600 * 24 * 0.9, plot_results=True, step_size=300) (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==simple_mpc_linreg:[73:83]
==with_change_control_penalty:[170:184]
                "update_inputs_on_callback": False,
                "outputs": [
                    {"name": "T_out", "value": 298, "alias": "T"},
                ],
                "inputs": [
                    {"name": "mDot", "value": 0.02, "alias": "mDot"},
                ],
            },
        ],
    } (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==mixed_integer.mixed_integer_mpc_cia:[202:218]
==with_change_control_penalty:[176:192]
            ],
        },
    ],
}


def run_example(with_plots=True, log_level=logging.INFO, until=10000):
    # Change the working directly so that relative paths work
    os.chdir(Path(__file__).parent)

    # Set the log-level
    logging.basicConfig(level=log_level)
    mas = LocalMASAgency(
        agent_configs=[AGENT_MPC, AGENT_SIM], env=ENV_CONFIG, variable_logging=True
    )
    mas.run(until=until) (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==examples.three_zone_datadriven_admm.training_direct:[133:143]
==simple_mpc_with_time_variant_inputs:[191:201]
        CasadiParameter(
            name="q_T",
            value=1,
            unit="-",
            description="Weight for T in objective function",
        ),
        CasadiParameter(
            name="s_T",
            value=1,
            unit="-", (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==simple_mpc:[63:74]
==simulation_model:[54:65]
        ),
    ]

    parameters: List[CasadiParameter] = [
        CasadiParameter(
            name="cp",
            value=1000,
            unit="J/kg*K",
            description="thermal capacity of the air",
        ),
        CasadiParameter( (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==mhe_example:[163:180]
==simple_mpc_multiple_shooting:[107:123]
        self.constraints = [
            # soft constraints
            (0, self.T + self.T_slack, self.T_upper),
        ]

        # Objective function
        objective = sum(
            [
                self.r_mDot * self.mDot,
                self.s_T * self.T_slack**2,
            ]
        )

        return objective


def configs() -> List[dict]: (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==simple_mpc_multiple_shooting:[63:74]
==simple_mpc_with_time_variant_inputs:[176:186]
        ),
    ]

    parameters: List[CasadiParameter] = [
        CasadiParameter(
            name="cp",
            value=1000,
            unit="J/kg*K",
            description="thermal capacity of the air",
        ),
        CasadiParameter( (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==simple_mpc_time_dependent_obj:[42:55]
==simple_mpc_with_time_variant_inputs:[157:168]
        ),
        # settings
        CasadiInput(
            name="T_upper",
            value=294.15,
            unit="K",
            description="Upper boundary (soft) for T.",
        ),
    ]

    states: List[CasadiState] = [
        # differential
        CasadiState( (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==simple_mpc_multiple_shooting:[91:113]
==simple_mpc_time_dependent_obj:[99:123]
    ]


class MyCasadiModel(CasadiModel):
    config: MyCasadiModelConfig

    def setup_system(self):
        # Define ode


        self.T.ode = (
            self.cp * self.mDot / self.C * (self.T_in - self.T) + self.load / self.C
        )

        # Define ae
        self.T_out.alg = self.T  # math operation to get the symbolic variable

        # Constraints: List[(lower bound, function, upper bound)]
        self.constraints = [
            # soft constraints
            (0, self.T + self.T_slack, self.T_upper),
        ]

        # Objective function (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==room_model:[33:46]
==simple_mpc_time_dependent_obj:[64:75]
        ),
        # algebraic
        # slack variables
    ]

    parameters: List[CasadiParameter] = [
        CasadiParameter(
            name="cp",
            value=1000,
            unit="J/kg*K",
            description="thermal capacity of the air",
        ),
        CasadiParameter( (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==ca_room_model:[53:64]
==models.room_model:[50:61]
        ),
    ]

    parameters: list[CasadiParameter] = [
        CasadiParameter(
            name="cp",
            value=1000,
            unit="J/kg*K",
            description="thermal capacity of the air",
        ),
        CasadiParameter( (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==models.room_model:[21:32]
==simple_mpc_with_time_variant_inputs:[148:159]
        CasadiInput(
            name="T_in", value=290.15, unit="K", description="Inflow air temperature"
        ),
        # settings
        CasadiInput(
            name="T_set",
            value=294.15,
            unit="K",
            description="Set point for T in objective function",
        ),
        CasadiInput( (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==admm_4rooms_main:[15:25]
==admm_4rooms_main_coord:[29:40]
    conf_dicts = []
    for conf in agent_configs:
        with open(conf) as f:
            conf_dict = json.load(f)
        modules = conf_dict["modules"]
        for i, mod in enumerate(modules):
            if isinstance(mod, str):
                with open(mod) as f:
                    mod = json.load(f)
            if mod["type"] == "agentlib_mpc.admm_local": (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==agentlib_mpc.modules.dmpc.admm.admm:[832:848]
==agentlib_mpc.modules.mpc_full:[139:167]
        for hist_var in self._lags_dict_seconds:
            past_values = self.history[hist_var]
            if not past_values:
                # if the history of a variable is empty, fallback to the scalar value
                continue

            # create copy to not mess up scalar value of original variable in case
            # fallback is needed
            updated_var = variables[hist_var].copy(
                update={"value": pd.Series(past_values)}
            )
            variables[hist_var] = updated_var

        return {**variables, **self._internal_variables}

        # class AgVarDropin:
        #     ub: float
        #     lb: float
        #     value: Union[float, list, pd.Series]
        #     interpolation_method: InterpolationMethod

    def _create_internal_variables(self) -> dict[str, AgentVariable]:
        """Creates a reference of all internal variables that are used for the MPC,
        but not shared as AgentVariables.

        Currently, this includes:
           - Weights for control change (r_del_u)
        """ (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==agentlib_mpc.optimization_backends.casadi_.casadi_admm_ml:[420:433]
==agentlib_mpc.optimization_backends.casadi_.casadi_ml:[272:284]
        constraints_func = [c.function for c in constraints.values()]
        constraints_lb = [c.lb for c in constraints.values()]
        constraints_ub = [c.ub for c in constraints.values()]
        constraint_denotations = list(constraints.keys())
        constraint_lb_denotations = [LB_PREFIX + k for k in constraints]
        constraint_ub_denotations = [UB_PREFIX + k for k in constraints]

        # create a dictionary which holds all the inputs for the sim step of the model
        all_input_variables = {}
        lagged_inputs: dict[int, dict[str, ca.MX]] = {}
        # dict[lag, dict[denotation, list[var_name]]]
        lagged_input_names: dict[int, dict[str, list[str]]] = {}
 (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==agentlib_mpc.optimization_backends.casadi_.basic:[189:199]
==agentlib_mpc.optimization_backends.casadi_.mhe:[214:224]
        all_system_quantities: dict[str, OptimizationQuantity] = {
            var.name: var for var in system.quantities
        }
        constraints = {"model_constraints": system.model_constraints}

        inputs = [
            q.full_symbolic
            for q in all_system_quantities.values()
            if q.use_in_stage_function
        ] (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==agentlib_mpc.optimization_backends.casadi_.admm:[157:168]
==agentlib_mpc.optimization_backends.casadi_.basic:[148:159]
            }
            xk_end, constraints = self._collocation_inner_loop(
                collocation=collocation_matrices,
                state_at_beginning=xk,
                states=sys.states,
                opt_vars=opt_vars_inside_inner,
                opt_pars=opt_pars_inside_inner,
                const=constant_over_inner,
            )

            # increment loop counter and time (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==agentlib_mpc.optimization_backends.casadi_.basic:[434:444]
==agentlib_mpc.optimization_backends.casadi_.full:[148:157]
            fk = opt_integrator(
                x0=xk,
                p=ca.vertcat(uk, dk, const_par, zk, yk),
            )
            xk_end = fk["xf"]
            # calculate model constraint
            self.k += 1
            self.pred_time = ts * self.k
            xk = self.add_opt_var(sys.states)
            vars_dict[sys.states.name][self.k] = xk (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==admm_example_coordinator:[34:52]
==admm_example_coordinator_multiprocessing:[29:42]
agent_configs = [
    # use MS discretization method
    # "configs//cooler_ms.json",
    # "configs//cooled_room_ms.json",
    # use DC discretization method
    "configs//cooler_with_coordinator.json",
    "configs//cooled_room_with_coordinator.json",
    # use casadi network
    "configs//coordinator.json",
    "configs//simulator.json",
]


def plot(results, start_pred=0):
    import matplotlib.pyplot as plt
    from agentlib_mpc.utils.analysis import admm_at_time_step

    res_sim = results["Simulation"]["simulator"] (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==training_gpr:[193:204]
==training_nn:[198:209]
        ),
        env=env_config,
        variable_logging=False,
    )
    mas.run(until=training_time + 100)
    if plot_results:
        results = mas.get_results(cleanup=True)
        plot(results)


if __name__ == "__main__": (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==model:[100:136]
==model:[102:137]
                self.s_T * self.T_slack**2,
            ]
        )
        return objective


class DataDrivenModelConfig(CasadiMLModelConfig, PhysicalModelConfig):
    # use the same variables as physical,  have some attributes only the ANN Config has
    inputs: List[CasadiInput] = [
        # controls
        CasadiInput(
            name="mDot", value=0.0225, unit="K", description="Air mass flow into zone"
        ),
        # disturbances
        CasadiInput(
            name="load", value=10, unit="W", description="Heat " "load into zone"
        ),
        CasadiInput(
            name="T_in", value=290.15, unit="K", description="Inflow air temperature"
        ),
        # settings
        CasadiInput(
            name="T_upper",
            value=294.15,
            unit="K",
            description="Upper boundary (soft) for T.",
        ),
    ]

    states: List[CasadiState] = [
        # differential
        CasadiState(
            name="T", value=293.15, unit="K", description="Temperature of zone"
        ),
        # algebraic (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==model:[100:168]
==model:[100:168]
                self.s_T * self.T_slack**2,
            ]
        )
        return objective


class DataDrivenModelConfig(CasadiMLModelConfig, PhysicalModelConfig):
    # use the same variables as physical,  have some attributes only the ANN Config has
    inputs: List[CasadiInput] = [
        # controls
        CasadiInput(
            name="mDot", value=0.0225, unit="K", description="Air mass flow into zone"
        ),
        # disturbances
        CasadiInput(
            name="load", value=10, unit="W", description="Heat " "load into zone"
        ),
        CasadiInput(
            name="T_in", value=290.15, unit="K", description="Inflow air temperature"
        ),
        # settings
        CasadiInput(
            name="T_upper",
            value=294.15,
            unit="K",
            description="Upper boundary (soft) for T.",
        ),
    ]

    states: List[CasadiState] = [
        # differential
        CasadiState(
            name="T", value=293.15, unit="K", description="Temperature of zone"
        ),
        # algebraic
        # slack variables
        CasadiState(
            name="T_slack",
            value=0,
            unit="K",
            description="Slack variable of temperature of zone",
        ),
    ]

    parameters: List[CasadiParameter] = [
        CasadiParameter(
            name="cp",
            value=1000,
            unit="J/kg*K",
            description="thermal capacity of the air",
        ),
        CasadiParameter(
            name="C", value=100000, unit="J/K", description="thermal capacity of zone"
        ),
        CasadiParameter(
            name="s_T",
            value=1,
            unit="-",
            description="Weight for T in constraint function",
        ),
        CasadiParameter(
            name="r_mDot",
            value=1,
            unit="-",
            description="Weight for mDot in objective function",
        ),
    ]
    outputs: List[CasadiOutput] = [ (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==training_linreg:[187:198]
==training_nn:[207:218]
        ),
        env=env_config,
        variable_logging=False,
    )
    mas.run(until=training_time + 100)
    if plot_results:
        results = mas.get_results(cleanup=True)
        plot(results)


if __name__ == "__main__": (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==training_linreg:[83:93]
==training_nn:[88:98]
                "inputs": [
                    {"name": "mDot", "value": 0.0225, "source": "PID"},
                    {"name": "load", "value": 30, "source": "Simulator"},
                    {"name": "T_in", "value": 290.15},
                ],
                "outputs": [{"name": "T", "value": 273.15 + 22}],
                # the lags here are not needed, but we have them to validate the code
                "lags": {"load": 2, "T": 2, "mDot": 3},
                "output_types": {"T": "difference"},
                "interpolations": {"mDot": "mean_over_interval"}, (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==model:[83:99]
==simple_mpc:[99:115]
        self.T.ode = (
            self.cp * self.mDot / self.C * (self.T_in - self.T) + self.load / self.C
        )

        # Define ae
        self.T_out.alg = self.T  # math operation to get the symbolic variable

        # Constraints: List[(lower bound, function, upper bound)]
        self.constraints = [
            # soft constraints
            (0, self.T + self.T_slack, self.T_upper),
        ]

        # Objective function
        objective = sum(
            [ (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==mixed_integer.mixed_integer_mpc_cia:[7:17]
==simple_mpc:[7:17]
from agentlib_mpc.models.casadi_model import (
    CasadiModel,
    CasadiInput,
    CasadiState,
    CasadiParameter,
    CasadiOutput,
    CasadiModelConfig,
)
from agentlib.utils.multi_agent_system import LocalMASAgency
 (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==model:[83:99]
==simple_mpc_multiple_shooting:[99:115]
        self.T.ode = (
            self.cp * self.mDot / self.C * (self.T_in - self.T) + self.load / self.C
        )

        # Define ae
        self.T_out.alg = self.T  # math operation to get the symbolic variable

        # Constraints: List[(lower bound, function, upper bound)]
        self.constraints = [
            # soft constraints
            (0, self.T + self.T_slack, self.T_upper),
        ]

        # Objective function
        objective = sum(
            [ (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==mixed_integer.mixed_integer_mpc:[7:18]
==simple_mpc_multiple_shooting:[7:17]
from agentlib_mpc.models.casadi_model import (
    CasadiModel,
    CasadiInput,
    CasadiState,
    CasadiParameter,
    CasadiOutput,
    CasadiModelConfig,
)
from agentlib.utils.multi_agent_system import LocalMASAgency
 (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==simple_mpc_time_dependent_obj:[8:18]
==with_change_control_penalty:[4:15]
from agentlib_mpc.models.casadi_model import (
    CasadiModel,
    CasadiInput,
    CasadiState,
    CasadiParameter,
    CasadiOutput,
    CasadiModelConfig,
)
from agentlib.utils.multi_agent_system import LocalMASAgency
 (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==simple_mpc_time_dependent_obj:[145:154]
==simple_mpc_with_time_variant_inputs:[243:252]
    "id": "myMPCAgent",
    "modules": [
        {"module_id": "Ag1Com", "type": "local_broadcast"},
        {
            "module_id": "myMPC",
            "type": "agentlib_mpc.mpc",
            "optimization_backend": {
                "type": "casadi",
                "model": {"type": {"file": __file__, "class_name": "MyCasadiModel"}}, (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==simple_mpc_multiple_shooting:[138:147]
==simple_mpc_time_dependent_obj:[156:165]
                },
                "solver": {
                    "name": "fatrop",  # use fatrop with casadi 3.6.6 for speedup
                },
                "results_file": "results//mpc.csv",
                "save_results": True,
                "overwrite_result_file": True,
            },
            "time_step": 300, (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==model:[49:59]
==room_model:[36:46]
    ]

    parameters: List[CasadiParameter] = [
        CasadiParameter(
            name="cp",
            value=1000,
            unit="J/kg*K",
            description="thermal capacity of the air",
        ),
        CasadiParameter( (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==examples.three_zone_datadriven_admm.training_direct:[543:557]
==generate_training_data:[19:33]
    inputs = list(np.random.random((10000, 1)) * 100 - 50)
    func = lambda x: 2 * x
    outputs = [func(x) for x in inputs]
    func2 = lambda x: x + 10
    outputs2 = [func2(x) for x in inputs]
    df = pd.DataFrame({"inputs": inputs, "outputs": outputs, "outputs2": outputs2})
    return df

    # df.to_csv("test_data.csv")


def create_trainer():
    ag_config = {
        "modules": [], (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==admm_4rooms_main:[15:24]
==admm_example_local:[71:80]
    conf_dicts = []
    for conf in agent_configs:
        with open(conf) as f:
            conf_dict = json.load(f)
        modules = conf_dict["modules"]
        for i, mod in enumerate(modules):
            if isinstance(mod, str):
                with open(mod) as f:
                    mod = json.load(f) (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==admm_4rooms_coord_main:[0:10]
==admm_4rooms_main:[1:13]
import os
import logging
from agentlib.utils.multi_agent_system import LocalMASAgency


def configs() -> list[dict]:
    agent_configs = [
        "configs\\rlt_admm.json",
        "configs\\room_1_admm.json",
        "configs\\room_2_admm.json",
        "configs\\room_3_admm.json",
        "configs\\room_4_admm.json", (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==admm_4rooms_main_coord:[29:39]
==admm_example_multiprocessing:[80:89]
    conf_dicts = []

    for conf in agent_configs:
        with open(conf) as f:
            conf_dict = json.load(f)
        modules = conf_dict["modules"]
        for i, mod in enumerate(modules):
            if isinstance(mod, str):
                with open(mod) as f:
                    mod = json.load(f) (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==agentlib_mpc.modules.dmpc.admm.admm_coordinator:[60:68]
==agentlib_mpc.modules.mpc:[46:54]
    )
    sampling_time: Optional[float] = Field(
        default=None,  # seconds
        description="Sampling interval for control steps. If None, will be the same as"
        " time step. Does not affect the discretization of the MPC, "
        "only the interval with which there will be optimization steps.",
        validate_default=True,
    ) (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==agentlib_mpc.modules.estimation.mhe:[322:332]
==agentlib_mpc.modules.mpc:[402:412]
        results = load_mpc(results_file)
        stats = load_mpc_stats(results_file)
        return results, stats

    def cleanup_results(self):
        results_file = self.optimization_backend.config.results_file
        if not results_file:
            return
        os.remove(results_file)
        os.remove(mpc_datamodels.stats_path(results_file)) (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==agentlib_mpc.modules.minlp_mpc:[81:96]
==agentlib_mpc.modules.mpc:[228:245]
        )

        # return dict should have model variables as keys, not mpc variables
        unassigned_by_model_var = {
            "states": unassigned_by_mpc_var["states"],
            "inputs": intersection_input,
            "outputs": unassigned_by_mpc_var["outputs"],
            "parameters": unassigned_by_mpc_var["parameters"],
        }

        return unassigned_by_model_var

    def collect_variables_for_optimization(
        self, var_ref: mpc_datamodels.VariableReference = None
    ) -> Dict[str, AgentVariable]:
        """Gets all variables noted in the var ref and puts them in a flat
        dictionary.""" (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==agentlib_mpc.modules.minlp_mpc:[65:77]
==agentlib_mpc.modules.mpc:[214:226]
            ("inputs", self.model.get_input_names(), "Inputs"),
            ("outputs", self.model.get_output_names(), "Outputs"),
            ("parameters", self.model.get_parameter_names(), "Parameters"),
        ]

        # perform validations and make a dictionary of unassigned variables
        unassigned_by_mpc_var = {
            key: self.assert_subset(self.var_ref.__dict__[key], names, message)
            for key, names, message in args
        }

        # fix unassigned values for inputs (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==agentlib_mpc.optimization_backends.casadi_.admm:[114:128]
==agentlib_mpc.optimization_backends.casadi_.full:[49:66]
        collocation_matrices = self._collocation_polynomial()

        # shorthands
        n = self.options.prediction_horizon
        ts = self.options.time_step

        # Initial State
        x0 = self.add_opt_par(sys.initial_state)
        xk = self.add_opt_var(sys.states, lb=x0, ub=x0, guess=x0)
        uk = self.add_opt_par(sys.last_control)

        # Parameters that are constant over the horizon
        const_par = self.add_opt_par(sys.model_parameters)
        du_weights = self.add_opt_par(sys.r_del_u)

        # Formulate the NLP
        # loop over prediction horizon (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==agentlib_mpc.optimization_backends.casadi_.casadi_admm_ml:[439:458]
==agentlib_mpc.optimization_backends.casadi_.casadi_ml:[357:376]
                lag = system.lags_dict.get(v_name, 1)

                # if lag exists, we have to create and organize new variables
                for j in range(1, lag):
                    # create an MX variable for this lag
                    l_name = name_with_lag(v_name, j)
                    new_lag_var = ca.MX.sym(l_name)
                    all_input_variables[l_name] = new_lag_var

                    # add the mx variable to its lag time and denotation
                    lagged_inputs_j = lagged_inputs.setdefault(j, {})
                    lv_mx = lagged_inputs_j.setdefault(q_name, ca.DM([]))
                    lagged_inputs[j][q_name] = ca.vertcat(lv_mx, new_lag_var)

                    # keep track of the variable names that were added
                    lagged_input_names_j = lagged_input_names.setdefault(j, {})
                    lv_names = lagged_input_names_j.setdefault(q_name, [])
                    lv_names.append(v_name)
 (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==agentlib_mpc.optimization_backends.casadi_.casadi_admm_ml:[298:308]
==agentlib_mpc.optimization_backends.casadi_.casadi_ml:[163:175]
        for time in prediction_grid:
            self.pred_time = time
            mx_dict[time][sys.controls.name] = self.add_opt_var(sys.controls)
            mx_dict[time][sys.non_controlled_inputs.name] = self.add_opt_par(
                sys.non_controlled_inputs
            )
            mx_dict[time][sys.algebraics.name] = self.add_opt_var(sys.algebraics)
            mx_dict[time][sys.outputs.name] = self.add_opt_var(sys.outputs)

            # admm related quantities (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==agentlib_mpc.optimization_backends.casadi_.basic:[101:118]
==agentlib_mpc.optimization_backends.casadi_.mhe:[125:135]
@dataclasses.dataclass
class CollocationMatrices:
    order: int
    root: np.ndarray
    B: np.ndarray
    C: np.ndarray
    D: np.ndarray


class DirectCollocation(Discretization): (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==agentlib_mpc.optimization_backends.casadi_.basic:[411:422]
==agentlib_mpc.optimization_backends.casadi_.minlp:[143:154]
            dk = self.add_opt_par(sys.non_controlled_inputs)
            zk = self.add_opt_var(sys.algebraics)
            yk = self.add_opt_var(sys.outputs)
            # get stage
            stage_arguments = {
                # variables
                sys.states.name: xk,
                sys.algebraics.name: zk,
                sys.outputs.name: yk,
                # parameters
                sys.controls.name: uk, (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==agentlib_mpc.optimization_backends.casadi_.basic:[149:159]
==agentlib_mpc.optimization_backends.casadi_.full:[78:88]
            xk_end, constraints = self._collocation_inner_loop(
                collocation=collocation_matrices,
                state_at_beginning=xk,
                states=sys.states,
                opt_vars=opt_vars_inside_inner,
                opt_pars=opt_pars_inside_inner,
                const=constant_over_inner,
            )

            # increment loop counter and time (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==AHU:[53:63]
==CCA:[44:54]
            value=293,
            unit="K",
            description="Air mass flow out of cooler.",
        ),
        CasadiOutput(name="W1", value=200, unit="K", description="Leistung"),
        CasadiOutput(name="W2", value=200, unit="K", description="Leistung"),
        CasadiOutput(name="W3", value=200, unit="K", description="Leistung"),
    ]

 (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==training_gpr:[181:192]
==training_nn:[187:203]
            {"type": "local", "subscriptions": ["Simulator"]},
        ],
    }
    return [simulator_config, trainer_config, pid_controller]


def main(training_time: float = 1000, plot_results=False, step_size: float = 300):
    env_config = {"rt": False, "t_sample": 3600}
    logging.basicConfig(level=logging.INFO)
    mas = LocalMASAgency(
        agent_configs=configs( (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==simple_mpc_gpr:[110:118]
==simple_mpc_nn:[116:124]
    mas = LocalMASAgency(
        agent_configs=agent_configs(ml_model_path=str(ann_path)),
        env=ENV_CONFIG,
        variable_logging=False,
    )
    mas.run(until=until)
    results = mas.get_results()
    if with_plots: (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==examples.three_zone_datadriven_admm.training_direct:[6:14]
==model:[2:10]
from agentlib_mpc.models.casadi_model import (
    CasadiModelConfig,
    CasadiInput,
    CasadiState,
    CasadiParameter,
    CasadiOutput,
    CasadiModel,
) (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==ca_cooler_model:[0:10]
==with_change_control_penalty:[4:12]
from agentlib_mpc.models.casadi_model import (
    CasadiModel,
    CasadiInput,
    CasadiState,
    CasadiParameter,
    CasadiOutput,
    CasadiModelConfig,
)

 (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==simple_mpc_linreg:[18:26]
==simple_mpc_with_time_variant_inputs:[242:250]
agent_mpc = {
    "id": "myMPCAgent",
    "modules": [
        {"module_id": "Ag1Com", "type": "local_broadcast"},
        {
            "module_id": "myMPC",
            "type": "agentlib_mpc.mpc",
            "optimization_backend": { (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==mixed_integer.mixed_integer_mpc:[85:93]
==simple_mpc_with_time_variant_inputs:[196:204]
        ),
        CasadiParameter(
            name="s_T",
            value=1,
            unit="-",
            description="Weight for T in constraint function",
        ),
        CasadiParameter( (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==ca_room_model:[0:10]
==simple_mpc:[7:15]
from agentlib_mpc.models.casadi_model import (
    CasadiModel,
    CasadiInput,
    CasadiState,
    CasadiParameter,
    CasadiOutput,
    CasadiModelConfig,
)

 (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==simple_mpc_multiple_shooting:[7:15]
==simulation_model:[0:8]
from agentlib_mpc.models.casadi_model import (
    CasadiModel,
    CasadiInput,
    CasadiState,
    CasadiParameter,
    CasadiOutput,
    CasadiModelConfig,
) (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==mixed_integer.mixed_integer_mpc_cia:[229:237]
==simple_mpc_multiple_shooting:[243:251]
        plot_mpc(
            series=mpc_results["variable"]["T"] - 273.15,
            ax=ax[0],
            plot_actual_values=True,
            plot_predictions=True,
        )
        ax[0].axhline(ub - 273.15, color="grey", linestyle="--", label="upper boundary")
        plot_mpc( (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==simple_mpc_multiple_shooting:[145:153]
==with_change_control_penalty:[140:148]
            },
            "time_step": 300,
            "prediction_horizon": 15,
            "parameters": [
                {"name": "s_T", "value": 3},
                {"name": "r_mDot", "value": 1},
            ],
            "inputs": [ (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==mixed_integer.mixed_integer_mpc:[229:237]
==simple_mpc_time_dependent_obj:[265:273]
    plot_mpc(
        series=mpc_results["variable"]["T"] - 273.15,
        ax=ax[0],
        plot_actual_values=True,
        plot_predictions=True,
    )
    ax[0].axhline(ub - 273.15, color="grey", linestyle="--", label="upper boundary")
    plot_mpc( (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==mixed_integer.mixed_integer_mpc:[137:148]
==simple_mpc_time_dependent_obj:[139:150]
        return objective


ENV_CONFIG = {"rt": False, "factor": 0.01, "t_sample": 60}

AGENT_MPC = {
    "id": "myMPCAgent",
    "modules": [
        {"module_id": "Ag1Com", "type": "local_broadcast"},
        {
            "module_id": "myMPC", (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==simple_mpc_time_dependent_obj:[8:16]
==simple_mpc_with_time_variant_inputs:[7:15]
from agentlib_mpc.models.casadi_model import (
    CasadiModel,
    CasadiInput,
    CasadiState,
    CasadiParameter,
    CasadiOutput,
    CasadiModelConfig,
) (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==simple_mpc_multiple_shooting:[159:167]
==simple_mpc_time_dependent_obj:[180:188]
            "states": [
                {
                    "name": "T",
                    "value": 298.16,
                    "ub": 303.15,
                    "lb": 288.15,
                    "alias": "T",
                    "source": "SimAgent", (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==room_model:[50:58]
==simulation_model:[102:110]
        ),
        CasadiParameter(
            name="q_T",
            value=1,
            unit="-",
            description="Weight for T in objective function",
        ),
        CasadiParameter( (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==models.room_model:[65:73]
==simple_mpc_with_time_variant_inputs:[190:198]
        ),
        CasadiParameter(
            name="q_T",
            value=1,
            unit="-",
            description="Weight for T in objective function",
        ),
        CasadiParameter( (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==models.rlt_model:[0:10]
==models.room_model:[0:10]
from agentlib_mpc.models.casadi_model import (
    CasadiModel,
    CasadiInput,
    CasadiState,
    CasadiParameter,
    CasadiOutput,
    CasadiModelConfig,
)

 (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==agentlib_mpc.modules.minlp_mpc:[57:64]
==agentlib_mpc.modules.mpc:[207:214]
        args = [
            (
                "states",
                self.model.get_state_names(),
                "Differential variables / States",
            ),
            ("controls", self.model.get_input_names(), "Controls"), (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==agentlib_mpc.optimization_backends.casadi_.core.casadi_backend:[284:293]
==agentlib_mpc.optimization_backends.casadi_.minlp_cia:[198:211]
            results.write_columns(res_file)
            results.write_stats_columns(stats_path(res_file))

        df = results.df
        df.index = list(map(lambda x: str((now, x)), df.index))
        df.to_csv(res_file, mode="a", header=False)

        with open(stats_path(res_file), "a") as f:
            f.writelines(results.stats_line(str(now)))

    def rel_results_file_exists(self) -> bool:
        """Checks if the relaxed results file already exists, and if not, creates it with
        headers.""" (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==agentlib_mpc.optimization_backends.casadi_.casadi_admm_ml:[405:413]
==agentlib_mpc.optimization_backends.casadi_.casadi_ml:[255:263]
        all_system_quantities = system.all_system_quantities()
        constraints = {"model_constraints": system.model_constraints}

        inputs = [
            q.full_symbolic
            for q in all_system_quantities.values()
            if q.use_in_stage_function
        ] (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==agentlib_mpc.optimization_backends.casadi_.basic:[528:537]
==agentlib_mpc.optimization_backends.casadi_.casadi_admm_ml:[479:488]
            "cost_function",
            *constraint_denotations,
            *constraint_lb_denotations,
            *constraint_ub_denotations,
        ]

        # function describing system dynamics and cost function
        self._stage_function = ca.Function(
            "f", (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==agentlib_mpc.optimization_backends.casadi_.basic:[397:405]
==agentlib_mpc.optimization_backends.casadi_.full:[107:115]
        vars_dict = {sys.states.name: {}}
        n = self.options.prediction_horizon
        ts = self.options.time_step
        opts = {"t0": 0, "tf": ts}
        # Initial State
        x0 = self.add_opt_par(sys.initial_state)
        xk = self.add_opt_var(sys.states, lb=x0, ub=x0, guess=x0)
        vars_dict[sys.states.name][0] = xk (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==agentlib_mpc.optimization_backends.casadi_.basic:[225:234]
==agentlib_mpc.optimization_backends.casadi_.casadi_ml:[329:338]
            "cost_function",
            *constraint_denotations,
            *constraint_lb_denotations,
            *constraint_ub_denotations,
        ]

        # function describing system dynamics and cost function
        self._stage_function = ca.Function(
            "f", (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==agentlib_mpc.optimization_backends.casadi_.mhe:[532:542]
==agentlib_mpc.utils.sampling:[145:159]
            )

        # extrapolate sequence with last available value if necessary
        interpolated_trajectory = (
            [values[0]] * number_of_missing_old_entries
            + sequence_new
            + [values[-1]] * number_of_missing_new_entries
        )

        return interpolated_trajectory (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==Room_model:[37:44]
==simulation_model:[39:46]
            unit="K",
            description="Set point for T in objective function",
        ),
        CasadiInput(
            name="T_upper", value=301.15, unit="K", description="Upper boundary for T."
        ),
        CasadiInput( (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==AHU:[81:90]
==CCA:[66:75]
        self.constraints = [
            # soft constraints
        ]
        # Objective function
        objective = sum(
            [
                0.1
                * 0.001
                * self.r_T_v (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==Room_model:[34:41]
==examples.three_zone_datadriven_admm.training_direct:[64:71]
        CasadiInput(
            name="T_set",
            value=298.55,
            unit="K",
            description="Set point for T in objective function",
        ),
        CasadiInput( (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==examples.three_zone_datadriven_admm.training_direct:[94:101]
==simulation_model:[62:69]
        ),
    ]
    parameters: List[CasadiParameter] = [
        CasadiParameter(
            name="cp",
            value=4200,
            unit="J/kg*K", (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==model:[169:190]
==model:[172:193]
    ]


class DataDrivenModel(CasadiMLModel):
    config: DataDrivenModelConfig

    def setup_system(self):
        # ode

        # Define ae
        self.T_out.alg = self.T  # math operation to get the symbolic variable

        # Constraints: List[(lower bound, function, upper bound)]
        self.constraints = [
            # soft constraints
            (0, self.T + self.T_slack, self.T_upper),
        ]

        # Objective function
        objective = sum(
            [ (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==model:[75:91]
==model:[76:90]
    ]


class PhysicalModel(CasadiModel):
    config: PhysicalModelConfig

    def setup_system(self):
        # Define ode
        self.T.ode = (
            self.cp * self.mDot / self.C * (self.T_in - self.T) + self.load / self.C
        )

        # Define ae
        self.T_out.alg = self.T  # math operation to get the symbolic variable (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==model:[169:196]
==model:[169:196]
    ]


class DataDrivenModel(CasadiMLModel):
    config: DataDrivenModelConfig

    def setup_system(self):
        # ode

        # Define ae
        self.T_out.alg = self.T  # math operation to get the symbolic variable

        # Constraints: List[(lower bound, function, upper bound)]
        self.constraints = [
            # soft constraints
            (0, self.T + self.T_slack, self.T_upper),
        ]

        # Objective function
        objective = sum(
            [
                self.r_mDot * self.mDot,
                self.s_T * self.T_slack**2,
            ]
        )

        return objective (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==mhe_example:[113:120]
==mixed_integer.mixed_integer_mpc:[86:93]
        CasadiParameter(
            name="s_T",
            value=1,
            unit="-",
            description="Weight for T in constraint function",
        ),
        CasadiParameter( (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==mixed_integer.mixed_integer_mpc:[262:272]
==mixed_integer.mixed_integer_mpc_cia:[262:272]
        ax[1].legend()
        ax[0].legend()
        ax[2].legend()
        plt.show()

    return results


if __name__ == "__main__":
    run_example(with_plots=True, until=3600) (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==simple_mpc_nn:[56:63]
==with_change_control_penalty:[159:166]
    "id": "SimAgent",
    "modules": [
        {"module_id": "Ag1Com", "type": "local_broadcast"},
        {
            "module_id": "room",
            "type": "simulator",
            "model": { (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==simple_mpc_nn:[18:25]
==with_change_control_penalty:[118:125]
        "id": "myMPCAgent",
        "modules": [
            {"module_id": "Ag1Com", "type": "local_broadcast"},
            {
                "module_id": "myMPC",
                "type": "agentlib_mpc.mpc",
                "optimization_backend": { (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==simple_mpc_nn:[120:128]
==with_change_control_penalty:[190:198]
    )
    mas.run(until=until)
    results = mas.get_results()
    if with_plots:
        import matplotlib.pyplot as plt
        from agentlib_mpc.utils.plotting.mpc import plot_mpc

        mpc_results = results["myMPCAgent"]["myMPC"] (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==simple_mpc:[173:180]
==simple_mpc_nn:[56:63]
    "id": "SimAgent",
    "modules": [
        {"module_id": "Ag1Com", "type": "local_broadcast"},
        {
            "module_id": "room",
            "type": "simulator",
            "model": { (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==simple_mpc:[126:133]
==simple_mpc_nn:[17:24]
        "id": "myMPCAgent",
        "modules": [
            {"module_id": "Ag1Com", "type": "local_broadcast"},
            {
                "module_id": "myMPC",
                "type": "agentlib_mpc.mpc",
                "optimization_backend": { (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==simple_mpc_gpr:[58:65]
==simple_mpc_multiple_shooting:[173:180]
    "id": "SimAgent",
    "modules": [
        {"module_id": "Ag1Com", "type": "local_broadcast"},
        {
            "module_id": "room",
            "type": "simulator",
            "model": { (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==simple_mpc_gpr:[19:26]
==simple_mpc_multiple_shooting:[126:133]
        "id": "myMPCAgent",
        "modules": [
            {"module_id": "Ag1Com", "type": "local_broadcast"},
            {
                "module_id": "myMPC",
                "type": "agentlib_mpc.mpc",
                "optimization_backend": { (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==mhe_example:[61:68]
==simple_mpc_time_dependent_obj:[59:67]
        CasadiState(
            name="T_slack",
            value=0,
            unit="K",
            description="Slack variable of temperature of zone",
        ),
    ]
 (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==mhe_example:[27:34]
==simple_mpc_time_dependent_obj:[37:45]
        CasadiInput(
            name="load", value=150, unit="W", description="Heat load into zone"
        ),
        CasadiInput(
            name="T_in", value=290.15, unit="K", description="Inflow air temperature"
        ),  # should be around 17°C
        CasadiInput( (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==simple_mpc_linreg:[58:65]
==simple_mpc_time_dependent_obj:[195:202]
    "id": "SimAgent",
    "modules": [
        {"module_id": "Ag1Com", "type": "local_broadcast"},
        {
            "module_id": "room",
            "type": "simulator",
            "model": { (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==simple_mpc_linreg:[19:26]
==simple_mpc_time_dependent_obj:[145:152]
        "id": "myMPCAgent",
        "modules": [
            {"module_id": "Ag1Com", "type": "local_broadcast"},
            {
                "module_id": "myMPC",
                "type": "agentlib_mpc.mpc",
                "optimization_backend": { (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==model:[83:97]
==simple_mpc_time_dependent_obj:[109:123]
        self.T.ode = (
            self.cp * self.mDot / self.C * (self.T_in - self.T) + self.load / self.C
        )

        # Define ae
        self.T_out.alg = self.T  # math operation to get the symbolic variable

        # Constraints: List[(lower bound, function, upper bound)]
        self.constraints = [
            # soft constraints
            (0, self.T + self.T_slack, self.T_upper),
        ]

        # Objective function (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==simple_mpc_multiple_shooting:[151:158]
==simple_mpc_time_dependent_obj:[170:177]
            ],
            "inputs": [
                {"name": "T_in", "value": 290.15},
                {"name": "load", "value": 150},
                {"name": "T_upper", "value": ub},
            ],
            "controls": [{"name": "mDot", "value": 0.02, "ub": 0.05, "lb": 0}], (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==Room_model:[61:68]
==room_model:[51:58]
        CasadiParameter(
            name="q_T",
            value=1,
            unit="-",
            description="Weight for T in objective function",
        ),
        CasadiParameter( (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==ca_room_model:[57:64]
==room_model:[39:46]
        CasadiParameter(
            name="cp",
            value=1000,
            unit="J/kg*K",
            description="thermal capacity of the air",
        ),
        CasadiParameter( (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==examples.three_zone_datadriven_admm.training_direct:[565:572]
==generate_training_data:[47:54]
        "train_share": 0.6,
        "validation_share": 0.2,
        "test_share": 0.2,
        "retrain_delay": 2,
        "save_directory": "anns",
        "use_values_for_incomplete_data": True,
        "save_data": True, (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==examples.three_zone_datadriven_admm.training_direct:[133:140]
==models.room_model:[66:73]
        CasadiParameter(
            name="q_T",
            value=1,
            unit="-",
            description="Weight for T in objective function",
        ),
        CasadiParameter( (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==models.room_model:[54:61]
==simple_mpc_time_dependent_obj:[68:75]
        CasadiParameter(
            name="cp",
            value=1000,
            unit="J/kg*K",
            description="thermal capacity of the air",
        ),
        CasadiParameter( (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==models.room_model:[115:129]
==room_model:[96:110]
        ),
    ]


class CaCooledRoomSim(CaCooledRoom):
    config: CaCooledRoomSimConfig

    def setup_system(self):
        obj = super().setup_system()

        # Define dae
        self.T_out.alg = self.T

        return obj (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==agentlib_mpc.modules.dmpc.coordinator:[6:13]
==agentlib_mpc.modules.dmpc.employee:[4:11]
from pydantic import Field

from agentlib.core import (
    BaseModule,
    BaseModuleConfig,
    AgentVariable,
    Agent, (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==agentlib_mpc.modules.estimation.mhe:[212:222]
==agentlib_mpc.modules.mpc_full:[113:121]
            self.agent.data_broker.register_callback(
                alias=var.alias,
                source=var.source,
                callback=self._callback_hist_vars,
                name=var.name,
            )

    def _after_config_update(self): (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==agentlib_mpc.modules.estimation.mhe:[143:149]
==agentlib_mpc.modules.mpc:[161:167]
        self.init_status = mpc_datamodels.InitStatus.during_update
        opti_back = create_optimization_backend(
            self.config.optimization_backend, self.agent.id
        )
        opti_back.register_logger(self.logger)
        disc_opts = opti_back.config.discretization_options (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==agentlib_mpc.optimization_backends.casadi_.full:[81:89]
==agentlib_mpc.optimization_backends.casadi_.mhe:[181:189]
                states=sys.states,
                opt_vars=opt_vars_inside_inner,
                opt_pars=opt_pars_inside_inner,
                const=constant_over_inner,
            )

            # increment loop counter and time
            self.k += 1 (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==agentlib_mpc.optimization_backends.casadi_.full:[41:58]
==agentlib_mpc.optimization_backends.casadi_.minlp:[62:81]
class DirectCollocation(basic.DirectCollocation):
    def _discretize(self, sys: CasadiMINLPSystem):
        """
        Defines a direct collocation discretization.
        # pylint: disable=invalid-name
        """

        # setup the polynomial base
        collocation_matrices = self._collocation_polynomial()

        # shorthands
        n = self.options.prediction_horizon
        ts = self.options.time_step

        # Initial State
        x0 = self.add_opt_par(sys.initial_state)
        xk = self.add_opt_var(sys.states, lb=x0, ub=x0, guess=x0)

        # Parameters that are constant over the horizon (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==agentlib_mpc.optimization_backends.casadi_.casadi_ml:[256:263]
==agentlib_mpc.optimization_backends.casadi_.mhe:[217:224]
        constraints = {"model_constraints": system.model_constraints}

        inputs = [
            q.full_symbolic
            for q in all_system_quantities.values()
            if q.use_in_stage_function
        ] (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==agentlib_mpc.optimization_backends.casadi_.basic:[521:527]
==agentlib_mpc.optimization_backends.casadi_.casadi_admm_ml:[472:478]
            system.cost_function,
            *constraints_func,
            *constraints_lb,
            *constraints_ub,
        ]
        output_denotations = [ (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==agentlib_mpc.optimization_backends.casadi_.basic:[511:519]
==agentlib_mpc.optimization_backends.casadi_.casadi_admm_ml:[420:428]
        constraints_func = [c.function for c in constraints.values()]
        constraints_lb = [c.lb for c in constraints.values()]
        constraints_ub = [c.ub for c in constraints.values()]
        constraint_denotations = list(constraints.keys())
        constraint_lb_denotations = [LB_PREFIX + k for k in constraints]
        constraint_ub_denotations = [UB_PREFIX + k for k in constraints]

        # aggregate outputs (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==agentlib_mpc.optimization_backends.casadi_.basic:[192:199]
==agentlib_mpc.optimization_backends.casadi_.casadi_admm_ml:[406:413]
        constraints = {"model_constraints": system.model_constraints}

        inputs = [
            q.full_symbolic
            for q in all_system_quantities.values()
            if q.use_in_stage_function
        ] (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==agentlib_mpc.optimization_backends.casadi_.basic:[5:11]
==agentlib_mpc.optimization_backends.casadi_.mhe:[9:15]
from agentlib_mpc.data_structures.casadi_utils import (
    Constraint,
    LB_PREFIX,
    UB_PREFIX,
    DiscretizationMethod,
    SolverFactory, (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==agentlib_mpc.optimization_backends.casadi_.basic:[437:444]
==agentlib_mpc.optimization_backends.casadi_.minlp:[164:171]
            )
            xk_end = fk["xf"]
            # calculate model constraint
            self.k += 1
            self.pred_time = ts * self.k
            xk = self.add_opt_var(sys.states)
            vars_dict[sys.states.name][self.k] = xk (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==agentlib_mpc.optimization_backends.casadi_.basic:[118:133]
==agentlib_mpc.optimization_backends.casadi_.minlp:[70:85]
        collocation_matrices = self._collocation_polynomial()

        # shorthands
        n = self.options.prediction_horizon
        ts = self.options.time_step

        # Initial State
        x0 = self.add_opt_par(sys.initial_state)
        xk = self.add_opt_var(sys.states, lb=x0, ub=x0, guess=x0)

        # Parameters that are constant over the horizon
        const_par = self.add_opt_par(sys.model_parameters)

        # Formulate the NLP
        # loop over prediction horizon (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==agentlib_mpc.optimization_backends.casadi_.admm:[300:308]
==agentlib_mpc.optimization_backends.casadi_.basic:[449:458]
        if sys.states.full_symbolic.shape[0] == 0:
            return lambda *args, **kwargs: {"xf": ca.MX.sym("xk_end", 0)}

        ode = sys.ode
        # create inputs
        x = sys.states.full_symbolic
        # the order of elements here is important when calling the integrator!
        p = ca.vertcat(
            sys.controls.full_symbolic, (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==agentlib_mpc.optimization_backends.casadi_.basic:[218:224]
==agentlib_mpc.optimization_backends.casadi_.casadi_ml:[322:328]
            system.cost_function,
            *constraints_func,
            *constraints_lb,
            *constraints_ub,
        ]
        output_denotations = [ (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==agentlib_mpc.optimization_backends.casadi_.basic:[208:216]
==agentlib_mpc.optimization_backends.casadi_.casadi_ml:[272:280]
        constraints_func = [c.function for c in constraints.values()]
        constraints_lb = [c.lb for c in constraints.values()]
        constraints_ub = [c.ub for c in constraints.values()]
        constraint_denotations = list(constraints.keys())
        constraint_lb_denotations = [LB_PREFIX + k for k in constraints]
        constraint_ub_denotations = [UB_PREFIX + k for k in constraints]

        # aggregate outputs (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==agentlib_mpc.optimization_backends.casadi_.basic:[92:98]
==agentlib_mpc.optimization_backends.casadi_.casadi_ml:[95:101]
        self.cost_function = model.cost_func
        self.model_constraints = Constraint(
            function=ca.vertcat(*[c.function for c in model.get_constraints()]),
            lb=ca.vertcat(*[c.lb for c in model.get_constraints()]),
            ub=ca.vertcat(*[c.ub for c in model.get_constraints()]),
        ) (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==agentlib_mpc.utils.plotting.admm_dashboard:[19:37]
==agentlib_mpc.utils.plotting.interactive:[18:27]
except ImportError as e:
    raise OptionalDependencyError(
        dependency_name="interactive",
        dependency_install="plotly, dash",
        used_object="interactive",
    ) from e


def make_figure_plotly() -> go.Figure: (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==agentlib_mpc.optimization_backends.casadi_.mhe:[473:481]
==agentlib_mpc.utils.sampling:[94:102]
    else:
        raise TypeError(
            f"Passed trajectory of type '{type(trajectory)}' " f"cannot be sampled."
        )
    target_grid = np.array(grid) + current

    # expand scalar values
    if len(source_grid) == 1: (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==Room_model:[21:28]
==simulation_model:[23:30]
        CasadiInput(
            name="mDot_ahu",
            value=0.025,
            unit="K",
            description="air water mass flow into AHU",
        ),
        # disturbances (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==mhe_example:[224:230]
==test_mpc:[129:135]
            {
                "module_id": "myMPC",
                "type": "agentlib_mpc.mpc",
                "optimization_backend": {
                    "type": "casadi",
                    "model": { (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==admm_example_coordinator:[113:121]
==admm_example_coordinator_multiprocessing:[105:113]
    if with_plots:
        plot(results, start_pred=start_pred)
    return results


if __name__ == "__main__":
    run_example(
        with_plots=True, (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==admm_example_coordinator:[52:60]
==admm_example_local:[41:49]
    mpc_room_results = results["CooledRoom"]["admm_module"]

    room_res = admm_at_time_step(
        data=mpc_room_results, time_step=start_pred, iteration=-1
    )

    fig, ax = plt.subplots(2, 1)
    ax[0].axhline(294.55, label="reference value", ls="--") (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==admm_example_coordinator_multiprocessing:[99:106]
==admm_example_multiprocessing:[101:108]
        cleanup=cleanup,
        log_level=log_level,
    )
    mas.run(until=until)
    results = mas.get_results()

    if with_plots: (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==mhe_example:[61:67]
==model:[42:48]
        CasadiState(
            name="T_slack",
            value=0,
            unit="K",
            description="Slack variable of temperature of zone",
        ), (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==training_nn:[192:198]
==training_nn:[200:206]
    logging.basicConfig(level=logging.INFO)
    mas = LocalMASAgency(
        agent_configs=configs(
            training_time=training_time,
            plot_results=plot_results,
            step_size=step_size, (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==training_nn:[84:90]
==training_nn:[87:93]
                "batch_size": 64,
                "inputs": [
                    {"name": "mDot", "value": 0.0225, "source": "PID"},
                    {"name": "load", "value": 30, "source": "Simulator"},
                    {"name": "T_in", "value": 290.15},
                ], (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==mixed_integer.mixed_integer_mpc_cia:[231:237]
==simple_mpc_gpr:[135:141]
            ax=ax[0],
            plot_actual_values=True,
            plot_predictions=True,
        )
        ax[0].axhline(ub - 273.15, color="grey", linestyle="--", label="upper boundary")
        plot_mpc( (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==mixed_integer.mixed_integer_mpc:[218:225]
==simple_mpc_nn:[120:127]
    )
    mas.run(until=until)
    results = mas.get_results()
    if with_plots:
        import matplotlib.pyplot as plt
        from agentlib_mpc.utils.plotting.mpc import plot_mpc
 (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==mixed_integer.mixed_integer_mpc:[231:237]
==simple_mpc_linreg:[136:142]
            ax=ax[0],
            plot_actual_values=True,
            plot_predictions=True,
        )
        ax[0].axhline(ub - 273.15, color="grey", linestyle="--", label="upper boundary")
        plot_mpc( (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==predictor:[12:21]
==simple_mpc_with_time_variant_inputs:[50:59]
class PredictorModuleConfig(al.BaseModuleConfig):
    """Module that outputs a prediction of the heat load at a specified
    interval."""

    outputs: al.AgentVariables = [
        al.AgentVariable(
            name="load_prediction", type="pd.Series", description="test_description"
        ),
        al.AgentVariable( (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==mixed_integer.mixed_integer_mpc:[151:157]
==simple_mpc:[134:140]
                "model": {"type": {"file": __file__, "class_name": "MyCasadiModel"}},
                "discretization_options": {
                    "collocation_order": 2,
                    "collocation_method": "legendre",
                },
                "solver": { (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==admm_4rooms_coord_main:[25:32]
==examples.three_zone_datadriven_admm.admm_3zone_sim:[67:74]
    mas = LocalMASAgency(
        agent_configs=agent_configs, env=env_config, variable_logging=False
    )
    mas.run(until=until)
    results = mas.get_results(cleanup=cleanup)

    if with_plots: (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==ca_cooler_model:[36:43]
==models.room_model:[43:49]
    ]

    outputs: list[CasadiOutput] = [
        CasadiOutput(
            name="mDot_out",
            value=0.0225,
            unit="kg/s", (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==admm_4rooms_coord_main:[27:35]
==admm_4rooms_main:[46:54]
    )
    mas.run(until=until)
    results = mas.get_results(cleanup=cleanup)

    if with_plots:
        import matplotlib.pyplot as plt
        from agentlib_mpc.utils.analysis import admm_at_time_step
 (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==agentlib_mpc.modules.estimation.mhe:[135:143]
==agentlib_mpc.modules.mpc:[272:277]
        except (RuntimeError, ValueError) as err:
            raise ConfigurationError(
                f"The optimization backend of Agent {self.source} could not "
                f"finish its setup!"
            ) from err (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==agentlib_mpc.modules.minlp_mpc:[103:109]
==agentlib_mpc.modules.mpc:[407:412]
        results_file = self.optimization_backend.config.results_file
        if not results_file:
            return
        os.remove(results_file)
        os.remove(mpc_datamodels.stats_path(results_file))
 (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==agentlib_mpc.optimization_backends.casadi_.admm:[114:123]
==agentlib_mpc.optimization_backends.casadi_.minlp:[70:81]
        collocation_matrices = self._collocation_polynomial()

        # shorthands
        n = self.options.prediction_horizon
        ts = self.options.time_step

        # Initial State
        x0 = self.add_opt_par(sys.initial_state)
        xk = self.add_opt_var(sys.states, lb=x0, ub=x0, guess=x0) (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==agentlib_mpc.optimization_backends.casadi_.basic:[118:129]
==agentlib_mpc.optimization_backends.casadi_.full:[49:58]
        collocation_matrices = self._collocation_polynomial()

        # shorthands
        n = self.options.prediction_horizon
        ts = self.options.time_step

        # Initial State
        x0 = self.add_opt_par(sys.initial_state)
        xk = self.add_opt_var(sys.states, lb=x0, ub=x0, guess=x0)

        # Parameters that are constant over the horizon (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==agentlib_mpc.optimization_backends.backend:[65:70]
==agentlib_mpc.optimization_backends.casadi_.minlp_cia:[40:45]
        if res_file and info.data["save_results"]:
            if overwrite_result_file:
                try:
                    os.remove(res_file)
                    os.remove(mpc_datamodels.stats_path(res_file)) (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==agentlib_mpc.utils.plotting.admm_dashboard:[13:18]
==agentlib_mpc.utils.plotting.interactive:[13:18]
try:
    import dash
    from dash import html, dcc
    from dash.dependencies import Input, Output, State
    import plotly.graph_objects as go (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==Room_model:[2:7]
==simulation_model:[7:12]
from agentlib_mpc.models.casadi_model import (
    CasadiInput,
    CasadiState,
    CasadiParameter,
    CasadiOutput, (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==model:[4:9]
==simulation_model:[8:13]
    CasadiInput,
    CasadiState,
    CasadiParameter,
    CasadiOutput,
    CasadiModel, (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==training_gpr:[103:108]
==training_linreg:[98:103]
                "use_values_for_incomplete_data": True,
                "data_sources": ["results//simulation_data_14days.csv"],
                "save_data": True,
                "save_ml_model": True,
                "save_plots": True, (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==mixed_integer.mixed_integer_mpc:[221:227]
==mixed_integer.mixed_integer_mpc_cia:[219:228]
    if with_plots:
        import matplotlib.pyplot as plt
        from agentlib_mpc.utils.plotting.mpc import plot_mpc

        fig, ax = plt.subplots(3, 1, sharex=True)
        mpc_results = results["myMPCAgent"]["myMPC"] (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==predictor:[126:134]
==simple_mpc_with_time_variant_inputs:[104:113]
        pass

    def process(self):
        """Sets a new prediction at each time step."""
        self.env.process(self.send_comfort_trajectories())

        while True:
            ts = self.get("sampling_time").value
            n = self.get("prediction_length").value (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==ca_cooler_model:[30:35]
==simple_mpc_time_dependent_obj:[83:88]
        CasadiParameter(
            name="r_mDot",
            value=1,
            unit="-",
            description="Weight for mDot in objective function", (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==mixed_integer.mixed_integer_mpc:[0:7]
==simple_mpc_time_dependent_obj:[0:6]
import logging
import os
from pathlib import Path
from typing import List
import casadi as ca
 (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==simple_mpc_time_dependent_obj:[21:31]
==with_change_control_penalty:[15:25]
logger = logging.getLogger(__name__)

# script variables
ub = 295.15


class MyCasadiModelConfig(CasadiModelConfig):
    inputs: List[CasadiInput] = [
        # controls
        CasadiInput( (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==simple_mpc_time_dependent_obj:[27:33]
==simple_mpc_with_time_variant_inputs:[137:143]
class MyCasadiModelConfig(CasadiModelConfig):
    inputs: List[CasadiInput] = [
        # controls
        CasadiInput(
            name="mDot",
            value=0.0225, (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==ca_cooler_model:[11:17]
==models.room_model:[11:17]
    inputs: list[CasadiInput] = [
        # controls
        CasadiInput(
            name="mDot",
            value=0.0225,
            unit="kg/s", (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==admm_4rooms_main_coord:[66:73]
==admm_example_coordinator:[115:122]
    return results


if __name__ == "__main__":
    run_example(
        with_plots=True,
        until=1800, (duplicate-code)
tests/fixtures/ann.py:1:0: R0801: Similar lines in 2 files
==admm_4rooms_main:[0:8]
==admm_4rooms_main_coord:[0:6]
import json
import os
import logging
from agentlib.utils.multi_agent_system import LocalMASAgency


def configs() -> list[dict]:
    agent_configs = [ (duplicate-code)

-----------------------------------
Your code has been rated at 3.77/10

