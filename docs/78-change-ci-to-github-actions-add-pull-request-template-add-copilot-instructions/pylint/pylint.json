{
    "messages": [
        {
            "type": "refactor",
            "module": "/home/runner/work/AgentLib-MPC/AgentLib-MPC/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'print-statement' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/AgentLib-MPC/AgentLib-MPC/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'parameter-unpacking' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/AgentLib-MPC/AgentLib-MPC/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'unpacking-in-except' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/AgentLib-MPC/AgentLib-MPC/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'old-raise-syntax' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/AgentLib-MPC/AgentLib-MPC/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'backtick' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/AgentLib-MPC/AgentLib-MPC/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'import-star-module-level' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/AgentLib-MPC/AgentLib-MPC/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'apply-builtin' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/AgentLib-MPC/AgentLib-MPC/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'basestring-builtin' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/AgentLib-MPC/AgentLib-MPC/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'buffer-builtin' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/AgentLib-MPC/AgentLib-MPC/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'cmp-builtin' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/AgentLib-MPC/AgentLib-MPC/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'coerce-builtin' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/AgentLib-MPC/AgentLib-MPC/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'execfile-builtin' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/AgentLib-MPC/AgentLib-MPC/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'file-builtin' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/AgentLib-MPC/AgentLib-MPC/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'long-builtin' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/AgentLib-MPC/AgentLib-MPC/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'raw_input-builtin' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/AgentLib-MPC/AgentLib-MPC/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'reduce-builtin' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/AgentLib-MPC/AgentLib-MPC/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'standarderror-builtin' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/AgentLib-MPC/AgentLib-MPC/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'unicode-builtin' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/AgentLib-MPC/AgentLib-MPC/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'xrange-builtin' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/AgentLib-MPC/AgentLib-MPC/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'coerce-method' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/AgentLib-MPC/AgentLib-MPC/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'delslice-method' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/AgentLib-MPC/AgentLib-MPC/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'getslice-method' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/AgentLib-MPC/AgentLib-MPC/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'setslice-method' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/AgentLib-MPC/AgentLib-MPC/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'no-absolute-import' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/AgentLib-MPC/AgentLib-MPC/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'old-division' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/AgentLib-MPC/AgentLib-MPC/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'dict-iter-method' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/AgentLib-MPC/AgentLib-MPC/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'dict-view-method' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/AgentLib-MPC/AgentLib-MPC/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'next-method-called' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/AgentLib-MPC/AgentLib-MPC/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'metaclass-assignment' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/AgentLib-MPC/AgentLib-MPC/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'indexing-exception' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/AgentLib-MPC/AgentLib-MPC/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'raising-string' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/AgentLib-MPC/AgentLib-MPC/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'reload-builtin' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/AgentLib-MPC/AgentLib-MPC/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'oct-method' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/AgentLib-MPC/AgentLib-MPC/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'hex-method' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/AgentLib-MPC/AgentLib-MPC/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'nonzero-method' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/AgentLib-MPC/AgentLib-MPC/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'cmp-method' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/AgentLib-MPC/AgentLib-MPC/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'input-builtin' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/AgentLib-MPC/AgentLib-MPC/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'round-builtin' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/AgentLib-MPC/AgentLib-MPC/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'intern-builtin' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/AgentLib-MPC/AgentLib-MPC/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'unichr-builtin' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/AgentLib-MPC/AgentLib-MPC/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'map-builtin-not-iterating' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/AgentLib-MPC/AgentLib-MPC/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'zip-builtin-not-iterating' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/AgentLib-MPC/AgentLib-MPC/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'range-builtin-not-iterating' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/AgentLib-MPC/AgentLib-MPC/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'filter-builtin-not-iterating' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/AgentLib-MPC/AgentLib-MPC/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'using-cmp-argument' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/AgentLib-MPC/AgentLib-MPC/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'div-method' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/AgentLib-MPC/AgentLib-MPC/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'idiv-method' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/AgentLib-MPC/AgentLib-MPC/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'rdiv-method' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/AgentLib-MPC/AgentLib-MPC/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'exception-message-attribute' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/AgentLib-MPC/AgentLib-MPC/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'invalid-str-codec' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/AgentLib-MPC/AgentLib-MPC/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'sys-max-int' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/AgentLib-MPC/AgentLib-MPC/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'bad-python3-import' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/AgentLib-MPC/AgentLib-MPC/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'deprecated-string-function' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/AgentLib-MPC/AgentLib-MPC/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'deprecated-str-translate-call' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/AgentLib-MPC/AgentLib-MPC/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'deprecated-itertools-function' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/AgentLib-MPC/AgentLib-MPC/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'deprecated-types-field' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/AgentLib-MPC/AgentLib-MPC/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'next-method-defined' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/AgentLib-MPC/AgentLib-MPC/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'dict-items-not-iterating' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/AgentLib-MPC/AgentLib-MPC/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'dict-keys-not-iterating' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/AgentLib-MPC/AgentLib-MPC/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'dict-values-not-iterating' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/AgentLib-MPC/AgentLib-MPC/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'deprecated-operator-function' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/AgentLib-MPC/AgentLib-MPC/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'deprecated-urllib-function' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/AgentLib-MPC/AgentLib-MPC/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'xreadlines-attribute' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/AgentLib-MPC/AgentLib-MPC/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'deprecated-sys-function' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/AgentLib-MPC/AgentLib-MPC/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'exception-escape' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/AgentLib-MPC/AgentLib-MPC/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'comprehension-escape' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/AgentLib-MPC/AgentLib-MPC/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'no-self-use' was moved to an optional extension, see https://pylint.readthedocs.io/en/latest/whatsnew/2/2.14/summary.html#removed-checkers.",
            "message-id": "R0022"
        },
        {
            "type": "warning",
            "module": "/home/runner/work/AgentLib-MPC/AgentLib-MPC/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "unknown-option-value",
            "message": "Unknown option value for '--disable', expected a valid pylint message and got 'long-suffix'",
            "message-id": "W0012"
        },
        {
            "type": "warning",
            "module": "/home/runner/work/AgentLib-MPC/AgentLib-MPC/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "unknown-option-value",
            "message": "Unknown option value for '--disable', expected a valid pylint message and got 'old-ne-operator'",
            "message-id": "W0012"
        },
        {
            "type": "warning",
            "module": "/home/runner/work/AgentLib-MPC/AgentLib-MPC/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "unknown-option-value",
            "message": "Unknown option value for '--disable', expected a valid pylint message and got 'old-octal-literal'",
            "message-id": "W0012"
        },
        {
            "type": "warning",
            "module": "/home/runner/work/AgentLib-MPC/AgentLib-MPC/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "unknown-option-value",
            "message": "Unknown option value for '--disable', expected a valid pylint message and got 'non-ascii-bytes-literal'",
            "message-id": "W0012"
        },
        {
            "type": "warning",
            "module": "/home/runner/work/AgentLib-MPC/AgentLib-MPC/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "unknown-option-value",
            "message": "Unknown option value for '--disable', expected a valid pylint message and got 'eq-without-hash'",
            "message-id": "W0012"
        },
        {
            "type": "fatal",
            "module": "agentlib_mpc.utils.plotting.basic",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/utils/plotting/basic.py",
            "symbol": "astroid-error",
            "message": "agentlib_mpc/utils/plotting/basic.py: Fatal error while checking 'agentlib_mpc/utils/plotting/basic.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-28-29.txt'.",
            "message-id": "F0002"
        },
        {
            "type": "fatal",
            "module": "agentlib_mpc.data_structures.mpc_datamodels",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/data_structures/mpc_datamodels.py",
            "symbol": "astroid-error",
            "message": "agentlib_mpc/data_structures/mpc_datamodels.py: Fatal error while checking 'agentlib_mpc/data_structures/mpc_datamodels.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-28-29.txt'.",
            "message-id": "F0002"
        },
        {
            "type": "fatal",
            "module": "agentlib_mpc.data_structures.admm_datatypes",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/data_structures/admm_datatypes.py",
            "symbol": "astroid-error",
            "message": "agentlib_mpc/data_structures/admm_datatypes.py: Fatal error while checking 'agentlib_mpc/data_structures/admm_datatypes.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-28-29.txt'.",
            "message-id": "F0002"
        },
        {
            "type": "fatal",
            "module": "agentlib_mpc.data_structures.casadi_utils",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/data_structures/casadi_utils.py",
            "symbol": "astroid-error",
            "message": "agentlib_mpc/data_structures/casadi_utils.py: Fatal error while checking 'agentlib_mpc/data_structures/casadi_utils.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-28-29.txt'.",
            "message-id": "F0002"
        },
        {
            "type": "convention",
            "module": "admm_4rooms_main_coord",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/exchange_admm/admm_4rooms_main_coord.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "error",
            "module": "admm_4rooms_main_coord",
            "obj": "",
            "line": 4,
            "column": 0,
            "path": "examples/exchange_admm/admm_4rooms_main_coord.py",
            "symbol": "import-error",
            "message": "Unable to import 'agentlib.utils.multi_agent_system'",
            "message-id": "E0401"
        },
        {
            "type": "convention",
            "module": "admm_4rooms_main_coord",
            "obj": "run_example",
            "line": 17,
            "column": 0,
            "path": "examples/exchange_admm/admm_4rooms_main_coord.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "refactor",
            "module": "admm_4rooms_main_coord",
            "obj": "run_example",
            "line": 17,
            "column": 0,
            "path": "examples/exchange_admm/admm_4rooms_main_coord.py",
            "symbol": "too-many-locals",
            "message": "Too many local variables (18/15)",
            "message-id": "R0914"
        },
        {
            "type": "warning",
            "module": "admm_4rooms_main_coord",
            "obj": "run_example",
            "line": 33,
            "column": 13,
            "path": "examples/exchange_admm/admm_4rooms_main_coord.py",
            "symbol": "unspecified-encoding",
            "message": "Using open without explicitly specifying an encoding",
            "message-id": "W1514"
        },
        {
            "type": "convention",
            "module": "admm_4rooms_main_coord",
            "obj": "run_example",
            "line": 33,
            "column": 27,
            "path": "examples/exchange_admm/admm_4rooms_main_coord.py",
            "symbol": "invalid-name",
            "message": "Variable name \"f\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "warning",
            "module": "admm_4rooms_main_coord",
            "obj": "run_example",
            "line": 38,
            "column": 21,
            "path": "examples/exchange_admm/admm_4rooms_main_coord.py",
            "symbol": "unspecified-encoding",
            "message": "Using open without explicitly specifying an encoding",
            "message-id": "W1514"
        },
        {
            "type": "convention",
            "module": "admm_4rooms_main_coord",
            "obj": "run_example",
            "line": 38,
            "column": 34,
            "path": "examples/exchange_admm/admm_4rooms_main_coord.py",
            "symbol": "invalid-name",
            "message": "Variable name \"f\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "admm_4rooms_main_coord",
            "obj": "run_example",
            "line": 51,
            "column": 8,
            "path": "examples/exchange_admm/admm_4rooms_main_coord.py",
            "symbol": "import-outside-toplevel",
            "message": "Import outside toplevel (matplotlib.pyplot)",
            "message-id": "C0415"
        },
        {
            "type": "error",
            "module": "admm_4rooms_main_coord",
            "obj": "run_example",
            "line": 51,
            "column": 8,
            "path": "examples/exchange_admm/admm_4rooms_main_coord.py",
            "symbol": "import-error",
            "message": "Unable to import 'matplotlib.pyplot'",
            "message-id": "E0401"
        },
        {
            "type": "convention",
            "module": "admm_4rooms_main_coord",
            "obj": "run_example",
            "line": 53,
            "column": 13,
            "path": "examples/exchange_admm/admm_4rooms_main_coord.py",
            "symbol": "invalid-name",
            "message": "Variable name \"ax\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "warning",
            "module": "admm_4rooms_main_coord",
            "obj": "run_example",
            "line": 53,
            "column": 8,
            "path": "examples/exchange_admm/admm_4rooms_main_coord.py",
            "symbol": "unused-variable",
            "message": "Unused variable 'fig'",
            "message-id": "W0612"
        },
        {
            "type": "convention",
            "module": "admm_4rooms_main",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/exchange_admm/admm_4rooms_main.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "error",
            "module": "admm_4rooms_main",
            "obj": "",
            "line": 4,
            "column": 0,
            "path": "examples/exchange_admm/admm_4rooms_main.py",
            "symbol": "import-error",
            "message": "Unable to import 'agentlib.utils.multi_agent_system'",
            "message-id": "E0401"
        },
        {
            "type": "convention",
            "module": "admm_4rooms_main",
            "obj": "configs",
            "line": 7,
            "column": 0,
            "path": "examples/exchange_admm/admm_4rooms_main.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "warning",
            "module": "admm_4rooms_main",
            "obj": "configs",
            "line": 18,
            "column": 13,
            "path": "examples/exchange_admm/admm_4rooms_main.py",
            "symbol": "unspecified-encoding",
            "message": "Using open without explicitly specifying an encoding",
            "message-id": "W1514"
        },
        {
            "type": "convention",
            "module": "admm_4rooms_main",
            "obj": "configs",
            "line": 18,
            "column": 27,
            "path": "examples/exchange_admm/admm_4rooms_main.py",
            "symbol": "invalid-name",
            "message": "Variable name \"f\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "warning",
            "module": "admm_4rooms_main",
            "obj": "configs",
            "line": 23,
            "column": 21,
            "path": "examples/exchange_admm/admm_4rooms_main.py",
            "symbol": "unspecified-encoding",
            "message": "Using open without explicitly specifying an encoding",
            "message-id": "W1514"
        },
        {
            "type": "convention",
            "module": "admm_4rooms_main",
            "obj": "configs",
            "line": 23,
            "column": 34,
            "path": "examples/exchange_admm/admm_4rooms_main.py",
            "symbol": "invalid-name",
            "message": "Variable name \"f\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "warning",
            "module": "admm_4rooms_main",
            "obj": "configs",
            "line": 21,
            "column": 12,
            "path": "examples/exchange_admm/admm_4rooms_main.py",
            "symbol": "unused-variable",
            "message": "Unused variable 'i'",
            "message-id": "W0612"
        },
        {
            "type": "convention",
            "module": "admm_4rooms_main",
            "obj": "run_example",
            "line": 31,
            "column": 0,
            "path": "examples/exchange_admm/admm_4rooms_main.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "admm_4rooms_main",
            "obj": "run_example",
            "line": 52,
            "column": 8,
            "path": "examples/exchange_admm/admm_4rooms_main.py",
            "symbol": "import-outside-toplevel",
            "message": "Import outside toplevel (matplotlib.pyplot)",
            "message-id": "C0415"
        },
        {
            "type": "error",
            "module": "admm_4rooms_main",
            "obj": "run_example",
            "line": 52,
            "column": 8,
            "path": "examples/exchange_admm/admm_4rooms_main.py",
            "symbol": "import-error",
            "message": "Unable to import 'matplotlib.pyplot'",
            "message-id": "E0401"
        },
        {
            "type": "convention",
            "module": "admm_4rooms_main",
            "obj": "run_example",
            "line": 53,
            "column": 8,
            "path": "examples/exchange_admm/admm_4rooms_main.py",
            "symbol": "import-outside-toplevel",
            "message": "Import outside toplevel (agentlib_mpc.utils.analysis.admm_at_time_step)",
            "message-id": "C0415"
        },
        {
            "type": "convention",
            "module": "admm_4rooms_main",
            "obj": "run_example",
            "line": 55,
            "column": 13,
            "path": "examples/exchange_admm/admm_4rooms_main.py",
            "symbol": "invalid-name",
            "message": "Variable name \"ax\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "warning",
            "module": "admm_4rooms_main",
            "obj": "run_example",
            "line": 34,
            "column": 4,
            "path": "examples/exchange_admm/admm_4rooms_main.py",
            "symbol": "unused-argument",
            "message": "Unused argument 'start_pred'",
            "message-id": "W0613"
        },
        {
            "type": "warning",
            "module": "admm_4rooms_main",
            "obj": "run_example",
            "line": 55,
            "column": 8,
            "path": "examples/exchange_admm/admm_4rooms_main.py",
            "symbol": "unused-variable",
            "message": "Unused variable 'fig'",
            "message-id": "W0612"
        },
        {
            "type": "warning",
            "module": "admm_4rooms_main",
            "obj": "run_example",
            "line": 53,
            "column": 8,
            "path": "examples/exchange_admm/admm_4rooms_main.py",
            "symbol": "unused-import",
            "message": "Unused admm_at_time_step imported from agentlib_mpc.utils.analysis",
            "message-id": "W0611"
        },
        {
            "type": "convention",
            "module": "models.rlt_model",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/exchange_admm/models/rlt_model.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "convention",
            "module": "models.rlt_model",
            "obj": "RLTConfig",
            "line": 11,
            "column": 0,
            "path": "examples/exchange_admm/models/rlt_model.py",
            "symbol": "missing-class-docstring",
            "message": "Missing class docstring",
            "message-id": "C0115"
        },
        {
            "type": "warning",
            "module": "models.rlt_model",
            "obj": "RLTConfig",
            "line": 19,
            "column": 24,
            "path": "examples/exchange_admm/models/rlt_model.py",
            "symbol": "f-string-without-interpolation",
            "message": "Using an f-string that does not have any interpolated variables",
            "message-id": "W1309"
        },
        {
            "type": "warning",
            "module": "models.rlt_model",
            "obj": "RLTConfig",
            "line": 29,
            "column": 24,
            "path": "examples/exchange_admm/models/rlt_model.py",
            "symbol": "f-string-without-interpolation",
            "message": "Using an f-string that does not have any interpolated variables",
            "message-id": "W1309"
        },
        {
            "type": "warning",
            "module": "models.rlt_model",
            "obj": "RLTConfig",
            "line": 40,
            "column": 24,
            "path": "examples/exchange_admm/models/rlt_model.py",
            "symbol": "f-string-without-interpolation",
            "message": "Using an f-string that does not have any interpolated variables",
            "message-id": "W1309"
        },
        {
            "type": "convention",
            "module": "models.rlt_model",
            "obj": "RLT",
            "line": 45,
            "column": 0,
            "path": "examples/exchange_admm/models/rlt_model.py",
            "symbol": "missing-class-docstring",
            "message": "Missing class docstring",
            "message-id": "C0115"
        },
        {
            "type": "convention",
            "module": "models.room_model",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/exchange_admm/models/room_model.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "convention",
            "module": "models.room_model",
            "obj": "CaCooledRoomConfig",
            "line": 11,
            "column": 0,
            "path": "examples/exchange_admm/models/room_model.py",
            "symbol": "missing-class-docstring",
            "message": "Missing class docstring",
            "message-id": "C0115"
        },
        {
            "type": "warning",
            "module": "models.room_model",
            "obj": "CaCooledRoomConfig",
            "line": 40,
            "column": 17,
            "path": "examples/exchange_admm/models/room_model.py",
            "symbol": "f-string-without-interpolation",
            "message": "Using an f-string that does not have any interpolated variables",
            "message-id": "W1309"
        },
        {
            "type": "convention",
            "module": "models.room_model",
            "obj": "CaCooledRoom",
            "line": 82,
            "column": 0,
            "path": "examples/exchange_admm/models/room_model.py",
            "symbol": "missing-class-docstring",
            "message": "Missing class docstring",
            "message-id": "C0115"
        },
        {
            "type": "convention",
            "module": "models.room_model",
            "obj": "CaCooledRoomSimConfig",
            "line": 106,
            "column": 0,
            "path": "examples/exchange_admm/models/room_model.py",
            "symbol": "missing-class-docstring",
            "message": "Missing class docstring",
            "message-id": "C0115"
        },
        {
            "type": "convention",
            "module": "models.room_model",
            "obj": "CaCooledRoomSim",
            "line": 120,
            "column": 0,
            "path": "examples/exchange_admm/models/room_model.py",
            "symbol": "missing-class-docstring",
            "message": "Missing class docstring",
            "message-id": "C0115"
        },
        {
            "type": "convention",
            "module": "examples.output_ann.generate_training_data",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/output_ann/generate_training_data.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "fatal",
            "module": "examples.output_ann.generate_training_data",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/output_ann/generate_training_data.py",
            "symbol": "astroid-error",
            "message": "examples/output_ann/generate_training_data.py: Fatal error while checking 'examples/output_ann/generate_training_data.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-28-30.txt'.",
            "message-id": "F0002"
        },
        {
            "type": "convention",
            "module": "animate",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/4_Room_ADMM_Coordinator/animate.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "error",
            "module": "animate",
            "obj": "",
            "line": 3,
            "column": 0,
            "path": "examples/4_Room_ADMM_Coordinator/animate.py",
            "symbol": "import-error",
            "message": "Unable to import 'matplotlib.pyplot'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "animate",
            "obj": "",
            "line": 4,
            "column": 0,
            "path": "examples/4_Room_ADMM_Coordinator/animate.py",
            "symbol": "import-error",
            "message": "Unable to import 'pandas'",
            "message-id": "E0401"
        },
        {
            "type": "convention",
            "module": "animate",
            "obj": "customize_fig",
            "line": 11,
            "column": 0,
            "path": "examples/4_Room_ADMM_Coordinator/animate.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "animate",
            "obj": "customize_fig",
            "line": 11,
            "column": 35,
            "path": "examples/4_Room_ADMM_Coordinator/animate.py",
            "symbol": "invalid-name",
            "message": "Argument name \"ax\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "animate",
            "obj": "main",
            "line": 25,
            "column": 0,
            "path": "examples/4_Room_ADMM_Coordinator/animate.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "warning",
            "module": "animate",
            "obj": "main",
            "line": 28,
            "column": 38,
            "path": "examples/4_Room_ADMM_Coordinator/animate.py",
            "symbol": "f-string-without-interpolation",
            "message": "Using an f-string that does not have any interpolated variables",
            "message-id": "W1309"
        },
        {
            "type": "convention",
            "module": "admm_4rooms_coord_main",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/4_Room_ADMM_Coordinator/admm_4rooms_coord_main.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "error",
            "module": "admm_4rooms_coord_main",
            "obj": "",
            "line": 3,
            "column": 0,
            "path": "examples/4_Room_ADMM_Coordinator/admm_4rooms_coord_main.py",
            "symbol": "import-error",
            "message": "Unable to import 'agentlib.utils.multi_agent_system'",
            "message-id": "E0401"
        },
        {
            "type": "convention",
            "module": "admm_4rooms_coord_main",
            "obj": "run_example",
            "line": 16,
            "column": 0,
            "path": "examples/4_Room_ADMM_Coordinator/admm_4rooms_coord_main.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "refactor",
            "module": "admm_4rooms_coord_main",
            "obj": "run_example",
            "line": 16,
            "column": 0,
            "path": "examples/4_Room_ADMM_Coordinator/admm_4rooms_coord_main.py",
            "symbol": "too-many-locals",
            "message": "Too many local variables (21/15)",
            "message-id": "R0914"
        },
        {
            "type": "convention",
            "module": "admm_4rooms_coord_main",
            "obj": "run_example",
            "line": 33,
            "column": 8,
            "path": "examples/4_Room_ADMM_Coordinator/admm_4rooms_coord_main.py",
            "symbol": "import-outside-toplevel",
            "message": "Import outside toplevel (matplotlib.pyplot)",
            "message-id": "C0415"
        },
        {
            "type": "error",
            "module": "admm_4rooms_coord_main",
            "obj": "run_example",
            "line": 33,
            "column": 8,
            "path": "examples/4_Room_ADMM_Coordinator/admm_4rooms_coord_main.py",
            "symbol": "import-error",
            "message": "Unable to import 'matplotlib.pyplot'",
            "message-id": "E0401"
        },
        {
            "type": "convention",
            "module": "admm_4rooms_coord_main",
            "obj": "run_example",
            "line": 34,
            "column": 8,
            "path": "examples/4_Room_ADMM_Coordinator/admm_4rooms_coord_main.py",
            "symbol": "import-outside-toplevel",
            "message": "Import outside toplevel (agentlib_mpc.utils.analysis.admm_at_time_step)",
            "message-id": "C0415"
        },
        {
            "type": "convention",
            "module": "admm_4rooms_coord_main",
            "obj": "run_example",
            "line": 36,
            "column": 8,
            "path": "examples/4_Room_ADMM_Coordinator/admm_4rooms_coord_main.py",
            "symbol": "invalid-name",
            "message": "Variable name \"nRooms\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "admm_4rooms_coord_main",
            "obj": "run_example",
            "line": 37,
            "column": 8,
            "path": "examples/4_Room_ADMM_Coordinator/admm_4rooms_coord_main.py",
            "symbol": "invalid-name",
            "message": "Variable name \"plotPredTimeStep\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "warning",
            "module": "admm_4rooms_coord_main",
            "obj": "run_example",
            "line": 42,
            "column": 16,
            "path": "examples/4_Room_ADMM_Coordinator/admm_4rooms_coord_main.py",
            "symbol": "modified-iterating-list",
            "message": "Iterated list 'plotPredTimeStep' is being modified inside for loop body, consider iterating through a copy of it instead.",
            "message-id": "W4701"
        },
        {
            "type": "convention",
            "module": "admm_4rooms_coord_main",
            "obj": "run_example.mDotSumSim",
            "line": 44,
            "column": 8,
            "path": "examples/4_Room_ADMM_Coordinator/admm_4rooms_coord_main.py",
            "symbol": "invalid-name",
            "message": "Function name \"mDotSumSim\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "admm_4rooms_coord_main",
            "obj": "run_example.mDotSumSim",
            "line": 45,
            "column": 12,
            "path": "examples/4_Room_ADMM_Coordinator/admm_4rooms_coord_main.py",
            "symbol": "invalid-name",
            "message": "Variable name \"mDotSum\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "admm_4rooms_coord_main",
            "obj": "run_example.mDotSumSim",
            "line": 47,
            "column": 16,
            "path": "examples/4_Room_ADMM_Coordinator/admm_4rooms_coord_main.py",
            "symbol": "invalid-name",
            "message": "Variable name \"mDotSum\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "admm_4rooms_coord_main",
            "obj": "run_example.mDotSumPred",
            "line": 50,
            "column": 8,
            "path": "examples/4_Room_ADMM_Coordinator/admm_4rooms_coord_main.py",
            "symbol": "invalid-name",
            "message": "Function name \"mDotSumPred\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "admm_4rooms_coord_main",
            "obj": "run_example.mDotSumPred",
            "line": 51,
            "column": 12,
            "path": "examples/4_Room_ADMM_Coordinator/admm_4rooms_coord_main.py",
            "symbol": "invalid-name",
            "message": "Variable name \"mDotSum\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "admm_4rooms_coord_main",
            "obj": "run_example.mDotSumPred",
            "line": 56,
            "column": 16,
            "path": "examples/4_Room_ADMM_Coordinator/admm_4rooms_coord_main.py",
            "symbol": "invalid-name",
            "message": "Variable name \"mDotSum\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "admm_4rooms_coord_main",
            "obj": "run_example",
            "line": 59,
            "column": 8,
            "path": "examples/4_Room_ADMM_Coordinator/admm_4rooms_coord_main.py",
            "symbol": "invalid-name",
            "message": "Variable name \"colorRoom\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "admm_4rooms_coord_main",
            "obj": "run_example",
            "line": 60,
            "column": 13,
            "path": "examples/4_Room_ADMM_Coordinator/admm_4rooms_coord_main.py",
            "symbol": "invalid-name",
            "message": "Variable name \"ax\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "warning",
            "module": "admm_4rooms_coord_main",
            "obj": "run_example",
            "line": 96,
            "column": 8,
            "path": "examples/4_Room_ADMM_Coordinator/admm_4rooms_coord_main.py",
            "symbol": "expression-not-assigned",
            "message": "Expression \"[ax[1].plot(mDotSumPred(j), marker='x', label=f'total air mass flow at {j} pred') for j in plotPredTimeStep]\" is assigned to nothing",
            "message-id": "W0106"
        },
        {
            "type": "warning",
            "module": "admm_4rooms_coord_main",
            "obj": "run_example",
            "line": 60,
            "column": 8,
            "path": "examples/4_Room_ADMM_Coordinator/admm_4rooms_coord_main.py",
            "symbol": "unused-variable",
            "message": "Unused variable 'fig'",
            "message-id": "W0612"
        },
        {
            "type": "convention",
            "module": "models.rlt_model",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/4_Room_ADMM_Coordinator/models/rlt_model.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "warning",
            "module": "models.rlt_model",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/4_Room_ADMM_Coordinator/models/rlt_model.py",
            "symbol": "wildcard-import",
            "message": "Wildcard import agentlib_mpc.models.casadi_model",
            "message-id": "W0401"
        },
        {
            "type": "convention",
            "module": "models.rlt_model",
            "obj": "RLTConfig",
            "line": 26,
            "column": 0,
            "path": "examples/4_Room_ADMM_Coordinator/models/rlt_model.py",
            "symbol": "missing-class-docstring",
            "message": "Missing class docstring",
            "message-id": "C0115"
        },
        {
            "type": "fatal",
            "module": "models.rlt_model",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/4_Room_ADMM_Coordinator/models/rlt_model.py",
            "symbol": "astroid-error",
            "message": "examples/4_Room_ADMM_Coordinator/models/rlt_model.py: Fatal error while checking 'examples/4_Room_ADMM_Coordinator/models/rlt_model.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-28-31.txt'.",
            "message-id": "F0002"
        },
        {
            "type": "convention",
            "module": "models.room_model",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/4_Room_ADMM_Coordinator/models/room_model.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "warning",
            "module": "models.room_model",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/4_Room_ADMM_Coordinator/models/room_model.py",
            "symbol": "wildcard-import",
            "message": "Wildcard import agentlib_mpc.models.casadi_model",
            "message-id": "W0401"
        },
        {
            "type": "convention",
            "module": "models.room_model",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/4_Room_ADMM_Coordinator/models/room_model.py",
            "symbol": "wrong-import-position",
            "message": "Import \"from agentlib_mpc.models.casadi_model import *\" should be placed at the top of the module",
            "message-id": "C0413"
        },
        {
            "type": "convention",
            "module": "models.room_model",
            "obj": "CaCooledRoomConfig",
            "line": 4,
            "column": 0,
            "path": "examples/4_Room_ADMM_Coordinator/models/room_model.py",
            "symbol": "missing-class-docstring",
            "message": "Missing class docstring",
            "message-id": "C0115"
        },
        {
            "type": "fatal",
            "module": "models.room_model",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/4_Room_ADMM_Coordinator/models/room_model.py",
            "symbol": "astroid-error",
            "message": "examples/4_Room_ADMM_Coordinator/models/room_model.py: Fatal error while checking 'examples/4_Room_ADMM_Coordinator/models/room_model.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-28-31.txt'.",
            "message-id": "F0002"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.physical.simple_mpc_time_dependent_obj",
            "obj": "",
            "line": 99,
            "column": 0,
            "path": "examples/one_room_mpc/physical/simple_mpc_time_dependent_obj.py",
            "symbol": "line-too-long",
            "message": "Line too long (116/100)",
            "message-id": "C0301"
        },
        {
            "type": "warning",
            "module": "examples.one_room_mpc.physical.simple_mpc_time_dependent_obj",
            "obj": "",
            "line": 283,
            "column": 23,
            "path": "examples/one_room_mpc/physical/simple_mpc_time_dependent_obj.py",
            "symbol": "anomalous-backslash-in-string",
            "message": "Anomalous backslash in string: '\\d'. String constant might be missing an r prefix.",
            "message-id": "W1401"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.physical.simple_mpc_time_dependent_obj",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/one_room_mpc/physical/simple_mpc_time_dependent_obj.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.physical.simple_mpc_time_dependent_obj",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/one_room_mpc/physical/simple_mpc_time_dependent_obj.py",
            "symbol": "wrong-import-position",
            "message": "Import \"import logging\" should be placed at the top of the module",
            "message-id": "C0413"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.physical.simple_mpc_time_dependent_obj",
            "obj": "",
            "line": 2,
            "column": 0,
            "path": "examples/one_room_mpc/physical/simple_mpc_time_dependent_obj.py",
            "symbol": "wrong-import-position",
            "message": "Import \"import os\" should be placed at the top of the module",
            "message-id": "C0413"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.physical.simple_mpc_time_dependent_obj",
            "obj": "",
            "line": 3,
            "column": 0,
            "path": "examples/one_room_mpc/physical/simple_mpc_time_dependent_obj.py",
            "symbol": "wrong-import-position",
            "message": "Import \"from pathlib import Path\" should be placed at the top of the module",
            "message-id": "C0413"
        },
        {
            "type": "fatal",
            "module": "examples.one_room_mpc.physical.simple_mpc_time_dependent_obj",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/one_room_mpc/physical/simple_mpc_time_dependent_obj.py",
            "symbol": "astroid-error",
            "message": "examples/one_room_mpc/physical/simple_mpc_time_dependent_obj.py: Fatal error while checking 'examples/one_room_mpc/physical/simple_mpc_time_dependent_obj.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-28-31.txt'.",
            "message-id": "F0002"
        },
        {
            "type": "warning",
            "module": "examples.one_room_mpc.physical.simple_mpc_multiple_shooting",
            "obj": "",
            "line": 261,
            "column": 23,
            "path": "examples/one_room_mpc/physical/simple_mpc_multiple_shooting.py",
            "symbol": "anomalous-backslash-in-string",
            "message": "Anomalous backslash in string: '\\d'. String constant might be missing an r prefix.",
            "message-id": "W1401"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.physical.simple_mpc_multiple_shooting",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/one_room_mpc/physical/simple_mpc_multiple_shooting.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.physical.simple_mpc_multiple_shooting",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/one_room_mpc/physical/simple_mpc_multiple_shooting.py",
            "symbol": "wrong-import-position",
            "message": "Import \"import logging\" should be placed at the top of the module",
            "message-id": "C0413"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.physical.simple_mpc_multiple_shooting",
            "obj": "",
            "line": 2,
            "column": 0,
            "path": "examples/one_room_mpc/physical/simple_mpc_multiple_shooting.py",
            "symbol": "wrong-import-position",
            "message": "Import \"import os\" should be placed at the top of the module",
            "message-id": "C0413"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.physical.simple_mpc_multiple_shooting",
            "obj": "",
            "line": 3,
            "column": 0,
            "path": "examples/one_room_mpc/physical/simple_mpc_multiple_shooting.py",
            "symbol": "wrong-import-position",
            "message": "Import \"from pathlib import Path\" should be placed at the top of the module",
            "message-id": "C0413"
        },
        {
            "type": "fatal",
            "module": "examples.one_room_mpc.physical.simple_mpc_multiple_shooting",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/one_room_mpc/physical/simple_mpc_multiple_shooting.py",
            "symbol": "astroid-error",
            "message": "examples/one_room_mpc/physical/simple_mpc_multiple_shooting.py: Fatal error while checking 'examples/one_room_mpc/physical/simple_mpc_multiple_shooting.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-28-31.txt'.",
            "message-id": "F0002"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.physical.simple_mpc_with_clonemap",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/one_room_mpc/physical/simple_mpc_with_clonemap.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.physical.simple_mpc_with_clonemap",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/one_room_mpc/physical/simple_mpc_with_clonemap.py",
            "symbol": "wrong-import-position",
            "message": "Import \"import logging\" should be placed at the top of the module",
            "message-id": "C0413"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.physical.simple_mpc_with_clonemap",
            "obj": "",
            "line": 2,
            "column": 0,
            "path": "examples/one_room_mpc/physical/simple_mpc_with_clonemap.py",
            "symbol": "wrong-import-position",
            "message": "Import \"from pathlib import Path\" should be placed at the top of the module",
            "message-id": "C0413"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.physical.simple_mpc_with_clonemap",
            "obj": "",
            "line": 3,
            "column": 0,
            "path": "examples/one_room_mpc/physical/simple_mpc_with_clonemap.py",
            "symbol": "wrong-import-position",
            "message": "Import \"import json\" should be placed at the top of the module",
            "message-id": "C0413"
        },
        {
            "type": "error",
            "module": "examples.one_room_mpc.physical.simple_mpc_with_clonemap",
            "obj": "",
            "line": 4,
            "column": 0,
            "path": "examples/one_room_mpc/physical/simple_mpc_with_clonemap.py",
            "symbol": "import-error",
            "message": "Unable to import 'requests'",
            "message-id": "E0401"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.physical.simple_mpc_with_clonemap",
            "obj": "",
            "line": 4,
            "column": 0,
            "path": "examples/one_room_mpc/physical/simple_mpc_with_clonemap.py",
            "symbol": "wrong-import-position",
            "message": "Import \"import requests\" should be placed at the top of the module",
            "message-id": "C0413"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.physical.simple_mpc_with_clonemap",
            "obj": "run_example_clonemap",
            "line": 10,
            "column": 0,
            "path": "examples/one_room_mpc/physical/simple_mpc_with_clonemap.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.physical.simple_mpc_with_clonemap",
            "obj": "run_example_clonemap",
            "line": 12,
            "column": 4,
            "path": "examples/one_room_mpc/physical/simple_mpc_with_clonemap.py",
            "symbol": "invalid-name",
            "message": "Variable name \"URL\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.physical.simple_mpc_with_clonemap",
            "obj": "run_example_clonemap",
            "line": 13,
            "column": 4,
            "path": "examples/one_room_mpc/physical/simple_mpc_with_clonemap.py",
            "symbol": "invalid-name",
            "message": "Variable name \"CFG_PATH\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "warning",
            "module": "examples.one_room_mpc.physical.simple_mpc_with_clonemap",
            "obj": "run_example_clonemap",
            "line": 14,
            "column": 9,
            "path": "examples/one_room_mpc/physical/simple_mpc_with_clonemap.py",
            "symbol": "unspecified-encoding",
            "message": "Using open without explicitly specifying an encoding",
            "message-id": "W1514"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.physical.simple_mpc_with_clonemap",
            "obj": "run_example_clonemap",
            "line": 15,
            "column": 8,
            "path": "examples/one_room_mpc/physical/simple_mpc_with_clonemap.py",
            "symbol": "invalid-name",
            "message": "Variable name \"DATA\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.physical.simple_mpc_time_dependent_obj",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/one_room_mpc/physical/simple_mpc_time_dependent_obj.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"import logging\" should be placed before \"from agentlib_mpc.models.casadi_model import *\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.physical.simple_mpc_time_dependent_obj",
            "obj": "",
            "line": 2,
            "column": 0,
            "path": "examples/one_room_mpc/physical/simple_mpc_time_dependent_obj.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"import os\" should be placed before \"from agentlib_mpc.models.casadi_model import *\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.physical.simple_mpc_time_dependent_obj",
            "obj": "",
            "line": 3,
            "column": 0,
            "path": "examples/one_room_mpc/physical/simple_mpc_time_dependent_obj.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"from pathlib import Path\" should be placed before \"from agentlib_mpc.models.casadi_model import *\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.physical.simple_mpc_multiple_shooting",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/one_room_mpc/physical/simple_mpc_multiple_shooting.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"import logging\" should be placed before \"from agentlib_mpc.models.casadi_model import *\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.physical.simple_mpc_multiple_shooting",
            "obj": "",
            "line": 2,
            "column": 0,
            "path": "examples/one_room_mpc/physical/simple_mpc_multiple_shooting.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"import os\" should be placed before \"from agentlib_mpc.models.casadi_model import *\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.physical.simple_mpc_multiple_shooting",
            "obj": "",
            "line": 3,
            "column": 0,
            "path": "examples/one_room_mpc/physical/simple_mpc_multiple_shooting.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"from pathlib import Path\" should be placed before \"from agentlib_mpc.models.casadi_model import *\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.physical.simple_mpc_with_clonemap",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/one_room_mpc/physical/simple_mpc_with_clonemap.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"import logging\" should be placed before \"from agentlib_mpc.models.casadi_model import *\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.physical.simple_mpc_with_clonemap",
            "obj": "",
            "line": 2,
            "column": 0,
            "path": "examples/one_room_mpc/physical/simple_mpc_with_clonemap.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"from pathlib import Path\" should be placed before \"from agentlib_mpc.models.casadi_model import *\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.physical.simple_mpc_with_clonemap",
            "obj": "",
            "line": 3,
            "column": 0,
            "path": "examples/one_room_mpc/physical/simple_mpc_with_clonemap.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"import json\" should be placed before \"from agentlib_mpc.models.casadi_model import *\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.physical.simple_mpc_with_clonemap",
            "obj": "",
            "line": 4,
            "column": 0,
            "path": "examples/one_room_mpc/physical/simple_mpc_with_clonemap.py",
            "symbol": "wrong-import-order",
            "message": "third party import \"import requests\" should be placed before \"from agentlib_mpc.models.casadi_model import *\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.physical.simple_mpc_multiple_shooting",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/one_room_mpc/physical/simple_mpc_multiple_shooting.py",
            "symbol": "ungrouped-imports",
            "message": "Imports from package logging are not grouped",
            "message-id": "C0412"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.physical.simple_mpc_multiple_shooting",
            "obj": "",
            "line": 2,
            "column": 0,
            "path": "examples/one_room_mpc/physical/simple_mpc_multiple_shooting.py",
            "symbol": "ungrouped-imports",
            "message": "Imports from package os are not grouped",
            "message-id": "C0412"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.physical.simple_mpc_multiple_shooting",
            "obj": "",
            "line": 3,
            "column": 0,
            "path": "examples/one_room_mpc/physical/simple_mpc_multiple_shooting.py",
            "symbol": "ungrouped-imports",
            "message": "Imports from package pathlib are not grouped",
            "message-id": "C0412"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.physical.simple_mpc_with_clonemap",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/one_room_mpc/physical/simple_mpc_with_clonemap.py",
            "symbol": "ungrouped-imports",
            "message": "Imports from package logging are not grouped",
            "message-id": "C0412"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.physical.simple_mpc_with_clonemap",
            "obj": "",
            "line": 2,
            "column": 0,
            "path": "examples/one_room_mpc/physical/simple_mpc_with_clonemap.py",
            "symbol": "ungrouped-imports",
            "message": "Imports from package pathlib are not grouped",
            "message-id": "C0412"
        },
        {
            "type": "warning",
            "module": "examples.one_room_mpc.physical.simple_mpc",
            "obj": "",
            "line": 261,
            "column": 23,
            "path": "examples/one_room_mpc/physical/simple_mpc.py",
            "symbol": "anomalous-backslash-in-string",
            "message": "Anomalous backslash in string: '\\d'. String constant might be missing an r prefix.",
            "message-id": "W1401"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.physical.simple_mpc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/one_room_mpc/physical/simple_mpc.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "fatal",
            "module": "examples.one_room_mpc.physical.simple_mpc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/one_room_mpc/physical/simple_mpc.py",
            "symbol": "astroid-error",
            "message": "examples/one_room_mpc/physical/simple_mpc.py: Fatal error while checking 'examples/one_room_mpc/physical/simple_mpc.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-28-31.txt'.",
            "message-id": "F0002"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.physical.simple_mpc_with_time_variant_inputs",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/one_room_mpc/physical/simple_mpc_with_time_variant_inputs.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "fatal",
            "module": "examples.one_room_mpc.physical.simple_mpc_with_time_variant_inputs",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/one_room_mpc/physical/simple_mpc_with_time_variant_inputs.py",
            "symbol": "astroid-error",
            "message": "examples/one_room_mpc/physical/simple_mpc_with_time_variant_inputs.py: Fatal error while checking 'examples/one_room_mpc/physical/simple_mpc_with_time_variant_inputs.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-28-31.txt'.",
            "message-id": "F0002"
        },
        {
            "type": "warning",
            "module": "examples.one_room_mpc.physical.with_change_control_penalty",
            "obj": "",
            "line": 217,
            "column": 27,
            "path": "examples/one_room_mpc/physical/with_change_control_penalty.py",
            "symbol": "anomalous-backslash-in-string",
            "message": "Anomalous backslash in string: '\\d'. String constant might be missing an r prefix.",
            "message-id": "W1401"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.physical.with_change_control_penalty",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/one_room_mpc/physical/with_change_control_penalty.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "fatal",
            "module": "examples.one_room_mpc.physical.with_change_control_penalty",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/one_room_mpc/physical/with_change_control_penalty.py",
            "symbol": "astroid-error",
            "message": "examples/one_room_mpc/physical/with_change_control_penalty.py: Fatal error while checking 'examples/one_room_mpc/physical/with_change_control_penalty.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-28-31.txt'.",
            "message-id": "F0002"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.physical.mixed_integer.mixed_integer_mpc",
            "obj": "",
            "line": 261,
            "column": 0,
            "path": "examples/one_room_mpc/physical/mixed_integer/mixed_integer_mpc.py",
            "symbol": "line-too-long",
            "message": "Line too long (129/100)",
            "message-id": "C0301"
        },
        {
            "type": "warning",
            "module": "examples.one_room_mpc.physical.mixed_integer.mixed_integer_mpc",
            "obj": "",
            "line": 256,
            "column": 27,
            "path": "examples/one_room_mpc/physical/mixed_integer/mixed_integer_mpc.py",
            "symbol": "anomalous-backslash-in-string",
            "message": "Anomalous backslash in string: '\\d'. String constant might be missing an r prefix.",
            "message-id": "W1401"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.physical.mixed_integer.mixed_integer_mpc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/one_room_mpc/physical/mixed_integer/mixed_integer_mpc.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "fatal",
            "module": "examples.one_room_mpc.physical.mixed_integer.mixed_integer_mpc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/one_room_mpc/physical/mixed_integer/mixed_integer_mpc.py",
            "symbol": "astroid-error",
            "message": "examples/one_room_mpc/physical/mixed_integer/mixed_integer_mpc.py: Fatal error while checking 'examples/one_room_mpc/physical/mixed_integer/mixed_integer_mpc.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-28-31.txt'.",
            "message-id": "F0002"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.physical.mixed_integer.mixed_integer_mpc_cia",
            "obj": "",
            "line": 261,
            "column": 0,
            "path": "examples/one_room_mpc/physical/mixed_integer/mixed_integer_mpc_cia.py",
            "symbol": "line-too-long",
            "message": "Line too long (129/100)",
            "message-id": "C0301"
        },
        {
            "type": "warning",
            "module": "examples.one_room_mpc.physical.mixed_integer.mixed_integer_mpc_cia",
            "obj": "",
            "line": 256,
            "column": 27,
            "path": "examples/one_room_mpc/physical/mixed_integer/mixed_integer_mpc_cia.py",
            "symbol": "anomalous-backslash-in-string",
            "message": "Anomalous backslash in string: '\\d'. String constant might be missing an r prefix.",
            "message-id": "W1401"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.physical.mixed_integer.mixed_integer_mpc_cia",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/one_room_mpc/physical/mixed_integer/mixed_integer_mpc_cia.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "fatal",
            "module": "examples.one_room_mpc.physical.mixed_integer.mixed_integer_mpc_cia",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/one_room_mpc/physical/mixed_integer/mixed_integer_mpc_cia.py",
            "symbol": "astroid-error",
            "message": "examples/one_room_mpc/physical/mixed_integer/mixed_integer_mpc_cia.py: Fatal error while checking 'examples/one_room_mpc/physical/mixed_integer/mixed_integer_mpc_cia.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-28-31.txt'.",
            "message-id": "F0002"
        },
        {
            "type": "warning",
            "module": "examples.one_room_mpc.linreg.training_linreg",
            "obj": "",
            "line": 68,
            "column": 25,
            "path": "examples/one_room_mpc/linreg/training_linreg.py",
            "symbol": "anomalous-backslash-in-string",
            "message": "Anomalous backslash in string: '\\d'. String constant might be missing an r prefix.",
            "message-id": "W1401"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.linreg.training_linreg",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/one_room_mpc/linreg/training_linreg.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "error",
            "module": "examples.one_room_mpc.linreg.training_linreg",
            "obj": "",
            "line": 4,
            "column": 0,
            "path": "examples/one_room_mpc/linreg/training_linreg.py",
            "symbol": "import-error",
            "message": "Unable to import 'agentlib'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "examples.one_room_mpc.linreg.training_linreg",
            "obj": "",
            "line": 5,
            "column": 0,
            "path": "examples/one_room_mpc/linreg/training_linreg.py",
            "symbol": "import-error",
            "message": "Unable to import 'matplotlib.pyplot'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "examples.one_room_mpc.linreg.training_linreg",
            "obj": "",
            "line": 7,
            "column": 0,
            "path": "examples/one_room_mpc/linreg/training_linreg.py",
            "symbol": "import-error",
            "message": "Unable to import 'agentlib.utils.multi_agent_system'",
            "message-id": "E0401"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.linreg.training_linreg",
            "obj": "InputGeneratorConfig",
            "line": 15,
            "column": 0,
            "path": "examples/one_room_mpc/linreg/training_linreg.py",
            "symbol": "missing-class-docstring",
            "message": "Missing class docstring",
            "message-id": "C0115"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.linreg.training_linreg",
            "obj": "InputGenerator",
            "line": 45,
            "column": 0,
            "path": "examples/one_room_mpc/linreg/training_linreg.py",
            "symbol": "missing-class-docstring",
            "message": "Missing class docstring",
            "message-id": "C0115"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.linreg.training_linreg",
            "obj": "InputGenerator.do_step",
            "line": 48,
            "column": 4,
            "path": "examples/one_room_mpc/linreg/training_linreg.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "warning",
            "module": "examples.one_room_mpc.linreg.training_linreg",
            "obj": "InputGenerator.do_step",
            "line": 48,
            "column": 25,
            "path": "examples/one_room_mpc/linreg/training_linreg.py",
            "symbol": "unused-argument",
            "message": "Unused argument 't_start'",
            "message-id": "W0613"
        },
        {
            "type": "warning",
            "module": "examples.one_room_mpc.linreg.training_linreg",
            "obj": "InputGenerator.do_step",
            "line": 48,
            "column": 34,
            "path": "examples/one_room_mpc/linreg/training_linreg.py",
            "symbol": "unused-argument",
            "message": "Unused argument 't_sample'",
            "message-id": "W0613"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.linreg.training_linreg",
            "obj": "InputGenerator.initialize",
            "line": 53,
            "column": 4,
            "path": "examples/one_room_mpc/linreg/training_linreg.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.linreg.training_linreg",
            "obj": "plot",
            "line": 57,
            "column": 0,
            "path": "examples/one_room_mpc/linreg/training_linreg.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.linreg.training_linreg",
            "obj": "plot",
            "line": 61,
            "column": 10,
            "path": "examples/one_room_mpc/linreg/training_linreg.py",
            "symbol": "invalid-name",
            "message": "Variable name \"ax_T_out\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.linreg.training_linreg",
            "obj": "plot",
            "line": 61,
            "column": 20,
            "path": "examples/one_room_mpc/linreg/training_linreg.py",
            "symbol": "invalid-name",
            "message": "Variable name \"ax_mDot\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "warning",
            "module": "examples.one_room_mpc.linreg.training_linreg",
            "obj": "plot",
            "line": 61,
            "column": 4,
            "path": "examples/one_room_mpc/linreg/training_linreg.py",
            "symbol": "unused-variable",
            "message": "Unused variable 'fig'",
            "message-id": "W0612"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.linreg.training_linreg",
            "obj": "configs",
            "line": 74,
            "column": 0,
            "path": "examples/one_room_mpc/linreg/training_linreg.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.linreg.training_linreg",
            "obj": "main",
            "line": 182,
            "column": 0,
            "path": "examples/one_room_mpc/linreg/training_linreg.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.physical.with_change_control_penalty",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/one_room_mpc/physical/with_change_control_penalty.py",
            "symbol": "ungrouped-imports",
            "message": "Imports from package logging are not grouped",
            "message-id": "C0412"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.physical.with_change_control_penalty",
            "obj": "",
            "line": 2,
            "column": 0,
            "path": "examples/one_room_mpc/physical/with_change_control_penalty.py",
            "symbol": "ungrouped-imports",
            "message": "Imports from package os are not grouped",
            "message-id": "C0412"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.physical.with_change_control_penalty",
            "obj": "",
            "line": 3,
            "column": 0,
            "path": "examples/one_room_mpc/physical/with_change_control_penalty.py",
            "symbol": "ungrouped-imports",
            "message": "Imports from package pathlib are not grouped",
            "message-id": "C0412"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.physical.mixed_integer.mixed_integer_mpc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/one_room_mpc/physical/mixed_integer/mixed_integer_mpc.py",
            "symbol": "ungrouped-imports",
            "message": "Imports from package logging are not grouped",
            "message-id": "C0412"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.physical.mixed_integer.mixed_integer_mpc",
            "obj": "",
            "line": 2,
            "column": 0,
            "path": "examples/one_room_mpc/physical/mixed_integer/mixed_integer_mpc.py",
            "symbol": "ungrouped-imports",
            "message": "Imports from package os are not grouped",
            "message-id": "C0412"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.physical.mixed_integer.mixed_integer_mpc",
            "obj": "",
            "line": 3,
            "column": 0,
            "path": "examples/one_room_mpc/physical/mixed_integer/mixed_integer_mpc.py",
            "symbol": "ungrouped-imports",
            "message": "Imports from package pathlib are not grouped",
            "message-id": "C0412"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.physical.mixed_integer.mixed_integer_mpc_cia",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/one_room_mpc/physical/mixed_integer/mixed_integer_mpc_cia.py",
            "symbol": "ungrouped-imports",
            "message": "Imports from package logging are not grouped",
            "message-id": "C0412"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.physical.mixed_integer.mixed_integer_mpc_cia",
            "obj": "",
            "line": 2,
            "column": 0,
            "path": "examples/one_room_mpc/physical/mixed_integer/mixed_integer_mpc_cia.py",
            "symbol": "ungrouped-imports",
            "message": "Imports from package os are not grouped",
            "message-id": "C0412"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.physical.mixed_integer.mixed_integer_mpc_cia",
            "obj": "",
            "line": 3,
            "column": 0,
            "path": "examples/one_room_mpc/physical/mixed_integer/mixed_integer_mpc_cia.py",
            "symbol": "ungrouped-imports",
            "message": "Imports from package pathlib are not grouped",
            "message-id": "C0412"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.linreg.training_linreg",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/one_room_mpc/linreg/training_linreg.py",
            "symbol": "ungrouped-imports",
            "message": "Imports from package logging are not grouped",
            "message-id": "C0412"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.linreg.model",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/one_room_mpc/linreg/model.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "fatal",
            "module": "examples.one_room_mpc.linreg.model",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/one_room_mpc/linreg/model.py",
            "symbol": "astroid-error",
            "message": "examples/one_room_mpc/linreg/model.py: Fatal error while checking 'examples/one_room_mpc/linreg/model.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-28-32.txt'.",
            "message-id": "F0002"
        },
        {
            "type": "warning",
            "module": "examples.one_room_mpc.linreg.simple_mpc_linreg",
            "obj": "",
            "line": 152,
            "column": 27,
            "path": "examples/one_room_mpc/linreg/simple_mpc_linreg.py",
            "symbol": "anomalous-backslash-in-string",
            "message": "Anomalous backslash in string: '\\d'. String constant might be missing an r prefix.",
            "message-id": "W1401"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.linreg.simple_mpc_linreg",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/one_room_mpc/linreg/simple_mpc_linreg.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "error",
            "module": "examples.one_room_mpc.linreg.simple_mpc_linreg",
            "obj": "",
            "line": 4,
            "column": 0,
            "path": "examples/one_room_mpc/linreg/simple_mpc_linreg.py",
            "symbol": "import-error",
            "message": "Unable to import 'matplotlib.pyplot'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "examples.one_room_mpc.linreg.simple_mpc_linreg",
            "obj": "",
            "line": 7,
            "column": 0,
            "path": "examples/one_room_mpc/linreg/simple_mpc_linreg.py",
            "symbol": "import-error",
            "message": "Unable to import 'agentlib.utils.multi_agent_system'",
            "message-id": "E0401"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.linreg.simple_mpc_linreg",
            "obj": "agent_configs",
            "line": 18,
            "column": 0,
            "path": "examples/one_room_mpc/linreg/simple_mpc_linreg.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.linreg.simple_mpc_linreg",
            "obj": "run_example",
            "line": 87,
            "column": 0,
            "path": "examples/one_room_mpc/linreg/simple_mpc_linreg.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "refactor",
            "module": "examples.one_room_mpc.linreg.simple_mpc_linreg",
            "obj": "run_example",
            "line": 87,
            "column": 0,
            "path": "examples/one_room_mpc/linreg/simple_mpc_linreg.py",
            "symbol": "too-many-locals",
            "message": "Too many local variables (17/15)",
            "message-id": "R0914"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.linreg.simple_mpc_linreg",
            "obj": "run_example",
            "line": 104,
            "column": 8,
            "path": "examples/one_room_mpc/linreg/simple_mpc_linreg.py",
            "symbol": "import-outside-toplevel",
            "message": "Import outside toplevel (training_linreg)",
            "message-id": "C0415"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.linreg.simple_mpc_linreg",
            "obj": "run_example",
            "line": 122,
            "column": 13,
            "path": "examples/one_room_mpc/linreg/simple_mpc_linreg.py",
            "symbol": "invalid-name",
            "message": "Variable name \"ax\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.linreg.simple_mpc_linreg",
            "obj": "run_example",
            "line": 126,
            "column": 8,
            "path": "examples/one_room_mpc/linreg/simple_mpc_linreg.py",
            "symbol": "invalid-name",
            "message": "Variable name \"energy_cost_kWh\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "warning",
            "module": "examples.one_room_mpc.linreg.simple_mpc_linreg",
            "obj": "run_example",
            "line": 122,
            "column": 8,
            "path": "examples/one_room_mpc/linreg/simple_mpc_linreg.py",
            "symbol": "unused-variable",
            "message": "Unused variable 'fig'",
            "message-id": "W0612"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.linreg.simple_mpc_linreg",
            "obj": "",
            "line": 5,
            "column": 0,
            "path": "examples/one_room_mpc/linreg/simple_mpc_linreg.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"import os\" should be placed before \"import matplotlib.pyplot as plt\"",
            "message-id": "C0411"
        },
        {
            "type": "warning",
            "module": "examples.one_room_mpc.gpr.simple_mpc_gpr",
            "obj": "",
            "line": 151,
            "column": 27,
            "path": "examples/one_room_mpc/gpr/simple_mpc_gpr.py",
            "symbol": "anomalous-backslash-in-string",
            "message": "Anomalous backslash in string: '\\d'. String constant might be missing an r prefix.",
            "message-id": "W1401"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.gpr.simple_mpc_gpr",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/one_room_mpc/gpr/simple_mpc_gpr.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "error",
            "module": "examples.one_room_mpc.gpr.simple_mpc_gpr",
            "obj": "",
            "line": 4,
            "column": 0,
            "path": "examples/one_room_mpc/gpr/simple_mpc_gpr.py",
            "symbol": "import-error",
            "message": "Unable to import 'matplotlib.pyplot'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "examples.one_room_mpc.gpr.simple_mpc_gpr",
            "obj": "",
            "line": 7,
            "column": 0,
            "path": "examples/one_room_mpc/gpr/simple_mpc_gpr.py",
            "symbol": "import-error",
            "message": "Unable to import 'agentlib.utils.multi_agent_system'",
            "message-id": "E0401"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.gpr.simple_mpc_gpr",
            "obj": "agent_configs",
            "line": 18,
            "column": 0,
            "path": "examples/one_room_mpc/gpr/simple_mpc_gpr.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.gpr.simple_mpc_gpr",
            "obj": "run_example",
            "line": 87,
            "column": 0,
            "path": "examples/one_room_mpc/gpr/simple_mpc_gpr.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "refactor",
            "module": "examples.one_room_mpc.gpr.simple_mpc_gpr",
            "obj": "run_example",
            "line": 87,
            "column": 0,
            "path": "examples/one_room_mpc/gpr/simple_mpc_gpr.py",
            "symbol": "too-many-locals",
            "message": "Too many local variables (17/15)",
            "message-id": "R0914"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.gpr.simple_mpc_gpr",
            "obj": "run_example",
            "line": 103,
            "column": 8,
            "path": "examples/one_room_mpc/gpr/simple_mpc_gpr.py",
            "symbol": "import-outside-toplevel",
            "message": "Import outside toplevel (training_gpr)",
            "message-id": "C0415"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.gpr.simple_mpc_gpr",
            "obj": "run_example",
            "line": 121,
            "column": 13,
            "path": "examples/one_room_mpc/gpr/simple_mpc_gpr.py",
            "symbol": "invalid-name",
            "message": "Variable name \"ax\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.gpr.simple_mpc_gpr",
            "obj": "run_example",
            "line": 125,
            "column": 8,
            "path": "examples/one_room_mpc/gpr/simple_mpc_gpr.py",
            "symbol": "invalid-name",
            "message": "Variable name \"energy_cost_kWh\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "warning",
            "module": "examples.one_room_mpc.gpr.simple_mpc_gpr",
            "obj": "run_example",
            "line": 121,
            "column": 8,
            "path": "examples/one_room_mpc/gpr/simple_mpc_gpr.py",
            "symbol": "unused-variable",
            "message": "Unused variable 'fig'",
            "message-id": "W0612"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.gpr.simple_mpc_gpr",
            "obj": "",
            "line": 5,
            "column": 0,
            "path": "examples/one_room_mpc/gpr/simple_mpc_gpr.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"import os\" should be placed before \"import matplotlib.pyplot as plt\"",
            "message-id": "C0411"
        },
        {
            "type": "warning",
            "module": "examples.one_room_mpc.gpr.training_gpr",
            "obj": "",
            "line": 67,
            "column": 25,
            "path": "examples/one_room_mpc/gpr/training_gpr.py",
            "symbol": "anomalous-backslash-in-string",
            "message": "Anomalous backslash in string: '\\d'. String constant might be missing an r prefix.",
            "message-id": "W1401"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.gpr.training_gpr",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/one_room_mpc/gpr/training_gpr.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "error",
            "module": "examples.one_room_mpc.gpr.training_gpr",
            "obj": "",
            "line": 4,
            "column": 0,
            "path": "examples/one_room_mpc/gpr/training_gpr.py",
            "symbol": "import-error",
            "message": "Unable to import 'agentlib'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "examples.one_room_mpc.gpr.training_gpr",
            "obj": "",
            "line": 5,
            "column": 0,
            "path": "examples/one_room_mpc/gpr/training_gpr.py",
            "symbol": "import-error",
            "message": "Unable to import 'matplotlib.pyplot'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "examples.one_room_mpc.gpr.training_gpr",
            "obj": "",
            "line": 7,
            "column": 0,
            "path": "examples/one_room_mpc/gpr/training_gpr.py",
            "symbol": "import-error",
            "message": "Unable to import 'agentlib.utils.multi_agent_system'",
            "message-id": "E0401"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.gpr.training_gpr",
            "obj": "InputGeneratorConfig",
            "line": 14,
            "column": 0,
            "path": "examples/one_room_mpc/gpr/training_gpr.py",
            "symbol": "missing-class-docstring",
            "message": "Missing class docstring",
            "message-id": "C0115"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.gpr.training_gpr",
            "obj": "InputGenerator",
            "line": 44,
            "column": 0,
            "path": "examples/one_room_mpc/gpr/training_gpr.py",
            "symbol": "missing-class-docstring",
            "message": "Missing class docstring",
            "message-id": "C0115"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.gpr.training_gpr",
            "obj": "InputGenerator.do_step",
            "line": 47,
            "column": 4,
            "path": "examples/one_room_mpc/gpr/training_gpr.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "warning",
            "module": "examples.one_room_mpc.gpr.training_gpr",
            "obj": "InputGenerator.do_step",
            "line": 47,
            "column": 25,
            "path": "examples/one_room_mpc/gpr/training_gpr.py",
            "symbol": "unused-argument",
            "message": "Unused argument 't_start'",
            "message-id": "W0613"
        },
        {
            "type": "warning",
            "module": "examples.one_room_mpc.gpr.training_gpr",
            "obj": "InputGenerator.do_step",
            "line": 47,
            "column": 34,
            "path": "examples/one_room_mpc/gpr/training_gpr.py",
            "symbol": "unused-argument",
            "message": "Unused argument 't_sample'",
            "message-id": "W0613"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.gpr.training_gpr",
            "obj": "InputGenerator.initialize",
            "line": 52,
            "column": 4,
            "path": "examples/one_room_mpc/gpr/training_gpr.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.gpr.training_gpr",
            "obj": "plot",
            "line": 56,
            "column": 0,
            "path": "examples/one_room_mpc/gpr/training_gpr.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.gpr.training_gpr",
            "obj": "plot",
            "line": 60,
            "column": 10,
            "path": "examples/one_room_mpc/gpr/training_gpr.py",
            "symbol": "invalid-name",
            "message": "Variable name \"ax_T_out\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.gpr.training_gpr",
            "obj": "plot",
            "line": 60,
            "column": 20,
            "path": "examples/one_room_mpc/gpr/training_gpr.py",
            "symbol": "invalid-name",
            "message": "Variable name \"ax_mDot\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "warning",
            "module": "examples.one_room_mpc.gpr.training_gpr",
            "obj": "plot",
            "line": 60,
            "column": 4,
            "path": "examples/one_room_mpc/gpr/training_gpr.py",
            "symbol": "unused-variable",
            "message": "Unused variable 'fig'",
            "message-id": "W0612"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.gpr.training_gpr",
            "obj": "configs",
            "line": 73,
            "column": 0,
            "path": "examples/one_room_mpc/gpr/training_gpr.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.gpr.training_gpr",
            "obj": "main",
            "line": 188,
            "column": 0,
            "path": "examples/one_room_mpc/gpr/training_gpr.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.gpr.model",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/one_room_mpc/gpr/model.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "fatal",
            "module": "examples.one_room_mpc.gpr.model",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/one_room_mpc/gpr/model.py",
            "symbol": "astroid-error",
            "message": "examples/one_room_mpc/gpr/model.py: Fatal error while checking 'examples/one_room_mpc/gpr/model.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-28-32.txt'.",
            "message-id": "F0002"
        },
        {
            "type": "warning",
            "module": "examples.one_room_mpc.ann.training_nn",
            "obj": "",
            "line": 68,
            "column": 25,
            "path": "examples/one_room_mpc/ann/training_nn.py",
            "symbol": "anomalous-backslash-in-string",
            "message": "Anomalous backslash in string: '\\d'. String constant might be missing an r prefix.",
            "message-id": "W1401"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.ann.training_nn",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/one_room_mpc/ann/training_nn.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "error",
            "module": "examples.one_room_mpc.ann.training_nn",
            "obj": "",
            "line": 4,
            "column": 0,
            "path": "examples/one_room_mpc/ann/training_nn.py",
            "symbol": "import-error",
            "message": "Unable to import 'agentlib'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "examples.one_room_mpc.ann.training_nn",
            "obj": "",
            "line": 5,
            "column": 0,
            "path": "examples/one_room_mpc/ann/training_nn.py",
            "symbol": "import-error",
            "message": "Unable to import 'matplotlib.pyplot'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "examples.one_room_mpc.ann.training_nn",
            "obj": "",
            "line": 7,
            "column": 0,
            "path": "examples/one_room_mpc/ann/training_nn.py",
            "symbol": "import-error",
            "message": "Unable to import 'agentlib.utils.multi_agent_system'",
            "message-id": "E0401"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.ann.training_nn",
            "obj": "InputGeneratorConfig",
            "line": 15,
            "column": 0,
            "path": "examples/one_room_mpc/ann/training_nn.py",
            "symbol": "missing-class-docstring",
            "message": "Missing class docstring",
            "message-id": "C0115"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.ann.training_nn",
            "obj": "InputGenerator",
            "line": 45,
            "column": 0,
            "path": "examples/one_room_mpc/ann/training_nn.py",
            "symbol": "missing-class-docstring",
            "message": "Missing class docstring",
            "message-id": "C0115"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.ann.training_nn",
            "obj": "InputGenerator.do_step",
            "line": 48,
            "column": 4,
            "path": "examples/one_room_mpc/ann/training_nn.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "warning",
            "module": "examples.one_room_mpc.ann.training_nn",
            "obj": "InputGenerator.do_step",
            "line": 48,
            "column": 25,
            "path": "examples/one_room_mpc/ann/training_nn.py",
            "symbol": "unused-argument",
            "message": "Unused argument 't_start'",
            "message-id": "W0613"
        },
        {
            "type": "warning",
            "module": "examples.one_room_mpc.ann.training_nn",
            "obj": "InputGenerator.do_step",
            "line": 48,
            "column": 34,
            "path": "examples/one_room_mpc/ann/training_nn.py",
            "symbol": "unused-argument",
            "message": "Unused argument 't_sample'",
            "message-id": "W0613"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.ann.training_nn",
            "obj": "InputGenerator.initialize",
            "line": 53,
            "column": 4,
            "path": "examples/one_room_mpc/ann/training_nn.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.ann.training_nn",
            "obj": "plot",
            "line": 57,
            "column": 0,
            "path": "examples/one_room_mpc/ann/training_nn.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.ann.training_nn",
            "obj": "plot",
            "line": 61,
            "column": 10,
            "path": "examples/one_room_mpc/ann/training_nn.py",
            "symbol": "invalid-name",
            "message": "Variable name \"ax_T_out\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.ann.training_nn",
            "obj": "plot",
            "line": 61,
            "column": 20,
            "path": "examples/one_room_mpc/ann/training_nn.py",
            "symbol": "invalid-name",
            "message": "Variable name \"ax_mDot\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "warning",
            "module": "examples.one_room_mpc.ann.training_nn",
            "obj": "plot",
            "line": 61,
            "column": 4,
            "path": "examples/one_room_mpc/ann/training_nn.py",
            "symbol": "unused-variable",
            "message": "Unused variable 'fig'",
            "message-id": "W0612"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.ann.training_nn",
            "obj": "configs",
            "line": 74,
            "column": 0,
            "path": "examples/one_room_mpc/ann/training_nn.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.ann.training_nn",
            "obj": "main",
            "line": 194,
            "column": 0,
            "path": "examples/one_room_mpc/ann/training_nn.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "warning",
            "module": "examples.one_room_mpc.ann.simple_mpc_nn",
            "obj": "",
            "line": 161,
            "column": 27,
            "path": "examples/one_room_mpc/ann/simple_mpc_nn.py",
            "symbol": "anomalous-backslash-in-string",
            "message": "Anomalous backslash in string: '\\d'. String constant might be missing an r prefix.",
            "message-id": "W1401"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.ann.simple_mpc_nn",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/one_room_mpc/ann/simple_mpc_nn.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "error",
            "module": "examples.one_room_mpc.ann.simple_mpc_nn",
            "obj": "",
            "line": 6,
            "column": 0,
            "path": "examples/one_room_mpc/ann/simple_mpc_nn.py",
            "symbol": "import-error",
            "message": "Unable to import 'agentlib.utils.multi_agent_system'",
            "message-id": "E0401"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.ann.simple_mpc_nn",
            "obj": "agent_configs",
            "line": 16,
            "column": 0,
            "path": "examples/one_room_mpc/ann/simple_mpc_nn.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.ann.simple_mpc_nn",
            "obj": "run_example",
            "line": 85,
            "column": 0,
            "path": "examples/one_room_mpc/ann/simple_mpc_nn.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "refactor",
            "module": "examples.one_room_mpc.ann.simple_mpc_nn",
            "obj": "run_example",
            "line": 85,
            "column": 0,
            "path": "examples/one_room_mpc/ann/simple_mpc_nn.py",
            "symbol": "too-many-locals",
            "message": "Too many local variables (20/15)",
            "message-id": "R0914"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.ann.simple_mpc_nn",
            "obj": "run_example",
            "line": 96,
            "column": 8,
            "path": "examples/one_room_mpc/ann/simple_mpc_nn.py",
            "symbol": "import-outside-toplevel",
            "message": "Import outside toplevel (training_nn)",
            "message-id": "C0415"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.ann.simple_mpc_nn",
            "obj": "run_example",
            "line": 110,
            "column": 8,
            "path": "examples/one_room_mpc/ann/simple_mpc_nn.py",
            "symbol": "import-outside-toplevel",
            "message": "Import outside toplevel (training_nn)",
            "message-id": "C0415"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.ann.simple_mpc_nn",
            "obj": "run_example",
            "line": 125,
            "column": 8,
            "path": "examples/one_room_mpc/ann/simple_mpc_nn.py",
            "symbol": "import-outside-toplevel",
            "message": "Import outside toplevel (matplotlib.pyplot)",
            "message-id": "C0415"
        },
        {
            "type": "error",
            "module": "examples.one_room_mpc.ann.simple_mpc_nn",
            "obj": "run_example",
            "line": 125,
            "column": 8,
            "path": "examples/one_room_mpc/ann/simple_mpc_nn.py",
            "symbol": "import-error",
            "message": "Unable to import 'matplotlib.pyplot'",
            "message-id": "E0401"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.ann.simple_mpc_nn",
            "obj": "run_example",
            "line": 126,
            "column": 8,
            "path": "examples/one_room_mpc/ann/simple_mpc_nn.py",
            "symbol": "import-outside-toplevel",
            "message": "Import outside toplevel (agentlib_mpc.utils.plotting.mpc.plot_mpc)",
            "message-id": "C0415"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.ann.simple_mpc_nn",
            "obj": "run_example",
            "line": 133,
            "column": 8,
            "path": "examples/one_room_mpc/ann/simple_mpc_nn.py",
            "symbol": "invalid-name",
            "message": "Variable name \"energy_cost_kWh\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.ann.simple_mpc_nn",
            "obj": "run_example",
            "line": 142,
            "column": 13,
            "path": "examples/one_room_mpc/ann/simple_mpc_nn.py",
            "symbol": "invalid-name",
            "message": "Variable name \"ax\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "warning",
            "module": "examples.one_room_mpc.ann.simple_mpc_nn",
            "obj": "run_example",
            "line": 142,
            "column": 8,
            "path": "examples/one_room_mpc/ann/simple_mpc_nn.py",
            "symbol": "unused-variable",
            "message": "Unused variable 'fig'",
            "message-id": "W0612"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.ann.model",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/one_room_mpc/ann/model.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "fatal",
            "module": "examples.one_room_mpc.ann.model",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/one_room_mpc/ann/model.py",
            "symbol": "astroid-error",
            "message": "examples/one_room_mpc/ann/model.py: Fatal error while checking 'examples/one_room_mpc/ann/model.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-28-32.txt'.",
            "message-id": "F0002"
        },
        {
            "type": "warning",
            "module": "examples.one_room_mpc.ann.with_learned_cost.training_nn",
            "obj": "",
            "line": 68,
            "column": 25,
            "path": "examples/one_room_mpc/ann/with_learned_cost/training_nn.py",
            "symbol": "anomalous-backslash-in-string",
            "message": "Anomalous backslash in string: '\\d'. String constant might be missing an r prefix.",
            "message-id": "W1401"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.ann.with_learned_cost.training_nn",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/one_room_mpc/ann/with_learned_cost/training_nn.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "error",
            "module": "examples.one_room_mpc.ann.with_learned_cost.training_nn",
            "obj": "",
            "line": 4,
            "column": 0,
            "path": "examples/one_room_mpc/ann/with_learned_cost/training_nn.py",
            "symbol": "import-error",
            "message": "Unable to import 'agentlib'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "examples.one_room_mpc.ann.with_learned_cost.training_nn",
            "obj": "",
            "line": 5,
            "column": 0,
            "path": "examples/one_room_mpc/ann/with_learned_cost/training_nn.py",
            "symbol": "import-error",
            "message": "Unable to import 'matplotlib.pyplot'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "examples.one_room_mpc.ann.with_learned_cost.training_nn",
            "obj": "",
            "line": 7,
            "column": 0,
            "path": "examples/one_room_mpc/ann/with_learned_cost/training_nn.py",
            "symbol": "import-error",
            "message": "Unable to import 'agentlib.utils.multi_agent_system'",
            "message-id": "E0401"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.ann.with_learned_cost.training_nn",
            "obj": "InputGeneratorConfig",
            "line": 15,
            "column": 0,
            "path": "examples/one_room_mpc/ann/with_learned_cost/training_nn.py",
            "symbol": "missing-class-docstring",
            "message": "Missing class docstring",
            "message-id": "C0115"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.ann.with_learned_cost.training_nn",
            "obj": "InputGenerator",
            "line": 45,
            "column": 0,
            "path": "examples/one_room_mpc/ann/with_learned_cost/training_nn.py",
            "symbol": "missing-class-docstring",
            "message": "Missing class docstring",
            "message-id": "C0115"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.ann.with_learned_cost.training_nn",
            "obj": "InputGenerator.do_step",
            "line": 48,
            "column": 4,
            "path": "examples/one_room_mpc/ann/with_learned_cost/training_nn.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "warning",
            "module": "examples.one_room_mpc.ann.with_learned_cost.training_nn",
            "obj": "InputGenerator.do_step",
            "line": 48,
            "column": 25,
            "path": "examples/one_room_mpc/ann/with_learned_cost/training_nn.py",
            "symbol": "unused-argument",
            "message": "Unused argument 't_start'",
            "message-id": "W0613"
        },
        {
            "type": "warning",
            "module": "examples.one_room_mpc.ann.with_learned_cost.training_nn",
            "obj": "InputGenerator.do_step",
            "line": 48,
            "column": 34,
            "path": "examples/one_room_mpc/ann/with_learned_cost/training_nn.py",
            "symbol": "unused-argument",
            "message": "Unused argument 't_sample'",
            "message-id": "W0613"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.ann.with_learned_cost.training_nn",
            "obj": "InputGenerator.initialize",
            "line": 53,
            "column": 4,
            "path": "examples/one_room_mpc/ann/with_learned_cost/training_nn.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.ann.with_learned_cost.training_nn",
            "obj": "plot",
            "line": 57,
            "column": 0,
            "path": "examples/one_room_mpc/ann/with_learned_cost/training_nn.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.ann.with_learned_cost.training_nn",
            "obj": "plot",
            "line": 61,
            "column": 10,
            "path": "examples/one_room_mpc/ann/with_learned_cost/training_nn.py",
            "symbol": "invalid-name",
            "message": "Variable name \"ax_T_out\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.ann.with_learned_cost.training_nn",
            "obj": "plot",
            "line": 61,
            "column": 20,
            "path": "examples/one_room_mpc/ann/with_learned_cost/training_nn.py",
            "symbol": "invalid-name",
            "message": "Variable name \"ax_mDot\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "warning",
            "module": "examples.one_room_mpc.ann.with_learned_cost.training_nn",
            "obj": "plot",
            "line": 61,
            "column": 4,
            "path": "examples/one_room_mpc/ann/with_learned_cost/training_nn.py",
            "symbol": "unused-variable",
            "message": "Unused variable 'fig'",
            "message-id": "W0612"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.ann.with_learned_cost.training_nn",
            "obj": "configs",
            "line": 74,
            "column": 0,
            "path": "examples/one_room_mpc/ann/with_learned_cost/training_nn.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.ann.with_learned_cost.training_nn",
            "obj": "main",
            "line": 191,
            "column": 0,
            "path": "examples/one_room_mpc/ann/with_learned_cost/training_nn.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "warning",
            "module": "examples.one_room_mpc.ann.with_learned_cost.simple_mpc_nn",
            "obj": "",
            "line": 134,
            "column": 27,
            "path": "examples/one_room_mpc/ann/with_learned_cost/simple_mpc_nn.py",
            "symbol": "anomalous-backslash-in-string",
            "message": "Anomalous backslash in string: '\\d'. String constant might be missing an r prefix.",
            "message-id": "W1401"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.ann.with_learned_cost.simple_mpc_nn",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/one_room_mpc/ann/with_learned_cost/simple_mpc_nn.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "error",
            "module": "examples.one_room_mpc.ann.with_learned_cost.simple_mpc_nn",
            "obj": "",
            "line": 3,
            "column": 0,
            "path": "examples/one_room_mpc/ann/with_learned_cost/simple_mpc_nn.py",
            "symbol": "import-error",
            "message": "Unable to import 'matplotlib.pyplot'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "examples.one_room_mpc.ann.with_learned_cost.simple_mpc_nn",
            "obj": "",
            "line": 6,
            "column": 0,
            "path": "examples/one_room_mpc/ann/with_learned_cost/simple_mpc_nn.py",
            "symbol": "import-error",
            "message": "Unable to import 'agentlib.utils.multi_agent_system'",
            "message-id": "E0401"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.ann.with_learned_cost.simple_mpc_nn",
            "obj": "agent_configs",
            "line": 17,
            "column": 0,
            "path": "examples/one_room_mpc/ann/with_learned_cost/simple_mpc_nn.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.ann.with_learned_cost.simple_mpc_nn",
            "obj": "run_example",
            "line": 85,
            "column": 0,
            "path": "examples/one_room_mpc/ann/with_learned_cost/simple_mpc_nn.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "warning",
            "module": "examples.one_room_mpc.ann.with_learned_cost.simple_mpc_nn",
            "obj": "run_example",
            "line": 100,
            "column": 8,
            "path": "examples/one_room_mpc/ann/with_learned_cost/simple_mpc_nn.py",
            "symbol": "unreachable",
            "message": "Unreachable code",
            "message-id": "W0101"
        },
        {
            "type": "warning",
            "module": "examples.one_room_mpc.ann.with_learned_cost.simple_mpc_nn",
            "obj": "run_example",
            "line": 96,
            "column": 8,
            "path": "examples/one_room_mpc/ann/with_learned_cost/simple_mpc_nn.py",
            "symbol": "raise-missing-from",
            "message": "Consider explicitly re-raising using 'except IndexError as exc' and 'raise RuntimeError('For some reason this import does not work, please run the training manually') from exc'",
            "message-id": "W0707"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.ann.with_learned_cost.simple_mpc_nn",
            "obj": "run_example",
            "line": 100,
            "column": 8,
            "path": "examples/one_room_mpc/ann/with_learned_cost/simple_mpc_nn.py",
            "symbol": "import-outside-toplevel",
            "message": "Import outside toplevel (training_nn)",
            "message-id": "C0415"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.ann.with_learned_cost.simple_mpc_nn",
            "obj": "run_example",
            "line": 115,
            "column": 13,
            "path": "examples/one_room_mpc/ann/with_learned_cost/simple_mpc_nn.py",
            "symbol": "invalid-name",
            "message": "Variable name \"ax\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "warning",
            "module": "examples.one_room_mpc.ann.with_learned_cost.simple_mpc_nn",
            "obj": "run_example",
            "line": 115,
            "column": 8,
            "path": "examples/one_room_mpc/ann/with_learned_cost/simple_mpc_nn.py",
            "symbol": "unused-variable",
            "message": "Unused variable 'fig'",
            "message-id": "W0612"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.ann.with_learned_cost.simple_mpc_nn",
            "obj": "",
            "line": 4,
            "column": 0,
            "path": "examples/one_room_mpc/ann/with_learned_cost/simple_mpc_nn.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"import os\" should be placed before \"import matplotlib.pyplot as plt\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.ann.with_learned_cost.plot_ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/one_room_mpc/ann/with_learned_cost/plot_ann.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "error",
            "module": "examples.one_room_mpc.ann.with_learned_cost.plot_ann",
            "obj": "",
            "line": 3,
            "column": 0,
            "path": "examples/one_room_mpc/ann/with_learned_cost/plot_ann.py",
            "symbol": "import-error",
            "message": "Unable to import 'matplotlib.pyplot'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "examples.one_room_mpc.ann.with_learned_cost.plot_ann",
            "obj": "",
            "line": 4,
            "column": 0,
            "path": "examples/one_room_mpc/ann/with_learned_cost/plot_ann.py",
            "symbol": "import-error",
            "message": "Unable to import 'numpy'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "examples.one_room_mpc.ann.with_learned_cost.plot_ann",
            "obj": "",
            "line": 5,
            "column": 0,
            "path": "examples/one_room_mpc/ann/with_learned_cost/plot_ann.py",
            "symbol": "import-error",
            "message": "Unable to import 'pandas'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "examples.one_room_mpc.ann.with_learned_cost.plot_ann",
            "obj": "",
            "line": 7,
            "column": 0,
            "path": "examples/one_room_mpc/ann/with_learned_cost/plot_ann.py",
            "symbol": "import-error",
            "message": "Unable to import 'agentlib_mpc.models.casadi_neural_network'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "examples.one_room_mpc.ann.with_learned_cost.plot_ann",
            "obj": "",
            "line": 7,
            "column": 0,
            "path": "examples/one_room_mpc/ann/with_learned_cost/plot_ann.py",
            "symbol": "no-name-in-module",
            "message": "No name 'casadi_neural_network' in module 'agentlib_mpc.models'",
            "message-id": "E0611"
        },
        {
            "type": "error",
            "module": "examples.one_room_mpc.ann.with_learned_cost.plot_ann",
            "obj": "",
            "line": 9,
            "column": 0,
            "path": "examples/one_room_mpc/ann/with_learned_cost/plot_ann.py",
            "symbol": "import-error",
            "message": "Unable to import 'agentlib_mpc.models.serialized_ann'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "examples.one_room_mpc.ann.with_learned_cost.plot_ann",
            "obj": "",
            "line": 9,
            "column": 0,
            "path": "examples/one_room_mpc/ann/with_learned_cost/plot_ann.py",
            "symbol": "no-name-in-module",
            "message": "No name 'serialized_ann' in module 'agentlib_mpc.models'",
            "message-id": "E0611"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.ann.with_learned_cost.plot_ann",
            "obj": "plot",
            "line": 13,
            "column": 0,
            "path": "examples/one_room_mpc/ann/with_learned_cost/plot_ann.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "refactor",
            "module": "examples.one_room_mpc.ann.with_learned_cost.plot_ann",
            "obj": "plot",
            "line": 13,
            "column": 0,
            "path": "examples/one_room_mpc/ann/with_learned_cost/plot_ann.py",
            "symbol": "too-many-locals",
            "message": "Too many local variables (24/15)",
            "message-id": "R0914"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.ann.with_learned_cost.plot_ann",
            "obj": "plot",
            "line": 41,
            "column": 10,
            "path": "examples/one_room_mpc/ann/with_learned_cost/plot_ann.py",
            "symbol": "invalid-name",
            "message": "Variable name \"ax_T_out\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.ann.with_learned_cost.plot_ann",
            "obj": "plot",
            "line": 41,
            "column": 20,
            "path": "examples/one_room_mpc/ann/with_learned_cost/plot_ann.py",
            "symbol": "invalid-name",
            "message": "Variable name \"ax_mDot\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.ann.with_learned_cost.plot_ann",
            "obj": "plot",
            "line": 41,
            "column": 38,
            "path": "examples/one_room_mpc/ann/with_learned_cost/plot_ann.py",
            "symbol": "invalid-name",
            "message": "Variable name \"ax_T_in\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.ann.with_learned_cost.plot_ann",
            "obj": "plot",
            "line": 43,
            "column": 4,
            "path": "examples/one_room_mpc/ann/with_learned_cost/plot_ann.py",
            "symbol": "invalid-name",
            "message": "Variable name \"ax_T_out\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.ann.with_learned_cost.plot_ann",
            "obj": "plot",
            "line": 63,
            "column": 9,
            "path": "examples/one_room_mpc/ann/with_learned_cost/plot_ann.py",
            "symbol": "invalid-name",
            "message": "Variable name \"ax\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "warning",
            "module": "examples.one_room_mpc.ann.with_learned_cost.plot_ann",
            "obj": "plot",
            "line": 13,
            "column": 9,
            "path": "examples/one_room_mpc/ann/with_learned_cost/plot_ann.py",
            "symbol": "unused-argument",
            "message": "Unused argument 'sim_results_file'",
            "message-id": "W0613"
        },
        {
            "type": "warning",
            "module": "examples.one_room_mpc.ann.with_learned_cost.plot_ann",
            "obj": "plot",
            "line": 41,
            "column": 4,
            "path": "examples/one_room_mpc/ann/with_learned_cost/plot_ann.py",
            "symbol": "unused-variable",
            "message": "Unused variable 'fig'",
            "message-id": "W0612"
        },
        {
            "type": "convention",
            "module": "examples.one_room_mpc.ann.with_learned_cost.model",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/one_room_mpc/ann/with_learned_cost/model.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "fatal",
            "module": "examples.one_room_mpc.ann.with_learned_cost.model",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/one_room_mpc/ann/with_learned_cost/model.py",
            "symbol": "astroid-error",
            "message": "examples/one_room_mpc/ann/with_learned_cost/model.py: Fatal error while checking 'examples/one_room_mpc/ann/with_learned_cost/model.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-28-33.txt'.",
            "message-id": "F0002"
        },
        {
            "type": "error",
            "module": "examples.admm.admm_example_multiprocessing",
            "obj": "",
            "line": 28,
            "column": 0,
            "path": "examples/admm/admm_example_multiprocessing.py",
            "symbol": "import-error",
            "message": "Unable to import 'agentlib.utils'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "examples.admm.admm_example_multiprocessing",
            "obj": "",
            "line": 29,
            "column": 0,
            "path": "examples/admm/admm_example_multiprocessing.py",
            "symbol": "import-error",
            "message": "Unable to import 'agentlib.utils.multi_agent_system'",
            "message-id": "E0401"
        },
        {
            "type": "convention",
            "module": "examples.admm.admm_example_multiprocessing",
            "obj": "plot",
            "line": 40,
            "column": 0,
            "path": "examples/admm/admm_example_multiprocessing.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "examples.admm.admm_example_multiprocessing",
            "obj": "plot",
            "line": 41,
            "column": 4,
            "path": "examples/admm/admm_example_multiprocessing.py",
            "symbol": "import-outside-toplevel",
            "message": "Import outside toplevel (matplotlib.pyplot)",
            "message-id": "C0415"
        },
        {
            "type": "error",
            "module": "examples.admm.admm_example_multiprocessing",
            "obj": "plot",
            "line": 41,
            "column": 4,
            "path": "examples/admm/admm_example_multiprocessing.py",
            "symbol": "import-error",
            "message": "Unable to import 'matplotlib.pyplot'",
            "message-id": "E0401"
        },
        {
            "type": "convention",
            "module": "examples.admm.admm_example_multiprocessing",
            "obj": "plot",
            "line": 42,
            "column": 4,
            "path": "examples/admm/admm_example_multiprocessing.py",
            "symbol": "import-outside-toplevel",
            "message": "Import outside toplevel (agentlib_mpc.utils.analysis.admm_at_time_step)",
            "message-id": "C0415"
        },
        {
            "type": "convention",
            "module": "examples.admm.admm_example_multiprocessing",
            "obj": "plot",
            "line": 56,
            "column": 9,
            "path": "examples/admm/admm_example_multiprocessing.py",
            "symbol": "invalid-name",
            "message": "Variable name \"ax\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "warning",
            "module": "examples.admm.admm_example_multiprocessing",
            "obj": "plot",
            "line": 56,
            "column": 4,
            "path": "examples/admm/admm_example_multiprocessing.py",
            "symbol": "unused-variable",
            "message": "Unused variable 'fig'",
            "message-id": "W0612"
        },
        {
            "type": "convention",
            "module": "examples.admm.admm_example_multiprocessing",
            "obj": "run_example",
            "line": 67,
            "column": 0,
            "path": "examples/admm/admm_example_multiprocessing.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "examples.admm.admm_example_multiprocessing",
            "obj": "run_example",
            "line": 73,
            "column": 4,
            "path": "examples/admm/admm_example_multiprocessing.py",
            "symbol": "invalid-name",
            "message": "Argument name \"TESTING\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "refactor",
            "module": "examples.admm.admm_example_multiprocessing",
            "obj": "run_example",
            "line": 67,
            "column": 0,
            "path": "examples/admm/admm_example_multiprocessing.py",
            "symbol": "too-many-arguments",
            "message": "Too many arguments (6/5)",
            "message-id": "R0913"
        },
        {
            "type": "refactor",
            "module": "examples.admm.admm_example_multiprocessing",
            "obj": "run_example",
            "line": 67,
            "column": 0,
            "path": "examples/admm/admm_example_multiprocessing.py",
            "symbol": "too-many-locals",
            "message": "Too many local variables (18/15)",
            "message-id": "R0914"
        },
        {
            "type": "warning",
            "module": "examples.admm.admm_example_multiprocessing",
            "obj": "run_example",
            "line": 83,
            "column": 13,
            "path": "examples/admm/admm_example_multiprocessing.py",
            "symbol": "unspecified-encoding",
            "message": "Using open without explicitly specifying an encoding",
            "message-id": "W1514"
        },
        {
            "type": "convention",
            "module": "examples.admm.admm_example_multiprocessing",
            "obj": "run_example",
            "line": 83,
            "column": 27,
            "path": "examples/admm/admm_example_multiprocessing.py",
            "symbol": "invalid-name",
            "message": "Variable name \"f\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "warning",
            "module": "examples.admm.admm_example_multiprocessing",
            "obj": "run_example",
            "line": 88,
            "column": 21,
            "path": "examples/admm/admm_example_multiprocessing.py",
            "symbol": "unspecified-encoding",
            "message": "Using open without explicitly specifying an encoding",
            "message-id": "W1514"
        },
        {
            "type": "convention",
            "module": "examples.admm.admm_example_multiprocessing",
            "obj": "run_example",
            "line": 88,
            "column": 34,
            "path": "examples/admm/admm_example_multiprocessing.py",
            "symbol": "invalid-name",
            "message": "Variable name \"f\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "examples.admm.admm_example_multiprocessing",
            "obj": "run_example",
            "line": 113,
            "column": 8,
            "path": "examples/admm/admm_example_multiprocessing.py",
            "symbol": "invalid-name",
            "message": "Variable name \"cooledRoom_T\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "refactor",
            "module": "examples.admm.admm_example_multiprocessing",
            "obj": "run_example",
            "line": 67,
            "column": 0,
            "path": "examples/admm/admm_example_multiprocessing.py",
            "symbol": "inconsistent-return-statements",
            "message": "Either all return statements in a function should return an expression, or none of them should.",
            "message-id": "R1710"
        },
        {
            "type": "warning",
            "module": "examples.admm.admm_example_multiprocessing",
            "obj": "run_example",
            "line": 97,
            "column": 4,
            "path": "examples/admm/admm_example_multiprocessing.py",
            "symbol": "unused-variable",
            "message": "Unused variable 'broker'",
            "message-id": "W0612"
        },
        {
            "type": "error",
            "module": "examples.admm.admm_example_local",
            "obj": "",
            "line": 27,
            "column": 0,
            "path": "examples/admm/admm_example_local.py",
            "symbol": "import-error",
            "message": "Unable to import 'agentlib.utils.multi_agent_system'",
            "message-id": "E0401"
        },
        {
            "type": "convention",
            "module": "examples.admm.admm_example_local",
            "obj": "plot",
            "line": 37,
            "column": 0,
            "path": "examples/admm/admm_example_local.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "examples.admm.admm_example_local",
            "obj": "plot",
            "line": 38,
            "column": 4,
            "path": "examples/admm/admm_example_local.py",
            "symbol": "import-outside-toplevel",
            "message": "Import outside toplevel (matplotlib.pyplot)",
            "message-id": "C0415"
        },
        {
            "type": "error",
            "module": "examples.admm.admm_example_local",
            "obj": "plot",
            "line": 38,
            "column": 4,
            "path": "examples/admm/admm_example_local.py",
            "symbol": "import-error",
            "message": "Unable to import 'matplotlib.pyplot'",
            "message-id": "E0401"
        },
        {
            "type": "convention",
            "module": "examples.admm.admm_example_local",
            "obj": "plot",
            "line": 39,
            "column": 4,
            "path": "examples/admm/admm_example_local.py",
            "symbol": "import-outside-toplevel",
            "message": "Import outside toplevel (agentlib_mpc.utils.analysis.admm_at_time_step)",
            "message-id": "C0415"
        },
        {
            "type": "convention",
            "module": "examples.admm.admm_example_local",
            "obj": "plot",
            "line": 48,
            "column": 9,
            "path": "examples/admm/admm_example_local.py",
            "symbol": "invalid-name",
            "message": "Variable name \"ax\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "warning",
            "module": "examples.admm.admm_example_local",
            "obj": "plot",
            "line": 48,
            "column": 4,
            "path": "examples/admm/admm_example_local.py",
            "symbol": "unused-variable",
            "message": "Unused variable 'fig'",
            "message-id": "W0612"
        },
        {
            "type": "convention",
            "module": "examples.admm.admm_example_local",
            "obj": "run_example",
            "line": 58,
            "column": 0,
            "path": "examples/admm/admm_example_local.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "refactor",
            "module": "examples.admm.admm_example_local",
            "obj": "run_example",
            "line": 58,
            "column": 0,
            "path": "examples/admm/admm_example_local.py",
            "symbol": "too-many-arguments",
            "message": "Too many arguments (6/5)",
            "message-id": "R0913"
        },
        {
            "type": "refactor",
            "module": "examples.admm.admm_example_local",
            "obj": "run_example",
            "line": 58,
            "column": 0,
            "path": "examples/admm/admm_example_local.py",
            "symbol": "too-many-locals",
            "message": "Too many local variables (17/15)",
            "message-id": "R0914"
        },
        {
            "type": "warning",
            "module": "examples.admm.admm_example_local",
            "obj": "run_example",
            "line": 74,
            "column": 13,
            "path": "examples/admm/admm_example_local.py",
            "symbol": "unspecified-encoding",
            "message": "Using open without explicitly specifying an encoding",
            "message-id": "W1514"
        },
        {
            "type": "convention",
            "module": "examples.admm.admm_example_local",
            "obj": "run_example",
            "line": 74,
            "column": 27,
            "path": "examples/admm/admm_example_local.py",
            "symbol": "invalid-name",
            "message": "Variable name \"f\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "warning",
            "module": "examples.admm.admm_example_local",
            "obj": "run_example",
            "line": 79,
            "column": 21,
            "path": "examples/admm/admm_example_local.py",
            "symbol": "unspecified-encoding",
            "message": "Using open without explicitly specifying an encoding",
            "message-id": "W1514"
        },
        {
            "type": "convention",
            "module": "examples.admm.admm_example_local",
            "obj": "run_example",
            "line": 79,
            "column": 34,
            "path": "examples/admm/admm_example_local.py",
            "symbol": "invalid-name",
            "message": "Variable name \"f\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "examples.admm.admm_example_local",
            "obj": "run_example",
            "line": 100,
            "column": 8,
            "path": "examples/admm/admm_example_local.py",
            "symbol": "invalid-name",
            "message": "Variable name \"cooledRoom_T\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "error",
            "module": "examples.admm.admm_example_coordinator",
            "obj": "",
            "line": 28,
            "column": 0,
            "path": "examples/admm/admm_example_coordinator.py",
            "symbol": "import-error",
            "message": "Unable to import 'agentlib.utils'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "examples.admm.admm_example_coordinator",
            "obj": "",
            "line": 29,
            "column": 0,
            "path": "examples/admm/admm_example_coordinator.py",
            "symbol": "import-error",
            "message": "Unable to import 'agentlib.utils.multi_agent_system'",
            "message-id": "E0401"
        },
        {
            "type": "convention",
            "module": "examples.admm.admm_example_coordinator",
            "obj": "plot",
            "line": 48,
            "column": 0,
            "path": "examples/admm/admm_example_coordinator.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "examples.admm.admm_example_coordinator",
            "obj": "plot",
            "line": 49,
            "column": 4,
            "path": "examples/admm/admm_example_coordinator.py",
            "symbol": "import-outside-toplevel",
            "message": "Import outside toplevel (matplotlib.pyplot)",
            "message-id": "C0415"
        },
        {
            "type": "error",
            "module": "examples.admm.admm_example_coordinator",
            "obj": "plot",
            "line": 49,
            "column": 4,
            "path": "examples/admm/admm_example_coordinator.py",
            "symbol": "import-error",
            "message": "Unable to import 'matplotlib.pyplot'",
            "message-id": "E0401"
        },
        {
            "type": "convention",
            "module": "examples.admm.admm_example_coordinator",
            "obj": "plot",
            "line": 50,
            "column": 4,
            "path": "examples/admm/admm_example_coordinator.py",
            "symbol": "import-outside-toplevel",
            "message": "Import outside toplevel (agentlib_mpc.utils.analysis.admm_at_time_step)",
            "message-id": "C0415"
        },
        {
            "type": "convention",
            "module": "examples.admm.admm_example_coordinator",
            "obj": "plot",
            "line": 59,
            "column": 9,
            "path": "examples/admm/admm_example_coordinator.py",
            "symbol": "invalid-name",
            "message": "Variable name \"ax\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "warning",
            "module": "examples.admm.admm_example_coordinator",
            "obj": "plot",
            "line": 59,
            "column": 4,
            "path": "examples/admm/admm_example_coordinator.py",
            "symbol": "unused-variable",
            "message": "Unused variable 'fig'",
            "message-id": "W0612"
        },
        {
            "type": "convention",
            "module": "examples.admm.admm_example_coordinator",
            "obj": "run_example",
            "line": 69,
            "column": 0,
            "path": "examples/admm/admm_example_coordinator.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "refactor",
            "module": "examples.admm.admm_example_coordinator",
            "obj": "run_example",
            "line": 69,
            "column": 0,
            "path": "examples/admm/admm_example_coordinator.py",
            "symbol": "too-many-arguments",
            "message": "Too many arguments (6/5)",
            "message-id": "R0913"
        },
        {
            "type": "refactor",
            "module": "examples.admm.admm_example_coordinator",
            "obj": "run_example",
            "line": 69,
            "column": 0,
            "path": "examples/admm/admm_example_coordinator.py",
            "symbol": "too-many-locals",
            "message": "Too many local variables (17/15)",
            "message-id": "R0914"
        },
        {
            "type": "warning",
            "module": "examples.admm.admm_example_coordinator",
            "obj": "run_example",
            "line": 75,
            "column": 4,
            "path": "examples/admm/admm_example_coordinator.py",
            "symbol": "redefined-outer-name",
            "message": "Redefining name 'show_dashboard' from outer scope (line 33)",
            "message-id": "W0621"
        },
        {
            "type": "warning",
            "module": "examples.admm.admm_example_coordinator",
            "obj": "run_example",
            "line": 85,
            "column": 13,
            "path": "examples/admm/admm_example_coordinator.py",
            "symbol": "unspecified-encoding",
            "message": "Using open without explicitly specifying an encoding",
            "message-id": "W1514"
        },
        {
            "type": "convention",
            "module": "examples.admm.admm_example_coordinator",
            "obj": "run_example",
            "line": 85,
            "column": 27,
            "path": "examples/admm/admm_example_coordinator.py",
            "symbol": "invalid-name",
            "message": "Variable name \"f\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "warning",
            "module": "examples.admm.admm_example_coordinator",
            "obj": "run_example",
            "line": 90,
            "column": 21,
            "path": "examples/admm/admm_example_coordinator.py",
            "symbol": "unspecified-encoding",
            "message": "Using open without explicitly specifying an encoding",
            "message-id": "W1514"
        },
        {
            "type": "convention",
            "module": "examples.admm.admm_example_coordinator",
            "obj": "run_example",
            "line": 90,
            "column": 34,
            "path": "examples/admm/admm_example_coordinator.py",
            "symbol": "invalid-name",
            "message": "Variable name \"f\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "warning",
            "module": "examples.admm.admm_example_coordinator",
            "obj": "run_example",
            "line": 97,
            "column": 4,
            "path": "examples/admm/admm_example_coordinator.py",
            "symbol": "unused-variable",
            "message": "Unused variable 'broker'",
            "message-id": "W0612"
        },
        {
            "type": "warning",
            "module": "examples.admm.admm_example_coordinator",
            "obj": "",
            "line": 31,
            "column": 0,
            "path": "examples/admm/admm_example_coordinator.py",
            "symbol": "unused-import",
            "message": "Unused admm_dashboard imported from agentlib_mpc.utils.plotting",
            "message-id": "W0611"
        },
        {
            "type": "warning",
            "module": "examples.admm.admm_example_coordinator",
            "obj": "",
            "line": 33,
            "column": 0,
            "path": "examples/admm/admm_example_coordinator.py",
            "symbol": "unused-import",
            "message": "Unused show_dashboard imported from agentlib_mpc.utils.plotting.interactive",
            "message-id": "W0611"
        },
        {
            "type": "error",
            "module": "examples.admm.admm_example_coordinator_multiprocessing",
            "obj": "",
            "line": 27,
            "column": 0,
            "path": "examples/admm/admm_example_coordinator_multiprocessing.py",
            "symbol": "import-error",
            "message": "Unable to import 'agentlib.utils.multi_agent_system'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "examples.admm.admm_example_coordinator_multiprocessing",
            "obj": "",
            "line": 28,
            "column": 0,
            "path": "examples/admm/admm_example_coordinator_multiprocessing.py",
            "symbol": "import-error",
            "message": "Unable to import 'agentlib.utils'",
            "message-id": "E0401"
        },
        {
            "type": "convention",
            "module": "examples.admm.admm_example_coordinator_multiprocessing",
            "obj": "plot",
            "line": 38,
            "column": 0,
            "path": "examples/admm/admm_example_coordinator_multiprocessing.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "examples.admm.admm_example_coordinator_multiprocessing",
            "obj": "plot",
            "line": 39,
            "column": 4,
            "path": "examples/admm/admm_example_coordinator_multiprocessing.py",
            "symbol": "import-outside-toplevel",
            "message": "Import outside toplevel (matplotlib.pyplot)",
            "message-id": "C0415"
        },
        {
            "type": "error",
            "module": "examples.admm.admm_example_coordinator_multiprocessing",
            "obj": "plot",
            "line": 39,
            "column": 4,
            "path": "examples/admm/admm_example_coordinator_multiprocessing.py",
            "symbol": "import-error",
            "message": "Unable to import 'matplotlib.pyplot'",
            "message-id": "E0401"
        },
        {
            "type": "convention",
            "module": "examples.admm.admm_example_coordinator_multiprocessing",
            "obj": "plot",
            "line": 40,
            "column": 4,
            "path": "examples/admm/admm_example_coordinator_multiprocessing.py",
            "symbol": "import-outside-toplevel",
            "message": "Import outside toplevel (agentlib_mpc.utils.analysis.admm_at_time_step)",
            "message-id": "C0415"
        },
        {
            "type": "convention",
            "module": "examples.admm.admm_example_coordinator_multiprocessing",
            "obj": "plot",
            "line": 54,
            "column": 9,
            "path": "examples/admm/admm_example_coordinator_multiprocessing.py",
            "symbol": "invalid-name",
            "message": "Variable name \"ax\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "warning",
            "module": "examples.admm.admm_example_coordinator_multiprocessing",
            "obj": "plot",
            "line": 54,
            "column": 4,
            "path": "examples/admm/admm_example_coordinator_multiprocessing.py",
            "symbol": "unused-variable",
            "message": "Unused variable 'fig'",
            "message-id": "W0612"
        },
        {
            "type": "convention",
            "module": "examples.admm.admm_example_coordinator_multiprocessing",
            "obj": "run_example",
            "line": 65,
            "column": 0,
            "path": "examples/admm/admm_example_coordinator_multiprocessing.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "refactor",
            "module": "examples.admm.admm_example_coordinator_multiprocessing",
            "obj": "run_example",
            "line": 65,
            "column": 0,
            "path": "examples/admm/admm_example_coordinator_multiprocessing.py",
            "symbol": "too-many-locals",
            "message": "Too many local variables (16/15)",
            "message-id": "R0914"
        },
        {
            "type": "warning",
            "module": "examples.admm.admm_example_coordinator_multiprocessing",
            "obj": "run_example",
            "line": 80,
            "column": 13,
            "path": "examples/admm/admm_example_coordinator_multiprocessing.py",
            "symbol": "unspecified-encoding",
            "message": "Using open without explicitly specifying an encoding",
            "message-id": "W1514"
        },
        {
            "type": "convention",
            "module": "examples.admm.admm_example_coordinator_multiprocessing",
            "obj": "run_example",
            "line": 80,
            "column": 27,
            "path": "examples/admm/admm_example_coordinator_multiprocessing.py",
            "symbol": "invalid-name",
            "message": "Variable name \"f\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "warning",
            "module": "examples.admm.admm_example_coordinator_multiprocessing",
            "obj": "run_example",
            "line": 85,
            "column": 21,
            "path": "examples/admm/admm_example_coordinator_multiprocessing.py",
            "symbol": "unspecified-encoding",
            "message": "Using open without explicitly specifying an encoding",
            "message-id": "W1514"
        },
        {
            "type": "convention",
            "module": "examples.admm.admm_example_coordinator_multiprocessing",
            "obj": "run_example",
            "line": 85,
            "column": 34,
            "path": "examples/admm/admm_example_coordinator_multiprocessing.py",
            "symbol": "invalid-name",
            "message": "Variable name \"f\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "warning",
            "module": "examples.admm.admm_example_coordinator_multiprocessing",
            "obj": "run_example",
            "line": 95,
            "column": 4,
            "path": "examples/admm/admm_example_coordinator_multiprocessing.py",
            "symbol": "unused-variable",
            "message": "Unused variable 'broker'",
            "message-id": "W0612"
        },
        {
            "type": "convention",
            "module": "examples.admm.models.simulation_model",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/admm/models/simulation_model.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "fatal",
            "module": "examples.admm.models.simulation_model",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/admm/models/simulation_model.py",
            "symbol": "astroid-error",
            "message": "examples/admm/models/simulation_model.py: Fatal error while checking 'examples/admm/models/simulation_model.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-28-33.txt'.",
            "message-id": "F0002"
        },
        {
            "type": "convention",
            "module": "examples.admm.models.ca_room_model",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/admm/models/ca_room_model.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "convention",
            "module": "examples.admm.models.ca_room_model",
            "obj": "CaCooledRoomConfig",
            "line": 11,
            "column": 0,
            "path": "examples/admm/models/ca_room_model.py",
            "symbol": "missing-class-docstring",
            "message": "Missing class docstring",
            "message-id": "C0115"
        },
        {
            "type": "warning",
            "module": "examples.admm.models.ca_room_model",
            "obj": "CaCooledRoomConfig",
            "line": 45,
            "column": 17,
            "path": "examples/admm/models/ca_room_model.py",
            "symbol": "f-string-without-interpolation",
            "message": "Using an f-string that does not have any interpolated variables",
            "message-id": "W1309"
        },
        {
            "type": "warning",
            "module": "examples.admm.models.ca_room_model",
            "obj": "CaCooledRoomConfig",
            "line": 50,
            "column": 17,
            "path": "examples/admm/models/ca_room_model.py",
            "symbol": "f-string-without-interpolation",
            "message": "Using an f-string that does not have any interpolated variables",
            "message-id": "W1309"
        },
        {
            "type": "convention",
            "module": "examples.admm.models.ca_room_model",
            "obj": "CaCooledRoom",
            "line": 85,
            "column": 0,
            "path": "examples/admm/models/ca_room_model.py",
            "symbol": "missing-class-docstring",
            "message": "Missing class docstring",
            "message-id": "C0115"
        },
        {
            "type": "warning",
            "module": "examples.admm.models.ca_room_model",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/admm/models/ca_room_model.py",
            "symbol": "unused-import",
            "message": "Unused CasadiOutput imported from agentlib_mpc.models.casadi_model",
            "message-id": "W0611"
        },
        {
            "type": "convention",
            "module": "examples.admm.models.ca_cooler_model",
            "obj": "",
            "line": 21,
            "column": 0,
            "path": "examples/admm/models/ca_cooler_model.py",
            "symbol": "line-too-long",
            "message": "Line too long (104/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "examples.admm.models.ca_cooler_model",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/admm/models/ca_cooler_model.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "convention",
            "module": "examples.admm.models.ca_cooler_model",
            "obj": "CaCoolerConfig",
            "line": 11,
            "column": 0,
            "path": "examples/admm/models/ca_cooler_model.py",
            "symbol": "missing-class-docstring",
            "message": "Missing class docstring",
            "message-id": "C0115"
        },
        {
            "type": "convention",
            "module": "examples.admm.models.ca_cooler_model",
            "obj": "CaCooler",
            "line": 49,
            "column": 0,
            "path": "examples/admm/models/ca_cooler_model.py",
            "symbol": "missing-class-docstring",
            "message": "Missing class docstring",
            "message-id": "C0115"
        },
        {
            "type": "warning",
            "module": "examples.Estimators.mhe_example",
            "obj": "",
            "line": 358,
            "column": 23,
            "path": "examples/Estimators/mhe_example.py",
            "symbol": "anomalous-backslash-in-string",
            "message": "Anomalous backslash in string: '\\d'. String constant might be missing an r prefix.",
            "message-id": "W1401"
        },
        {
            "type": "convention",
            "module": "examples.Estimators.mhe_example",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/Estimators/mhe_example.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "fatal",
            "module": "examples.Estimators.mhe_example",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/Estimators/mhe_example.py",
            "symbol": "astroid-error",
            "message": "examples/Estimators/mhe_example.py: Fatal error while checking 'examples/Estimators/mhe_example.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-28-33.txt'.",
            "message-id": "F0002"
        },
        {
            "type": "error",
            "module": "examples.three_zone_datadriven_admm.admm_3zone_sim",
            "obj": "",
            "line": 32,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/admm_3zone_sim.py",
            "symbol": "import-error",
            "message": "Unable to import 'agentlib.utils.multi_agent_system'",
            "message-id": "E0401"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.admm_3zone_sim",
            "obj": "",
            "line": 32,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/admm_3zone_sim.py",
            "symbol": "wrong-import-position",
            "message": "Import \"from agentlib.utils.multi_agent_system import LocalMASAgency\" should be placed at the top of the module",
            "message-id": "C0413"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.admm_3zone_sim",
            "obj": "run_example",
            "line": 48,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/admm_3zone_sim.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "warning",
            "module": "examples.three_zone_datadriven_admm.admm_3zone_sim",
            "obj": "run_example",
            "line": 60,
            "column": 12,
            "path": "examples/three_zone_datadriven_admm/admm_3zone_sim.py",
            "symbol": "redefined-outer-name",
            "message": "Redefining name 'sys' from outer scope (line 27)",
            "message-id": "W0621"
        },
        {
            "type": "warning",
            "module": "examples.three_zone_datadriven_admm.admm_3zone_sim",
            "obj": "run_example",
            "line": 60,
            "column": 12,
            "path": "examples/three_zone_datadriven_admm/admm_3zone_sim.py",
            "symbol": "reimported",
            "message": "Reimport 'sys' (imported line 27)",
            "message-id": "W0404"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.admm_3zone_sim",
            "obj": "run_example",
            "line": 60,
            "column": 12,
            "path": "examples/three_zone_datadriven_admm/admm_3zone_sim.py",
            "symbol": "import-outside-toplevel",
            "message": "Import outside toplevel (sys)",
            "message-id": "C0415"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.admm_3zone_sim",
            "obj": "run_example",
            "line": 63,
            "column": 12,
            "path": "examples/three_zone_datadriven_admm/admm_3zone_sim.py",
            "symbol": "import-outside-toplevel",
            "message": "Import outside toplevel (training_direct)",
            "message-id": "C0415"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.admm_3zone_sim",
            "obj": "run_example",
            "line": 75,
            "column": 8,
            "path": "examples/three_zone_datadriven_admm/admm_3zone_sim.py",
            "symbol": "import-outside-toplevel",
            "message": "Import outside toplevel (plot)",
            "message-id": "C0415"
        },
        {
            "type": "warning",
            "module": "examples.three_zone_datadriven_admm.admm_3zone_sim",
            "obj": "run_example",
            "line": 49,
            "column": 33,
            "path": "examples/three_zone_datadriven_admm/admm_3zone_sim.py",
            "symbol": "unused-argument",
            "message": "Unused argument 'start_pred'",
            "message-id": "W0613"
        },
        {
            "type": "warning",
            "module": "examples.three_zone_datadriven_admm.admm_3zone_sim",
            "obj": "",
            "line": 84,
            "column": 4,
            "path": "examples/three_zone_datadriven_admm/admm_3zone_sim.py",
            "symbol": "pointless-string-statement",
            "message": "String statement has no effect",
            "message-id": "W0105"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.admm_3zone_sim",
            "obj": "",
            "line": 24,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/admm_3zone_sim.py",
            "symbol": "ungrouped-imports",
            "message": "Imports from package logging are not grouped",
            "message-id": "C0412"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.plot_ADMM_anim",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/plot_ADMM_anim.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.plot_ADMM_anim",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/plot_ADMM_anim.py",
            "symbol": "invalid-name",
            "message": "Module name \"plot_ADMM_anim\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "error",
            "module": "examples.three_zone_datadriven_admm.plot_ADMM_anim",
            "obj": "",
            "line": 4,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/plot_ADMM_anim.py",
            "symbol": "import-error",
            "message": "Unable to import 'matplotlib.pyplot'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "examples.three_zone_datadriven_admm.plot_ADMM_anim",
            "obj": "",
            "line": 5,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/plot_ADMM_anim.py",
            "symbol": "import-error",
            "message": "Unable to import 'matplotlib'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "examples.three_zone_datadriven_admm.plot_ADMM_anim",
            "obj": "",
            "line": 6,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/plot_ADMM_anim.py",
            "symbol": "import-error",
            "message": "Unable to import 'matplotlib.animation'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "examples.three_zone_datadriven_admm.plot_ADMM_anim",
            "obj": "",
            "line": 7,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/plot_ADMM_anim.py",
            "symbol": "import-error",
            "message": "Unable to import 'matplotlib.font_manager'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "examples.three_zone_datadriven_admm.plot_ADMM_anim",
            "obj": "",
            "line": 8,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/plot_ADMM_anim.py",
            "symbol": "import-error",
            "message": "Unable to import 'matplotlib.ticker'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "examples.three_zone_datadriven_admm.plot_ADMM_anim",
            "obj": "",
            "line": 9,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/plot_ADMM_anim.py",
            "symbol": "import-error",
            "message": "Unable to import 'pandas'",
            "message-id": "E0401"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.plot_ADMM_anim",
            "obj": "",
            "line": 14,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/plot_ADMM_anim.py",
            "symbol": "invalid-name",
            "message": "Constant name \"time_step\" doesn't conform to UPPER_CASE naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.plot_ADMM_anim",
            "obj": "",
            "line": 15,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/plot_ADMM_anim.py",
            "symbol": "invalid-name",
            "message": "Constant name \"filename\" doesn't conform to UPPER_CASE naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.plot_ADMM_anim",
            "obj": "",
            "line": 16,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/plot_ADMM_anim.py",
            "symbol": "invalid-name",
            "message": "Constant name \"file_format\" doesn't conform to UPPER_CASE naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.plot_ADMM_anim",
            "obj": "setup_figure",
            "line": 52,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/plot_ADMM_anim.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.plot_ADMM_anim",
            "obj": "setup_figure",
            "line": 53,
            "column": 4,
            "path": "examples/three_zone_datadriven_admm/plot_ADMM_anim.py",
            "symbol": "invalid-name",
            "message": "Variable name \"cm\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.plot_ADMM_anim",
            "obj": "init",
            "line": 73,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/plot_ADMM_anim.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.plot_ADMM_anim",
            "obj": "animate",
            "line": 116,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/plot_ADMM_anim.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.plot_ADMM_anim",
            "obj": "animate",
            "line": 119,
            "column": 4,
            "path": "examples/three_zone_datadriven_admm/plot_ADMM_anim.py",
            "symbol": "invalid-name",
            "message": "Variable name \"room_mDot1\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.plot_ADMM_anim",
            "obj": "animate",
            "line": 122,
            "column": 4,
            "path": "examples/three_zone_datadriven_admm/plot_ADMM_anim.py",
            "symbol": "invalid-name",
            "message": "Variable name \"room_mDot_var1\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.plot_ADMM_anim",
            "obj": "animate",
            "line": 123,
            "column": 4,
            "path": "examples/three_zone_datadriven_admm/plot_ADMM_anim.py",
            "symbol": "invalid-name",
            "message": "Variable name \"room_mDot_var1\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.plot_ADMM_anim",
            "obj": "animate",
            "line": 125,
            "column": 4,
            "path": "examples/three_zone_datadriven_admm/plot_ADMM_anim.py",
            "symbol": "invalid-name",
            "message": "Variable name \"room_mDot2\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.plot_ADMM_anim",
            "obj": "animate",
            "line": 126,
            "column": 4,
            "path": "examples/three_zone_datadriven_admm/plot_ADMM_anim.py",
            "symbol": "invalid-name",
            "message": "Variable name \"room_mDot_var2\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.plot_ADMM_anim",
            "obj": "animate",
            "line": 127,
            "column": 4,
            "path": "examples/three_zone_datadriven_admm/plot_ADMM_anim.py",
            "symbol": "invalid-name",
            "message": "Variable name \"room_mDot_var2\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.plot_ADMM_anim",
            "obj": "animate",
            "line": 129,
            "column": 4,
            "path": "examples/three_zone_datadriven_admm/plot_ADMM_anim.py",
            "symbol": "invalid-name",
            "message": "Variable name \"room_mDot3\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.plot_ADMM_anim",
            "obj": "animate",
            "line": 130,
            "column": 4,
            "path": "examples/three_zone_datadriven_admm/plot_ADMM_anim.py",
            "symbol": "invalid-name",
            "message": "Variable name \"room_mDot_var3\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.plot_ADMM_anim",
            "obj": "animate",
            "line": 131,
            "column": 4,
            "path": "examples/three_zone_datadriven_admm/plot_ADMM_anim.py",
            "symbol": "invalid-name",
            "message": "Variable name \"room_mDot_var3\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.plot_ADMM_anim",
            "obj": "animate",
            "line": 133,
            "column": 4,
            "path": "examples/three_zone_datadriven_admm/plot_ADMM_anim.py",
            "symbol": "invalid-name",
            "message": "Variable name \"cooler_mDot\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.plot_ADMM_anim",
            "obj": "animate",
            "line": 136,
            "column": 4,
            "path": "examples/three_zone_datadriven_admm/plot_ADMM_anim.py",
            "symbol": "invalid-name",
            "message": "Variable name \"cooler_mDot_var\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.plot_ADMM_anim",
            "obj": "animate",
            "line": 137,
            "column": 4,
            "path": "examples/three_zone_datadriven_admm/plot_ADMM_anim.py",
            "symbol": "invalid-name",
            "message": "Variable name \"cooler_mDot_var\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.plot_ADMM_anim",
            "obj": "main",
            "line": 146,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/plot_ADMM_anim.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.plot_ADMM_anim",
            "obj": "png_main",
            "line": 162,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/plot_ADMM_anim.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.plot_ADMM_anim",
            "obj": "",
            "line": 4,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/plot_ADMM_anim.py",
            "symbol": "wrong-import-order",
            "message": "third party import \"import matplotlib.pyplot as plt\" should be placed before \"from agentlib_mpc.utils.analysis import admm_at_time_step, load_admm\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.plot_ADMM_anim",
            "obj": "",
            "line": 5,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/plot_ADMM_anim.py",
            "symbol": "wrong-import-order",
            "message": "third party import \"import matplotlib\" should be placed before \"from agentlib_mpc.utils.analysis import admm_at_time_step, load_admm\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.plot_ADMM_anim",
            "obj": "",
            "line": 6,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/plot_ADMM_anim.py",
            "symbol": "wrong-import-order",
            "message": "third party import \"from matplotlib.animation import FuncAnimation\" should be placed before \"from agentlib_mpc.utils.analysis import admm_at_time_step, load_admm\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.plot_ADMM_anim",
            "obj": "",
            "line": 7,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/plot_ADMM_anim.py",
            "symbol": "wrong-import-order",
            "message": "third party import \"from matplotlib.font_manager import FontProperties\" should be placed before \"from agentlib_mpc.utils.analysis import admm_at_time_step, load_admm\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.plot_ADMM_anim",
            "obj": "",
            "line": 8,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/plot_ADMM_anim.py",
            "symbol": "wrong-import-order",
            "message": "third party import \"from matplotlib.ticker import MultipleLocator, FormatStrFormatter, AutoMinorLocator\" should be placed before \"from agentlib_mpc.utils.analysis import admm_at_time_step, load_admm\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.plot_ADMM_anim",
            "obj": "",
            "line": 9,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/plot_ADMM_anim.py",
            "symbol": "wrong-import-order",
            "message": "third party import \"import pandas as pd\" should be placed before \"from agentlib_mpc.utils.analysis import admm_at_time_step, load_admm\"",
            "message-id": "C0411"
        },
        {
            "type": "warning",
            "module": "examples.three_zone_datadriven_admm.plot_ADMM_anim",
            "obj": "",
            "line": 7,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/plot_ADMM_anim.py",
            "symbol": "unused-import",
            "message": "Unused FontProperties imported from matplotlib.font_manager",
            "message-id": "W0611"
        },
        {
            "type": "warning",
            "module": "examples.three_zone_datadriven_admm.plot_ADMM_anim",
            "obj": "",
            "line": 8,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/plot_ADMM_anim.py",
            "symbol": "unused-import",
            "message": "Unused MultipleLocator imported from matplotlib.ticker",
            "message-id": "W0611"
        },
        {
            "type": "warning",
            "module": "examples.three_zone_datadriven_admm.plot_ADMM_anim",
            "obj": "",
            "line": 8,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/plot_ADMM_anim.py",
            "symbol": "unused-import",
            "message": "Unused FormatStrFormatter imported from matplotlib.ticker",
            "message-id": "W0611"
        },
        {
            "type": "warning",
            "module": "examples.three_zone_datadriven_admm.plot_ADMM_anim",
            "obj": "",
            "line": 9,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/plot_ADMM_anim.py",
            "symbol": "unused-import",
            "message": "Unused pandas imported as pd",
            "message-id": "W0611"
        },
        {
            "type": "warning",
            "module": "examples.three_zone_datadriven_admm.plot",
            "obj": "",
            "line": 56,
            "column": 23,
            "path": "examples/three_zone_datadriven_admm/plot.py",
            "symbol": "anomalous-backslash-in-string",
            "message": "Anomalous backslash in string: '\\d'. String constant might be missing an r prefix.",
            "message-id": "W1401"
        },
        {
            "type": "warning",
            "module": "examples.three_zone_datadriven_admm.plot",
            "obj": "",
            "line": 62,
            "column": 23,
            "path": "examples/three_zone_datadriven_admm/plot.py",
            "symbol": "anomalous-backslash-in-string",
            "message": "Anomalous backslash in string: '\\d'. String constant might be missing an r prefix.",
            "message-id": "W1401"
        },
        {
            "type": "warning",
            "module": "examples.three_zone_datadriven_admm.plot",
            "obj": "",
            "line": 68,
            "column": 23,
            "path": "examples/three_zone_datadriven_admm/plot.py",
            "symbol": "anomalous-backslash-in-string",
            "message": "Anomalous backslash in string: '\\d'. String constant might be missing an r prefix.",
            "message-id": "W1401"
        },
        {
            "type": "warning",
            "module": "examples.three_zone_datadriven_admm.plot",
            "obj": "",
            "line": 213,
            "column": 24,
            "path": "examples/three_zone_datadriven_admm/plot.py",
            "symbol": "anomalous-backslash-in-string",
            "message": "Anomalous backslash in string: '\\d'. String constant might be missing an r prefix.",
            "message-id": "W1401"
        },
        {
            "type": "warning",
            "module": "examples.three_zone_datadriven_admm.plot",
            "obj": "",
            "line": 237,
            "column": 24,
            "path": "examples/three_zone_datadriven_admm/plot.py",
            "symbol": "anomalous-backslash-in-string",
            "message": "Anomalous backslash in string: '\\d'. String constant might be missing an r prefix.",
            "message-id": "W1401"
        },
        {
            "type": "warning",
            "module": "examples.three_zone_datadriven_admm.plot",
            "obj": "",
            "line": 301,
            "column": 24,
            "path": "examples/three_zone_datadriven_admm/plot.py",
            "symbol": "anomalous-backslash-in-string",
            "message": "Anomalous backslash in string: '\\d'. String constant might be missing an r prefix.",
            "message-id": "W1401"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.plot",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/plot.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "error",
            "module": "examples.three_zone_datadriven_admm.plot",
            "obj": "",
            "line": 3,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/plot.py",
            "symbol": "import-error",
            "message": "Unable to import 'matplotlib.pyplot'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "examples.three_zone_datadriven_admm.plot",
            "obj": "",
            "line": 4,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/plot.py",
            "symbol": "import-error",
            "message": "Unable to import 'numpy'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "examples.three_zone_datadriven_admm.plot",
            "obj": "",
            "line": 5,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/plot.py",
            "symbol": "import-error",
            "message": "Unable to import 'pandas'",
            "message-id": "E0401"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.plot",
            "obj": "",
            "line": 21,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/plot.py",
            "symbol": "invalid-name",
            "message": "Constant name \"res_path\" doesn't conform to UPPER_CASE naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.plot",
            "obj": "load_results",
            "line": 24,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/plot.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.plot",
            "obj": "to_celsius",
            "line": 42,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/plot.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.plot",
            "obj": "plot_disturbance",
            "line": 46,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/plot.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.plot",
            "obj": "plot_disturbance",
            "line": 83,
            "column": 8,
            "path": "examples/three_zone_datadriven_admm/plot.py",
            "symbol": "invalid-name",
            "message": "Variable name \"ax\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.plot",
            "obj": "plot_room_temperatures",
            "line": 99,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/plot.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.plot",
            "obj": "plot_room_temperatures",
            "line": 160,
            "column": 8,
            "path": "examples/three_zone_datadriven_admm/plot.py",
            "symbol": "invalid-name",
            "message": "Variable name \"ax\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "warning",
            "module": "examples.three_zone_datadriven_admm.plot",
            "obj": "plot_room_temperatures",
            "line": 105,
            "column": 4,
            "path": "examples/three_zone_datadriven_admm/plot.py",
            "symbol": "unused-variable",
            "message": "Unused variable 'fig'",
            "message-id": "W0612"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.plot",
            "obj": "calculate_Energy",
            "line": 168,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/plot.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.plot",
            "obj": "calculate_Energy",
            "line": 168,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/plot.py",
            "symbol": "invalid-name",
            "message": "Function name \"calculate_Energy\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.plot",
            "obj": "plot_energy_use",
            "line": 201,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/plot.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "refactor",
            "module": "examples.three_zone_datadriven_admm.plot",
            "obj": "plot_energy_use",
            "line": 201,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/plot.py",
            "symbol": "too-many-locals",
            "message": "Too many local variables (16/15)",
            "message-id": "R0914"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.plot",
            "obj": "plot_energy_use",
            "line": 204,
            "column": 4,
            "path": "examples/three_zone_datadriven_admm/plot.py",
            "symbol": "invalid-name",
            "message": "Variable name \"dQ_cca_1\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.plot",
            "obj": "plot_energy_use",
            "line": 204,
            "column": 14,
            "path": "examples/three_zone_datadriven_admm/plot.py",
            "symbol": "invalid-name",
            "message": "Variable name \"dQ_cca_2\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.plot",
            "obj": "plot_energy_use",
            "line": 204,
            "column": 24,
            "path": "examples/three_zone_datadriven_admm/plot.py",
            "symbol": "invalid-name",
            "message": "Variable name \"dQ_cca_3\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.plot",
            "obj": "plot_energy_use",
            "line": 204,
            "column": 34,
            "path": "examples/three_zone_datadriven_admm/plot.py",
            "symbol": "invalid-name",
            "message": "Variable name \"dQ_ahu_1\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.plot",
            "obj": "plot_energy_use",
            "line": 204,
            "column": 44,
            "path": "examples/three_zone_datadriven_admm/plot.py",
            "symbol": "invalid-name",
            "message": "Variable name \"dQ_ahu_2\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.plot",
            "obj": "plot_energy_use",
            "line": 204,
            "column": 54,
            "path": "examples/three_zone_datadriven_admm/plot.py",
            "symbol": "invalid-name",
            "message": "Variable name \"dQ_ahu_3\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.plot",
            "obj": "plot_energy_use",
            "line": 266,
            "column": 8,
            "path": "examples/three_zone_datadriven_admm/plot.py",
            "symbol": "invalid-name",
            "message": "Variable name \"ax\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.plot",
            "obj": "plot_cca",
            "line": 282,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/plot.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "refactor",
            "module": "examples.three_zone_datadriven_admm.plot",
            "obj": "plot_cca",
            "line": 282,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/plot.py",
            "symbol": "too-many-locals",
            "message": "Too many local variables (23/15)",
            "message-id": "R0914"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.plot",
            "obj": "plot_cca",
            "line": 283,
            "column": 4,
            "path": "examples/three_zone_datadriven_admm/plot.py",
            "symbol": "invalid-name",
            "message": "Variable name \"it\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.plot",
            "obj": "plot_cca",
            "line": 338,
            "column": 8,
            "path": "examples/three_zone_datadriven_admm/plot.py",
            "symbol": "invalid-name",
            "message": "Variable name \"ax\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "warning",
            "module": "examples.three_zone_datadriven_admm.plot",
            "obj": "plot_cca",
            "line": 284,
            "column": 4,
            "path": "examples/three_zone_datadriven_admm/plot.py",
            "symbol": "unused-variable",
            "message": "Unused variable 'res_sim'",
            "message-id": "W0612"
        },
        {
            "type": "warning",
            "module": "examples.three_zone_datadriven_admm.plot",
            "obj": "plot_cca",
            "line": 285,
            "column": 4,
            "path": "examples/three_zone_datadriven_admm/plot.py",
            "symbol": "unused-variable",
            "message": "Unused variable 'res_sim2'",
            "message-id": "W0612"
        },
        {
            "type": "warning",
            "module": "examples.three_zone_datadriven_admm.plot",
            "obj": "plot_cca",
            "line": 286,
            "column": 4,
            "path": "examples/three_zone_datadriven_admm/plot.py",
            "symbol": "unused-variable",
            "message": "Unused variable 'res_sim3'",
            "message-id": "W0612"
        },
        {
            "type": "warning",
            "module": "examples.three_zone_datadriven_admm.plot",
            "obj": "plot_cca",
            "line": 288,
            "column": 4,
            "path": "examples/three_zone_datadriven_admm/plot.py",
            "symbol": "unused-variable",
            "message": "Unused variable 'air_controller'",
            "message-id": "W0612"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.plot",
            "obj": "plot_predictions",
            "line": 354,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/plot.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.plot",
            "obj": "plot_predictions",
            "line": 355,
            "column": 9,
            "path": "examples/three_zone_datadriven_admm/plot.py",
            "symbol": "invalid-name",
            "message": "Variable name \"ax\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "warning",
            "module": "examples.three_zone_datadriven_admm.plot",
            "obj": "plot_predictions",
            "line": 355,
            "column": 4,
            "path": "examples/three_zone_datadriven_admm/plot.py",
            "symbol": "unused-variable",
            "message": "Unused variable 'fig'",
            "message-id": "W0612"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.plot",
            "obj": "main",
            "line": 367,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/plot.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.three_zone_util",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/three_zone_util.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "error",
            "module": "examples.three_zone_datadriven_admm.three_zone_util",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/three_zone_util.py",
            "symbol": "import-error",
            "message": "Unable to import 'pandas'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "examples.three_zone_datadriven_admm.three_zone_util",
            "obj": "",
            "line": 2,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/three_zone_util.py",
            "symbol": "import-error",
            "message": "Unable to import 'numpy'",
            "message-id": "E0401"
        },
        {
            "type": "warning",
            "module": "examples.three_zone_datadriven_admm.three_zone_util",
            "obj": "load_weather",
            "line": 9,
            "column": 9,
            "path": "examples/three_zone_datadriven_admm/three_zone_util.py",
            "symbol": "unspecified-encoding",
            "message": "Using open without explicitly specifying an encoding",
            "message-id": "W1514"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.three_zone_util",
            "obj": "load_weather",
            "line": 9,
            "column": 23,
            "path": "examples/three_zone_datadriven_admm/three_zone_util.py",
            "symbol": "invalid-name",
            "message": "Variable name \"f\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.three_zone_util",
            "obj": "load_weather",
            "line": 17,
            "column": 4,
            "path": "examples/three_zone_datadriven_admm/three_zone_util.py",
            "symbol": "consider-using-enumerate",
            "message": "Consider using enumerate instead of iterating with range and len",
            "message-id": "C0200"
        },
        {
            "type": "refactor",
            "module": "examples.three_zone_datadriven_admm.three_zone_util",
            "obj": "heat_load_func.calc_heat",
            "line": 40,
            "column": 8,
            "path": "examples/three_zone_datadriven_admm/three_zone_util.py",
            "symbol": "no-else-return",
            "message": "Unnecessary \"else\" after \"return\", remove the \"else\" and de-indent the code inside it",
            "message-id": "R1705"
        },
        {
            "type": "refactor",
            "module": "examples.three_zone_datadriven_admm.three_zone_util",
            "obj": "heat_load_func",
            "line": 45,
            "column": 4,
            "path": "examples/three_zone_datadriven_admm/three_zone_util.py",
            "symbol": "no-else-return",
            "message": "Unnecessary \"else\" after \"return\", remove the \"else\" and de-indent the code inside it",
            "message-id": "R1705"
        },
        {
            "type": "warning",
            "module": "examples.three_zone_datadriven_admm.three_zone_util",
            "obj": "get_q_load",
            "line": 57,
            "column": 24,
            "path": "examples/three_zone_datadriven_admm/three_zone_util.py",
            "symbol": "redefined-outer-name",
            "message": "Redefining name 'weather_data' from outer scope (line 98)",
            "message-id": "W0621"
        },
        {
            "type": "refactor",
            "module": "examples.three_zone_datadriven_admm.three_zone_util",
            "obj": "get_q_load",
            "line": 65,
            "column": 4,
            "path": "examples/three_zone_datadriven_admm/three_zone_util.py",
            "symbol": "no-else-return",
            "message": "Unnecessary \"else\" after \"return\", remove the \"else\" and de-indent the code inside it",
            "message-id": "R1705"
        },
        {
            "type": "warning",
            "module": "examples.three_zone_datadriven_admm.three_zone_util",
            "obj": "get_t_aussen",
            "line": 78,
            "column": 26,
            "path": "examples/three_zone_datadriven_admm/three_zone_util.py",
            "symbol": "redefined-outer-name",
            "message": "Redefining name 'weather_data' from outer scope (line 98)",
            "message-id": "W0621"
        },
        {
            "type": "refactor",
            "module": "examples.three_zone_datadriven_admm.three_zone_util",
            "obj": "get_t_aussen",
            "line": 85,
            "column": 4,
            "path": "examples/three_zone_datadriven_admm/three_zone_util.py",
            "symbol": "no-else-return",
            "message": "Unnecessary \"else\" after \"return\", remove the \"else\" and de-indent the code inside it",
            "message-id": "R1705"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.training_direct",
            "obj": "",
            "line": 152,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/training_direct.py",
            "symbol": "line-too-long",
            "message": "Line too long (116/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.training_direct",
            "obj": "",
            "line": 194,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/training_direct.py",
            "symbol": "line-too-long",
            "message": "Line too long (101/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.training_direct",
            "obj": "",
            "line": 195,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/training_direct.py",
            "symbol": "line-too-long",
            "message": "Line too long (107/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.training_direct",
            "obj": "",
            "line": 350,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/training_direct.py",
            "symbol": "line-too-long",
            "message": "Line too long (105/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.training_direct",
            "obj": "",
            "line": 351,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/training_direct.py",
            "symbol": "line-too-long",
            "message": "Line too long (111/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.training_direct",
            "obj": "",
            "line": 486,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/training_direct.py",
            "symbol": "superfluous-parens",
            "message": "Unnecessary parens after '=' keyword",
            "message-id": "C0325"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.training_direct",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/training_direct.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "fatal",
            "module": "examples.three_zone_datadriven_admm.training_direct",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/training_direct.py",
            "symbol": "astroid-error",
            "message": "examples/three_zone_datadriven_admm/training_direct.py: Fatal error while checking 'examples/three_zone_datadriven_admm/training_direct.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-28-44.txt'.",
            "message-id": "F0002"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.plotting_agent",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/plotting_agent.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "error",
            "module": "examples.three_zone_datadriven_admm.plotting_agent",
            "obj": "",
            "line": 5,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/plotting_agent.py",
            "symbol": "import-error",
            "message": "Unable to import 'matplotlib.pyplot'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "examples.three_zone_datadriven_admm.plotting_agent",
            "obj": "",
            "line": 6,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/plotting_agent.py",
            "symbol": "import-error",
            "message": "Unable to import 'pandas'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "examples.three_zone_datadriven_admm.plotting_agent",
            "obj": "",
            "line": 7,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/plotting_agent.py",
            "symbol": "import-error",
            "message": "Unable to import 'numpy'",
            "message-id": "E0401"
        },
        {
            "type": "fatal",
            "module": "examples.three_zone_datadriven_admm.plotting_agent",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/plotting_agent.py",
            "symbol": "astroid-error",
            "message": "examples/three_zone_datadriven_admm/plotting_agent.py: Fatal error while checking 'examples/three_zone_datadriven_admm/plotting_agent.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-28-44.txt'.",
            "message-id": "F0002"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.models.CCA",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/models/CCA.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.models.CCA",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/models/CCA.py",
            "symbol": "invalid-name",
            "message": "Module name \"CCA\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "warning",
            "module": "examples.three_zone_datadriven_admm.models.CCA",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/models/CCA.py",
            "symbol": "wildcard-import",
            "message": "Wildcard import agentlib_mpc.models.casadi_model",
            "message-id": "W0401"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.models.CCA",
            "obj": "TempControllerConfig",
            "line": 4,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/models/CCA.py",
            "symbol": "missing-class-docstring",
            "message": "Missing class docstring",
            "message-id": "C0115"
        },
        {
            "type": "fatal",
            "module": "examples.three_zone_datadriven_admm.models.CCA",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/models/CCA.py",
            "symbol": "astroid-error",
            "message": "examples/three_zone_datadriven_admm/models/CCA.py: Fatal error while checking 'examples/three_zone_datadriven_admm/models/CCA.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-28-44.txt'.",
            "message-id": "F0002"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.models.simulation_model",
            "obj": "",
            "line": 8,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/models/simulation_model.py",
            "symbol": "wrong-import-position",
            "message": "Import \"from agentlib_mpc.models.casadi_model import CasadiInput, CasadiState, CasadiParameter, CasadiOutput, CasadiModel, CasadiModelConfig\" should be placed at the top of the module",
            "message-id": "C0413"
        },
        {
            "type": "fatal",
            "module": "examples.three_zone_datadriven_admm.models.simulation_model",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/models/simulation_model.py",
            "symbol": "astroid-error",
            "message": "examples/three_zone_datadriven_admm/models/simulation_model.py: Fatal error while checking 'examples/three_zone_datadriven_admm/models/simulation_model.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-28-44.txt'.",
            "message-id": "F0002"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.models.Disturbances",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/models/Disturbances.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.models.Disturbances",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/models/Disturbances.py",
            "symbol": "invalid-name",
            "message": "Module name \"Disturbances\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "error",
            "module": "examples.three_zone_datadriven_admm.models.Disturbances",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/models/Disturbances.py",
            "symbol": "import-error",
            "message": "Unable to import 'agentlib'",
            "message-id": "E0401"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.models.Disturbances",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/models/Disturbances.py",
            "symbol": "wrong-import-position",
            "message": "Import \"import agentlib as al\" should be placed at the top of the module",
            "message-id": "C0413"
        },
        {
            "type": "error",
            "module": "examples.three_zone_datadriven_admm.models.Disturbances",
            "obj": "",
            "line": 2,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/models/Disturbances.py",
            "symbol": "import-error",
            "message": "Unable to import 'numpy'",
            "message-id": "E0401"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.models.Disturbances",
            "obj": "",
            "line": 2,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/models/Disturbances.py",
            "symbol": "wrong-import-position",
            "message": "Import \"import numpy as np\" should be placed at the top of the module",
            "message-id": "C0413"
        },
        {
            "type": "error",
            "module": "examples.three_zone_datadriven_admm.models.Disturbances",
            "obj": "",
            "line": 3,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/models/Disturbances.py",
            "symbol": "import-error",
            "message": "Unable to import 'pandas'",
            "message-id": "E0401"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.models.Disturbances",
            "obj": "",
            "line": 3,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/models/Disturbances.py",
            "symbol": "wrong-import-position",
            "message": "Import \"import pandas as pd\" should be placed at the top of the module",
            "message-id": "C0413"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.models.Disturbances",
            "obj": "",
            "line": 5,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/models/Disturbances.py",
            "symbol": "wrong-import-position",
            "message": "Import \"from examples.three_zone_datadriven_admm.three_zone_util import heat_load_func, get_t_aussen, weather_data, irradiation_data\" should be placed at the top of the module",
            "message-id": "C0413"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.models.Disturbances",
            "obj": "LoadSensor.do_step",
            "line": 47,
            "column": 8,
            "path": "examples/three_zone_datadriven_admm/models/Disturbances.py",
            "symbol": "invalid-name",
            "message": "Variable name \"d\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "warning",
            "module": "examples.three_zone_datadriven_admm.models.Disturbances",
            "obj": "LoadSensor.do_step",
            "line": 44,
            "column": 34,
            "path": "examples/three_zone_datadriven_admm/models/Disturbances.py",
            "symbol": "unused-argument",
            "message": "Unused argument 't_sample'",
            "message-id": "W0613"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.models.Disturbances",
            "obj": "LoadSensor.get_Temp_bounds",
            "line": 68,
            "column": 4,
            "path": "examples/three_zone_datadriven_admm/models/Disturbances.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.models.Disturbances",
            "obj": "LoadSensor.get_Temp_bounds",
            "line": 68,
            "column": 4,
            "path": "examples/three_zone_datadriven_admm/models/Disturbances.py",
            "symbol": "invalid-name",
            "message": "Method name \"get_Temp_bounds\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "refactor",
            "module": "examples.three_zone_datadriven_admm.models.Disturbances",
            "obj": "LoadSensor.get_Temp_bounds",
            "line": 71,
            "column": 8,
            "path": "examples/three_zone_datadriven_admm/models/Disturbances.py",
            "symbol": "no-else-return",
            "message": "Unnecessary \"else\" after \"return\", remove the \"else\" and de-indent the code inside it",
            "message-id": "R1705"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.models.Disturbances",
            "obj": "LoadSensor.initialize",
            "line": 76,
            "column": 4,
            "path": "examples/three_zone_datadriven_admm/models/Disturbances.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.models.Disturbances",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/models/Disturbances.py",
            "symbol": "wrong-import-order",
            "message": "third party import \"import agentlib as al\" should be placed before \"from agentlib_mpc.models.casadi_model import *\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.models.Disturbances",
            "obj": "",
            "line": 2,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/models/Disturbances.py",
            "symbol": "wrong-import-order",
            "message": "third party import \"import numpy as np\" should be placed before \"from agentlib_mpc.models.casadi_model import *\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.models.Disturbances",
            "obj": "",
            "line": 3,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/models/Disturbances.py",
            "symbol": "wrong-import-order",
            "message": "third party import \"import pandas as pd\" should be placed before \"from agentlib_mpc.models.casadi_model import *\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.models.Disturbances",
            "obj": "",
            "line": 2,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/models/Disturbances.py",
            "symbol": "ungrouped-imports",
            "message": "Imports from package numpy are not grouped",
            "message-id": "C0412"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.models.Disturbances",
            "obj": "",
            "line": 3,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/models/Disturbances.py",
            "symbol": "ungrouped-imports",
            "message": "Imports from package pandas are not grouped",
            "message-id": "C0412"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.models.AHU",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/models/AHU.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.models.AHU",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/models/AHU.py",
            "symbol": "invalid-name",
            "message": "Module name \"AHU\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "warning",
            "module": "examples.three_zone_datadriven_admm.models.AHU",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/models/AHU.py",
            "symbol": "wildcard-import",
            "message": "Wildcard import agentlib_mpc.models.casadi_model",
            "message-id": "W0401"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.models.AHU",
            "obj": "AHUConfig",
            "line": 4,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/models/AHU.py",
            "symbol": "missing-class-docstring",
            "message": "Missing class docstring",
            "message-id": "C0115"
        },
        {
            "type": "fatal",
            "module": "examples.three_zone_datadriven_admm.models.AHU",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/models/AHU.py",
            "symbol": "astroid-error",
            "message": "examples/three_zone_datadriven_admm/models/AHU.py: Fatal error while checking 'examples/three_zone_datadriven_admm/models/AHU.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-28-44.txt'.",
            "message-id": "F0002"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.models.Room_model",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/models/Room_model.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.models.Room_model",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/models/Room_model.py",
            "symbol": "invalid-name",
            "message": "Module name \"Room_model\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "fatal",
            "module": "examples.three_zone_datadriven_admm.models.Room_model",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/models/Room_model.py",
            "symbol": "astroid-error",
            "message": "examples/three_zone_datadriven_admm/models/Room_model.py: Fatal error while checking 'examples/three_zone_datadriven_admm/models/Room_model.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-28-44.txt'.",
            "message-id": "F0002"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.custom_modules.predictor",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/custom_modules/predictor.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "error",
            "module": "examples.three_zone_datadriven_admm.custom_modules.predictor",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/custom_modules/predictor.py",
            "symbol": "import-error",
            "message": "Unable to import 'agentlib'",
            "message-id": "E0401"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.custom_modules.predictor",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/custom_modules/predictor.py",
            "symbol": "wrong-import-position",
            "message": "Import \"import agentlib as al\" should be placed at the top of the module",
            "message-id": "C0413"
        },
        {
            "type": "error",
            "module": "examples.three_zone_datadriven_admm.custom_modules.predictor",
            "obj": "",
            "line": 2,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/custom_modules/predictor.py",
            "symbol": "import-error",
            "message": "Unable to import 'numpy'",
            "message-id": "E0401"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.custom_modules.predictor",
            "obj": "",
            "line": 2,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/custom_modules/predictor.py",
            "symbol": "wrong-import-position",
            "message": "Import \"import numpy as np\" should be placed at the top of the module",
            "message-id": "C0413"
        },
        {
            "type": "error",
            "module": "examples.three_zone_datadriven_admm.custom_modules.predictor",
            "obj": "",
            "line": 3,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/custom_modules/predictor.py",
            "symbol": "import-error",
            "message": "Unable to import 'pandas'",
            "message-id": "E0401"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.custom_modules.predictor",
            "obj": "",
            "line": 3,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/custom_modules/predictor.py",
            "symbol": "wrong-import-position",
            "message": "Import \"import pandas as pd\" should be placed at the top of the module",
            "message-id": "C0413"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.custom_modules.predictor",
            "obj": "",
            "line": 5,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/custom_modules/predictor.py",
            "symbol": "wrong-import-position",
            "message": "Import \"from examples.three_zone_datadriven_admm.three_zone_util import load_weather, heat_load_func, get_t_aussen, irradiation_data\" should be placed at the top of the module",
            "message-id": "C0413"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.custom_modules.predictor",
            "obj": "PredictorModule.register_callbacks",
            "line": 126,
            "column": 4,
            "path": "examples/three_zone_datadriven_admm/custom_modules/predictor.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.custom_modules.predictor",
            "obj": "PredictorModule.process",
            "line": 133,
            "column": 12,
            "path": "examples/three_zone_datadriven_admm/custom_modules/predictor.py",
            "symbol": "invalid-name",
            "message": "Variable name \"ts\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.custom_modules.predictor",
            "obj": "PredictorModule.process",
            "line": 134,
            "column": 12,
            "path": "examples/three_zone_datadriven_admm/custom_modules/predictor.py",
            "symbol": "invalid-name",
            "message": "Variable name \"n\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "refactor",
            "module": "examples.three_zone_datadriven_admm.custom_modules.predictor",
            "obj": "PredictorModule.send_comfort_trajectories",
            "line": 162,
            "column": 4,
            "path": "examples/three_zone_datadriven_admm/custom_modules/predictor.py",
            "symbol": "too-many-locals",
            "message": "Too many local variables (20/15)",
            "message-id": "R0914"
        },
        {
            "type": "warning",
            "module": "examples.three_zone_datadriven_admm.custom_modules.predictor",
            "obj": "PredictorModule.send_comfort_trajectories",
            "line": 168,
            "column": 16,
            "path": "examples/three_zone_datadriven_admm/custom_modules/predictor.py",
            "symbol": "attribute-defined-outside-init",
            "message": "Attribute 'boundary_low' defined outside __init__",
            "message-id": "W0201"
        },
        {
            "type": "warning",
            "module": "examples.three_zone_datadriven_admm.custom_modules.predictor",
            "obj": "PredictorModule.send_comfort_trajectories",
            "line": 212,
            "column": 12,
            "path": "examples/three_zone_datadriven_admm/custom_modules/predictor.py",
            "symbol": "attribute-defined-outside-init",
            "message": "Attribute 'boundary_low' defined outside __init__",
            "message-id": "W0201"
        },
        {
            "type": "warning",
            "module": "examples.three_zone_datadriven_admm.custom_modules.predictor",
            "obj": "PredictorModule.send_comfort_trajectories",
            "line": 169,
            "column": 16,
            "path": "examples/three_zone_datadriven_admm/custom_modules/predictor.py",
            "symbol": "attribute-defined-outside-init",
            "message": "Attribute 'boundary_high' defined outside __init__",
            "message-id": "W0201"
        },
        {
            "type": "warning",
            "module": "examples.three_zone_datadriven_admm.custom_modules.predictor",
            "obj": "PredictorModule.send_comfort_trajectories",
            "line": 211,
            "column": 12,
            "path": "examples/three_zone_datadriven_admm/custom_modules/predictor.py",
            "symbol": "attribute-defined-outside-init",
            "message": "Attribute 'boundary_high' defined outside __init__",
            "message-id": "W0201"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.custom_modules.predictor",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/custom_modules/predictor.py",
            "symbol": "wrong-import-order",
            "message": "third party import \"import agentlib as al\" should be placed before \"from agentlib_mpc.models.casadi_model import *\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.custom_modules.predictor",
            "obj": "",
            "line": 2,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/custom_modules/predictor.py",
            "symbol": "wrong-import-order",
            "message": "third party import \"import numpy as np\" should be placed before \"from agentlib_mpc.models.casadi_model import *\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "examples.three_zone_datadriven_admm.custom_modules.predictor",
            "obj": "",
            "line": 3,
            "column": 0,
            "path": "examples/three_zone_datadriven_admm/custom_modules/predictor.py",
            "symbol": "wrong-import-order",
            "message": "third party import \"import pandas as pd\" should be placed before \"from agentlib_mpc.models.casadi_model import *\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.models.casadi_predictor",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/models/casadi_predictor.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "error",
            "module": "agentlib_mpc.models.casadi_predictor",
            "obj": "",
            "line": 3,
            "column": 0,
            "path": "agentlib_mpc/models/casadi_predictor.py",
            "symbol": "import-error",
            "message": "Unable to import 'casadi'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "agentlib_mpc.models.casadi_predictor",
            "obj": "",
            "line": 4,
            "column": 0,
            "path": "agentlib_mpc/models/casadi_predictor.py",
            "symbol": "import-error",
            "message": "Unable to import 'numpy'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "agentlib_mpc.models.casadi_predictor",
            "obj": "",
            "line": 7,
            "column": 0,
            "path": "agentlib_mpc/models/casadi_predictor.py",
            "symbol": "import-error",
            "message": "Unable to import 'keras'",
            "message-id": "E0401"
        },
        {
            "type": "fatal",
            "module": "agentlib_mpc.models.casadi_predictor",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/models/casadi_predictor.py",
            "symbol": "astroid-error",
            "message": "agentlib_mpc/models/casadi_predictor.py: Fatal error while checking 'agentlib_mpc/models/casadi_predictor.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-28-44.txt'.",
            "message-id": "F0002"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.models.serialized_ml_model",
            "obj": "",
            "line": 60,
            "column": 0,
            "path": "agentlib_mpc/models/serialized_ml_model.py",
            "symbol": "line-too-long",
            "message": "Line too long (101/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.models.serialized_ml_model",
            "obj": "",
            "line": 115,
            "column": 0,
            "path": "agentlib_mpc/models/serialized_ml_model.py",
            "symbol": "line-too-long",
            "message": "Line too long (112/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.models.serialized_ml_model",
            "obj": "",
            "line": 130,
            "column": 0,
            "path": "agentlib_mpc/models/serialized_ml_model.py",
            "symbol": "line-too-long",
            "message": "Line too long (114/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.models.serialized_ml_model",
            "obj": "",
            "line": 144,
            "column": 0,
            "path": "agentlib_mpc/models/serialized_ml_model.py",
            "symbol": "line-too-long",
            "message": "Line too long (107/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.models.serialized_ml_model",
            "obj": "",
            "line": 251,
            "column": 0,
            "path": "agentlib_mpc/models/serialized_ml_model.py",
            "symbol": "line-too-long",
            "message": "Line too long (111/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.models.serialized_ml_model",
            "obj": "",
            "line": 256,
            "column": 0,
            "path": "agentlib_mpc/models/serialized_ml_model.py",
            "symbol": "line-too-long",
            "message": "Line too long (102/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.models.serialized_ml_model",
            "obj": "",
            "line": 261,
            "column": 0,
            "path": "agentlib_mpc/models/serialized_ml_model.py",
            "symbol": "line-too-long",
            "message": "Line too long (109/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.models.serialized_ml_model",
            "obj": "",
            "line": 317,
            "column": 0,
            "path": "agentlib_mpc/models/serialized_ml_model.py",
            "symbol": "line-too-long",
            "message": "Line too long (101/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.models.serialized_ml_model",
            "obj": "",
            "line": 421,
            "column": 0,
            "path": "agentlib_mpc/models/serialized_ml_model.py",
            "symbol": "line-too-long",
            "message": "Line too long (101/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.models.serialized_ml_model",
            "obj": "",
            "line": 555,
            "column": 0,
            "path": "agentlib_mpc/models/serialized_ml_model.py",
            "symbol": "line-too-long",
            "message": "Line too long (264/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.models.serialized_ml_model",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/models/serialized_ml_model.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "error",
            "module": "agentlib_mpc.models.serialized_ml_model",
            "obj": "",
            "line": 6,
            "column": 0,
            "path": "agentlib_mpc/models/serialized_ml_model.py",
            "symbol": "import-error",
            "message": "Unable to import 'numpy'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "agentlib_mpc.models.serialized_ml_model",
            "obj": "",
            "line": 10,
            "column": 0,
            "path": "agentlib_mpc/models/serialized_ml_model.py",
            "symbol": "import-error",
            "message": "Unable to import 'keras'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "agentlib_mpc.models.serialized_ml_model",
            "obj": "",
            "line": 12,
            "column": 0,
            "path": "agentlib_mpc/models/serialized_ml_model.py",
            "symbol": "import-error",
            "message": "Unable to import 'pydantic'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "agentlib_mpc.models.serialized_ml_model",
            "obj": "",
            "line": 13,
            "column": 0,
            "path": "agentlib_mpc/models/serialized_ml_model.py",
            "symbol": "import-error",
            "message": "Unable to import 'sklearn.gaussian_process'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "agentlib_mpc.models.serialized_ml_model",
            "obj": "",
            "line": 14,
            "column": 0,
            "path": "agentlib_mpc/models/serialized_ml_model.py",
            "symbol": "import-error",
            "message": "Unable to import 'sklearn.gaussian_process.kernels'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "agentlib_mpc.models.serialized_ml_model",
            "obj": "",
            "line": 15,
            "column": 0,
            "path": "agentlib_mpc/models/serialized_ml_model.py",
            "symbol": "import-error",
            "message": "Unable to import 'sklearn.linear_model'",
            "message-id": "E0401"
        },
        {
            "type": "fatal",
            "module": "agentlib_mpc.models.serialized_ml_model",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/models/serialized_ml_model.py",
            "symbol": "astroid-error",
            "message": "agentlib_mpc/models/serialized_ml_model.py: Fatal error while checking 'agentlib_mpc/models/serialized_ml_model.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-28-45.txt'.",
            "message-id": "F0002"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.models.casadi_ml_model",
            "obj": "",
            "line": 453,
            "column": 0,
            "path": "agentlib_mpc/models/casadi_ml_model.py",
            "symbol": "line-too-long",
            "message": "Line too long (131/100)",
            "message-id": "C0301"
        },
        {
            "type": "fatal",
            "module": "agentlib_mpc.models.casadi_ml_model",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/models/casadi_ml_model.py",
            "symbol": "astroid-error",
            "message": "agentlib_mpc/models/casadi_ml_model.py: Fatal error while checking 'agentlib_mpc/models/casadi_ml_model.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-28-45.txt'.",
            "message-id": "F0002"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.models.casadi_model",
            "obj": "",
            "line": 301,
            "column": 0,
            "path": "agentlib_mpc/models/casadi_model.py",
            "symbol": "line-too-long",
            "message": "Line too long (110/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.models.casadi_model",
            "obj": "",
            "line": 529,
            "column": 0,
            "path": "agentlib_mpc/models/casadi_model.py",
            "symbol": "line-too-long",
            "message": "Line too long (101/100)",
            "message-id": "C0301"
        },
        {
            "type": "fatal",
            "module": "agentlib_mpc.models.casadi_model",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/models/casadi_model.py",
            "symbol": "astroid-error",
            "message": "agentlib_mpc/models/casadi_model.py: Fatal error while checking 'agentlib_mpc/models/casadi_model.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-28-45.txt'.",
            "message-id": "F0002"
        },
        {
            "type": "error",
            "module": "agentlib_mpc.models",
            "obj": "",
            "line": 5,
            "column": 0,
            "path": "agentlib_mpc/models/__init__.py",
            "symbol": "import-error",
            "message": "Unable to import 'agentlib.utils.plugin_import'",
            "message-id": "E0401"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.models.casadi_predictor",
            "obj": "",
            "line": 6,
            "column": 0,
            "path": "agentlib_mpc/models/casadi_predictor.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"from enum import Enum\" should be placed before \"import casadi as ca\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.models.serialized_ml_model",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/models/serialized_ml_model.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"import abc\" should be placed before \"import casadi as ca\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.models.serialized_ml_model",
            "obj": "",
            "line": 2,
            "column": 0,
            "path": "agentlib_mpc/models/serialized_ml_model.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"import json\" should be placed before \"import casadi as ca\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.models.serialized_ml_model",
            "obj": "",
            "line": 3,
            "column": 0,
            "path": "agentlib_mpc/models/serialized_ml_model.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"import logging\" should be placed before \"import casadi as ca\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.models.serialized_ml_model",
            "obj": "",
            "line": 4,
            "column": 0,
            "path": "agentlib_mpc/models/serialized_ml_model.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"import subprocess\" should be placed before \"import casadi as ca\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.models.serialized_ml_model",
            "obj": "",
            "line": 8,
            "column": 0,
            "path": "agentlib_mpc/models/serialized_ml_model.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"from enum import Enum\" should be placed before \"import casadi as ca\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.models.serialized_ml_model",
            "obj": "",
            "line": 9,
            "column": 0,
            "path": "agentlib_mpc/models/serialized_ml_model.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"from copy import deepcopy\" should be placed before \"import casadi as ca\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.models.serialized_ml_model",
            "obj": "",
            "line": 11,
            "column": 0,
            "path": "agentlib_mpc/models/serialized_ml_model.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"from pathlib import Path\" should be placed before \"import casadi as ca\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.models.casadi_ml_model",
            "obj": "",
            "line": 3,
            "column": 0,
            "path": "agentlib_mpc/models/casadi_ml_model.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"import itertools\" should be placed before \"import casadi as ca\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.models.casadi_ml_model",
            "obj": "",
            "line": 4,
            "column": 0,
            "path": "agentlib_mpc/models/casadi_ml_model.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"import logging\" should be placed before \"import casadi as ca\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.models.casadi_ml_model",
            "obj": "",
            "line": 5,
            "column": 0,
            "path": "agentlib_mpc/models/casadi_ml_model.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"from itertools import chain\" should be placed before \"import casadi as ca\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.models.casadi_ml_model",
            "obj": "",
            "line": 6,
            "column": 0,
            "path": "agentlib_mpc/models/casadi_ml_model.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"from pathlib import Path\" should be placed before \"import casadi as ca\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.models.casadi_model",
            "obj": "",
            "line": 3,
            "column": 0,
            "path": "agentlib_mpc/models/casadi_model.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"import json\" should be placed before \"import casadi as ca\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.models.casadi_model",
            "obj": "",
            "line": 4,
            "column": 0,
            "path": "agentlib_mpc/models/casadi_model.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"import logging\" should be placed before \"import casadi as ca\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.models.casadi_model",
            "obj": "",
            "line": 5,
            "column": 0,
            "path": "agentlib_mpc/models/casadi_model.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"import abc\" should be placed before \"import casadi as ca\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.models.casadi_model",
            "obj": "",
            "line": 6,
            "column": 0,
            "path": "agentlib_mpc/models/casadi_model.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"from itertools import chain\" should be placed before \"import casadi as ca\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.models.serialized_ml_model",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/models/serialized_ml_model.py",
            "symbol": "ungrouped-imports",
            "message": "Imports from package abc are not grouped",
            "message-id": "C0412"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.models.serialized_ml_model",
            "obj": "",
            "line": 8,
            "column": 0,
            "path": "agentlib_mpc/models/serialized_ml_model.py",
            "symbol": "ungrouped-imports",
            "message": "Imports from package enum are not grouped",
            "message-id": "C0412"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.models.casadi_ml_model",
            "obj": "",
            "line": 4,
            "column": 0,
            "path": "agentlib_mpc/models/casadi_ml_model.py",
            "symbol": "ungrouped-imports",
            "message": "Imports from package logging are not grouped",
            "message-id": "C0412"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.models.casadi_ml_model",
            "obj": "",
            "line": 6,
            "column": 0,
            "path": "agentlib_mpc/models/casadi_ml_model.py",
            "symbol": "ungrouped-imports",
            "message": "Imports from package pathlib are not grouped",
            "message-id": "C0412"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.models.casadi_model",
            "obj": "",
            "line": 3,
            "column": 0,
            "path": "agentlib_mpc/models/casadi_model.py",
            "symbol": "ungrouped-imports",
            "message": "Imports from package json are not grouped",
            "message-id": "C0412"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.models.casadi_model",
            "obj": "",
            "line": 4,
            "column": 0,
            "path": "agentlib_mpc/models/casadi_model.py",
            "symbol": "ungrouped-imports",
            "message": "Imports from package logging are not grouped",
            "message-id": "C0412"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.models.casadi_model",
            "obj": "",
            "line": 5,
            "column": 0,
            "path": "agentlib_mpc/models/casadi_model.py",
            "symbol": "ungrouped-imports",
            "message": "Imports from package abc are not grouped",
            "message-id": "C0412"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.models.casadi_model",
            "obj": "",
            "line": 6,
            "column": 0,
            "path": "agentlib_mpc/models/casadi_model.py",
            "symbol": "ungrouped-imports",
            "message": "Imports from package itertools are not grouped",
            "message-id": "C0412"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.models.serialized_ml_model",
            "obj": "",
            "line": 6,
            "column": 0,
            "path": "agentlib_mpc/models/serialized_ml_model.py",
            "symbol": "ungrouped-imports",
            "message": "Imports from package numpy are not grouped",
            "message-id": "C0412"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.models.serialized_ml_model",
            "obj": "",
            "line": 10,
            "column": 0,
            "path": "agentlib_mpc/models/serialized_ml_model.py",
            "symbol": "ungrouped-imports",
            "message": "Imports from package keras are not grouped",
            "message-id": "C0412"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.utils.sampling",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/utils/sampling.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "fatal",
            "module": "agentlib_mpc.utils.sampling",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/utils/sampling.py",
            "symbol": "astroid-error",
            "message": "agentlib_mpc/utils/sampling.py: Fatal error while checking 'agentlib_mpc/utils/sampling.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-28-45.txt'.",
            "message-id": "F0002"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.utils.analysis",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/utils/analysis.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "fatal",
            "module": "agentlib_mpc.utils.analysis",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/utils/analysis.py",
            "symbol": "astroid-error",
            "message": "agentlib_mpc/utils/analysis.py: Fatal error while checking 'agentlib_mpc/utils/analysis.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-28-46.txt'.",
            "message-id": "F0002"
        },
        {
            "type": "fatal",
            "module": "agentlib_mpc.utils.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/utils/__init__.py",
            "symbol": "astroid-error",
            "message": "agentlib_mpc/utils/__init__.py: Fatal error while checking 'agentlib_mpc/utils/__init__.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-28-46.txt'.",
            "message-id": "F0002"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.utils.plotting.interactive",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/utils/plotting/interactive.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "error",
            "module": "agentlib_mpc.utils.plotting.interactive",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/utils/plotting/interactive.py",
            "symbol": "import-error",
            "message": "Unable to import 'pandas'",
            "message-id": "E0401"
        },
        {
            "type": "fatal",
            "module": "agentlib_mpc.utils.plotting.interactive",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/utils/plotting/interactive.py",
            "symbol": "astroid-error",
            "message": "agentlib_mpc/utils/plotting/interactive.py: Fatal error while checking 'agentlib_mpc/utils/plotting/interactive.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-28-46.txt'.",
            "message-id": "F0002"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.utils.plotting.admm_consensus_shades",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/utils/plotting/admm_consensus_shades.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "error",
            "module": "agentlib_mpc.utils.plotting.admm_consensus_shades",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/utils/plotting/admm_consensus_shades.py",
            "symbol": "import-error",
            "message": "Unable to import 'pandas'",
            "message-id": "E0401"
        },
        {
            "type": "refactor",
            "module": "agentlib_mpc.utils.plotting.admm_consensus_shades",
            "obj": "plot_consensus_shades",
            "line": 9,
            "column": 0,
            "path": "agentlib_mpc/utils/plotting/admm_consensus_shades.py",
            "symbol": "too-many-locals",
            "message": "Too many local variables (17/15)",
            "message-id": "R0914"
        },
        {
            "type": "error",
            "module": "agentlib_mpc.utils.plotting.admm_consensus_shades",
            "obj": "plot_consensus_shades",
            "line": 52,
            "column": 43,
            "path": "agentlib_mpc/utils/plotting/admm_consensus_shades.py",
            "symbol": "undefined-variable",
            "message": "Undefined variable 'series'",
            "message-id": "E0602"
        },
        {
            "type": "warning",
            "module": "agentlib_mpc.utils.plotting.admm_consensus_shades",
            "obj": "plot_consensus_shades",
            "line": 12,
            "column": 4,
            "path": "agentlib_mpc/utils/plotting/admm_consensus_shades.py",
            "symbol": "unused-argument",
            "message": "Unused argument 'time_step'",
            "message-id": "W0613"
        },
        {
            "type": "warning",
            "module": "agentlib_mpc.utils.plotting.admm_consensus_shades",
            "obj": "plot_consensus_shades.mean",
            "line": 28,
            "column": 4,
            "path": "agentlib_mpc/utils/plotting/admm_consensus_shades.py",
            "symbol": "unused-variable",
            "message": "Unused variable 'mean'",
            "message-id": "W0612"
        },
        {
            "type": "warning",
            "module": "agentlib_mpc.utils.plotting.admm_consensus_shades",
            "obj": "plot_consensus_shades.local",
            "line": 31,
            "column": 4,
            "path": "agentlib_mpc/utils/plotting/admm_consensus_shades.py",
            "symbol": "unused-variable",
            "message": "Unused variable 'local'",
            "message-id": "W0612"
        },
        {
            "type": "warning",
            "module": "agentlib_mpc.utils.plotting.admm_consensus_shades",
            "obj": "plot_consensus_shades.lmbda",
            "line": 34,
            "column": 4,
            "path": "agentlib_mpc/utils/plotting/admm_consensus_shades.py",
            "symbol": "unused-variable",
            "message": "Unused variable 'lmbda'",
            "message-id": "W0612"
        },
        {
            "type": "warning",
            "module": "agentlib_mpc.utils.plotting.admm_consensus_shades",
            "obj": "plot_consensus_shades",
            "line": 41,
            "column": 4,
            "path": "agentlib_mpc/utils/plotting/admm_consensus_shades.py",
            "symbol": "unused-variable",
            "message": "Unused variable 'a_trajectory'",
            "message-id": "W0612"
        },
        {
            "type": "warning",
            "module": "agentlib_mpc.utils.plotting.admm_consensus_shades",
            "obj": "plot_consensus_shades",
            "line": 42,
            "column": 4,
            "path": "agentlib_mpc/utils/plotting/admm_consensus_shades.py",
            "symbol": "unused-variable",
            "message": "Unused variable 'number_of_iterations'",
            "message-id": "W0612"
        },
        {
            "type": "warning",
            "module": "agentlib_mpc.utils.plotting.admm_consensus_shades",
            "obj": "plot_consensus_shades",
            "line": 57,
            "column": 8,
            "path": "agentlib_mpc/utils/plotting/admm_consensus_shades.py",
            "symbol": "unused-variable",
            "message": "Unused variable 'prediction_color'",
            "message-id": "W0612"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.utils.plotting.mpc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/utils/plotting/mpc.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "fatal",
            "module": "agentlib_mpc.utils.plotting.mpc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/utils/plotting/mpc.py",
            "symbol": "astroid-error",
            "message": "agentlib_mpc/utils/plotting/mpc.py: Fatal error while checking 'agentlib_mpc/utils/plotting/mpc.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-28-46.txt'.",
            "message-id": "F0002"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.utils.plotting.discretization_structure",
            "obj": "",
            "line": 57,
            "column": 0,
            "path": "agentlib_mpc/utils/plotting/discretization_structure.py",
            "symbol": "line-too-long",
            "message": "Line too long (102/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.utils.plotting.discretization_structure",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/utils/plotting/discretization_structure.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "error",
            "module": "agentlib_mpc.utils.plotting.discretization_structure",
            "obj": "",
            "line": 3,
            "column": 0,
            "path": "agentlib_mpc/utils/plotting/discretization_structure.py",
            "symbol": "import-error",
            "message": "Unable to import 'matplotlib.pyplot'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "agentlib_mpc.utils.plotting.discretization_structure",
            "obj": "",
            "line": 4,
            "column": 0,
            "path": "agentlib_mpc/utils/plotting/discretization_structure.py",
            "symbol": "import-error",
            "message": "Unable to import 'pandas'",
            "message-id": "E0401"
        },
        {
            "type": "fatal",
            "module": "agentlib_mpc.utils.plotting.discretization_structure",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/utils/plotting/discretization_structure.py",
            "symbol": "astroid-error",
            "message": "agentlib_mpc/utils/plotting/discretization_structure.py: Fatal error while checking 'agentlib_mpc/utils/plotting/discretization_structure.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-28-46.txt'.",
            "message-id": "F0002"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.utils.plotting.ml_model_test",
            "obj": "",
            "line": 127,
            "column": 0,
            "path": "agentlib_mpc/utils/plotting/ml_model_test.py",
            "symbol": "line-too-long",
            "message": "Line too long (103/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.utils.plotting.ml_model_test",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/utils/plotting/ml_model_test.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "fatal",
            "module": "agentlib_mpc.utils.plotting.ml_model_test",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/utils/plotting/ml_model_test.py",
            "symbol": "astroid-error",
            "message": "agentlib_mpc/utils/plotting/ml_model_test.py: Fatal error while checking 'agentlib_mpc/utils/plotting/ml_model_test.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-28-47.txt'.",
            "message-id": "F0002"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.utils.plotting.admm_dashboard",
            "obj": "",
            "line": 110,
            "column": 0,
            "path": "agentlib_mpc/utils/plotting/admm_dashboard.py",
            "symbol": "line-too-long",
            "message": "Line too long (105/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.utils.plotting.admm_dashboard",
            "obj": "",
            "line": 122,
            "column": 0,
            "path": "agentlib_mpc/utils/plotting/admm_dashboard.py",
            "symbol": "line-too-long",
            "message": "Line too long (102/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.utils.plotting.admm_dashboard",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/utils/plotting/admm_dashboard.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "fatal",
            "module": "agentlib_mpc.utils.plotting.admm_dashboard",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/utils/plotting/admm_dashboard.py",
            "symbol": "astroid-error",
            "message": "agentlib_mpc/utils/plotting/admm_dashboard.py: Fatal error while checking 'agentlib_mpc/utils/plotting/admm_dashboard.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-28-47.txt'.",
            "message-id": "F0002"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.utils.plotting.admm_residuals",
            "obj": "",
            "line": 144,
            "column": 0,
            "path": "agentlib_mpc/utils/plotting/admm_residuals.py",
            "symbol": "line-too-long",
            "message": "Line too long (109/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.utils.plotting.admm_residuals",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/utils/plotting/admm_residuals.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "fatal",
            "module": "agentlib_mpc.utils.plotting.admm_residuals",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/utils/plotting/admm_residuals.py",
            "symbol": "astroid-error",
            "message": "agentlib_mpc/utils/plotting/admm_residuals.py: Fatal error while checking 'agentlib_mpc/utils/plotting/admm_residuals.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-28-47.txt'.",
            "message-id": "F0002"
        },
        {
            "type": "fatal",
            "module": "agentlib_mpc.utils.plotting.admm_animation",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/utils/plotting/admm_animation.py",
            "symbol": "astroid-error",
            "message": "agentlib_mpc/utils/plotting/admm_animation.py: Fatal error while checking 'agentlib_mpc/utils/plotting/admm_animation.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-28-47.txt'.",
            "message-id": "F0002"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.utils.plotting.ml_model_test",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/utils/plotting/ml_model_test.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"from pathlib import Path\" should be placed before \"import matplotlib.pyplot as plt\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.utils.plotting.admm_dashboard",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/utils/plotting/admm_dashboard.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"import os\" should be placed before \"import matplotlib.pyplot as plt\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.utils.plotting.admm_dashboard",
            "obj": "",
            "line": 2,
            "column": 0,
            "path": "agentlib_mpc/utils/plotting/admm_dashboard.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"import webbrowser\" should be placed before \"import matplotlib.pyplot as plt\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.utils.plotting.admm_dashboard",
            "obj": "",
            "line": 3,
            "column": 0,
            "path": "agentlib_mpc/utils/plotting/admm_dashboard.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"from pathlib import Path\" should be placed before \"import matplotlib.pyplot as plt\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.utils.plotting.admm_residuals",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/utils/plotting/admm_residuals.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"from ast import literal_eval\" should be placed before \"import matplotlib.pyplot as plt\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.utils.plotting.admm_residuals",
            "obj": "",
            "line": 2,
            "column": 0,
            "path": "agentlib_mpc/utils/plotting/admm_residuals.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"from pathlib import Path\" should be placed before \"import matplotlib.pyplot as plt\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.utils.plotting.admm_animation",
            "obj": "",
            "line": 4,
            "column": 0,
            "path": "agentlib_mpc/utils/plotting/admm_animation.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"import functools\" should be placed before \"import matplotlib.pyplot as plt\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.utils.plotting.admm_animation",
            "obj": "",
            "line": 5,
            "column": 0,
            "path": "agentlib_mpc/utils/plotting/admm_animation.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"from pathlib import Path\" should be placed before \"import matplotlib.pyplot as plt\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.utils.plotting.admm_dashboard",
            "obj": "",
            "line": 3,
            "column": 0,
            "path": "agentlib_mpc/utils/plotting/admm_dashboard.py",
            "symbol": "ungrouped-imports",
            "message": "Imports from package pathlib are not grouped",
            "message-id": "C0412"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.utils.plotting.admm_residuals",
            "obj": "",
            "line": 2,
            "column": 0,
            "path": "agentlib_mpc/utils/plotting/admm_residuals.py",
            "symbol": "ungrouped-imports",
            "message": "Imports from package pathlib are not grouped",
            "message-id": "C0412"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.utils.plotting.admm_animation",
            "obj": "",
            "line": 5,
            "column": 0,
            "path": "agentlib_mpc/utils/plotting/admm_animation.py",
            "symbol": "ungrouped-imports",
            "message": "Imports from package pathlib are not grouped",
            "message-id": "C0412"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.data_structures.ml_model_datatypes",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/data_structures/ml_model_datatypes.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "fatal",
            "module": "agentlib_mpc.data_structures.ml_model_datatypes",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/data_structures/ml_model_datatypes.py",
            "symbol": "astroid-error",
            "message": "agentlib_mpc/data_structures/ml_model_datatypes.py: Fatal error while checking 'agentlib_mpc/data_structures/ml_model_datatypes.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-28-47.txt'.",
            "message-id": "F0002"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.data_structures.interpolation",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/data_structures/interpolation.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.data_structures.interpolation",
            "obj": "",
            "line": 3,
            "column": 0,
            "path": "agentlib_mpc/data_structures/interpolation.py",
            "symbol": "invalid-name",
            "message": "Constant name \"a\" doesn't conform to UPPER_CASE naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.data_structures.interpolation",
            "obj": "InterpolationMethods",
            "line": 6,
            "column": 0,
            "path": "agentlib_mpc/data_structures/interpolation.py",
            "symbol": "missing-class-docstring",
            "message": "Missing class docstring",
            "message-id": "C0115"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.data_structures.interpolation",
            "obj": "InterpolationMethods",
            "line": 7,
            "column": 4,
            "path": "agentlib_mpc/data_structures/interpolation.py",
            "symbol": "invalid-name",
            "message": "Class constant name \"linear\" doesn't conform to UPPER_CASE naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.data_structures.interpolation",
            "obj": "InterpolationMethods",
            "line": 8,
            "column": 4,
            "path": "agentlib_mpc/data_structures/interpolation.py",
            "symbol": "invalid-name",
            "message": "Class constant name \"previous\" doesn't conform to UPPER_CASE naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.data_structures.interpolation",
            "obj": "InterpolationMethods",
            "line": 9,
            "column": 4,
            "path": "agentlib_mpc/data_structures/interpolation.py",
            "symbol": "invalid-name",
            "message": "Class constant name \"no_interpolation\" doesn't conform to UPPER_CASE naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.data_structures.interpolation",
            "obj": "InterpolationMethods",
            "line": 10,
            "column": 4,
            "path": "agentlib_mpc/data_structures/interpolation.py",
            "symbol": "invalid-name",
            "message": "Class constant name \"spline3\" doesn't conform to UPPER_CASE naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.data_structures.interpolation",
            "obj": "InterpolationMethods",
            "line": 24,
            "column": 4,
            "path": "agentlib_mpc/data_structures/interpolation.py",
            "symbol": "invalid-name",
            "message": "Class constant name \"mean_over_interval\" doesn't conform to UPPER_CASE naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.data_structures.interpolation",
            "obj": "",
            "line": 27,
            "column": 0,
            "path": "agentlib_mpc/data_structures/interpolation.py",
            "symbol": "invalid-name",
            "message": "Constant name \"c\" doesn't conform to UPPER_CASE naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.data_structures.coordinator_datatypes",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/data_structures/coordinator_datatypes.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "error",
            "module": "agentlib_mpc.data_structures.coordinator_datatypes",
            "obj": "",
            "line": 5,
            "column": 0,
            "path": "agentlib_mpc/data_structures/coordinator_datatypes.py",
            "symbol": "import-error",
            "message": "Unable to import 'numpy'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "agentlib_mpc.data_structures.coordinator_datatypes",
            "obj": "",
            "line": 7,
            "column": 0,
            "path": "agentlib_mpc/data_structures/coordinator_datatypes.py",
            "symbol": "import-error",
            "message": "Unable to import 'agentlib.core'",
            "message-id": "E0401"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.data_structures.coordinator_datatypes",
            "obj": "CoordinatorStatus",
            "line": 29,
            "column": 4,
            "path": "agentlib_mpc/data_structures/coordinator_datatypes.py",
            "symbol": "invalid-name",
            "message": "Class constant name \"sleeping\" doesn't conform to UPPER_CASE naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.data_structures.coordinator_datatypes",
            "obj": "CoordinatorStatus",
            "line": 30,
            "column": 4,
            "path": "agentlib_mpc/data_structures/coordinator_datatypes.py",
            "symbol": "invalid-name",
            "message": "Class constant name \"init_iterations\" doesn't conform to UPPER_CASE naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.data_structures.coordinator_datatypes",
            "obj": "CoordinatorStatus",
            "line": 31,
            "column": 4,
            "path": "agentlib_mpc/data_structures/coordinator_datatypes.py",
            "symbol": "invalid-name",
            "message": "Class constant name \"optimization\" doesn't conform to UPPER_CASE naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.data_structures.coordinator_datatypes",
            "obj": "CoordinatorStatus",
            "line": 32,
            "column": 4,
            "path": "agentlib_mpc/data_structures/coordinator_datatypes.py",
            "symbol": "invalid-name",
            "message": "Class constant name \"updating\" doesn't conform to UPPER_CASE naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.data_structures.coordinator_datatypes",
            "obj": "AgentStatus",
            "line": 39,
            "column": 4,
            "path": "agentlib_mpc/data_structures/coordinator_datatypes.py",
            "symbol": "invalid-name",
            "message": "Class constant name \"pending\" doesn't conform to UPPER_CASE naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.data_structures.coordinator_datatypes",
            "obj": "AgentStatus",
            "line": 40,
            "column": 4,
            "path": "agentlib_mpc/data_structures/coordinator_datatypes.py",
            "symbol": "invalid-name",
            "message": "Class constant name \"standby\" doesn't conform to UPPER_CASE naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.data_structures.coordinator_datatypes",
            "obj": "AgentStatus",
            "line": 41,
            "column": 4,
            "path": "agentlib_mpc/data_structures/coordinator_datatypes.py",
            "symbol": "invalid-name",
            "message": "Class constant name \"ready\" doesn't conform to UPPER_CASE naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.data_structures.coordinator_datatypes",
            "obj": "AgentStatus",
            "line": 42,
            "column": 4,
            "path": "agentlib_mpc/data_structures/coordinator_datatypes.py",
            "symbol": "invalid-name",
            "message": "Class constant name \"busy\" doesn't conform to UPPER_CASE naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.data_structures.coordinator_datatypes",
            "obj": "OptimizationData.to_dict",
            "line": 54,
            "column": 4,
            "path": "agentlib_mpc/data_structures/coordinator_datatypes.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.data_structures.coordinator_datatypes",
            "obj": "OptimizationData.from_dict",
            "line": 62,
            "column": 4,
            "path": "agentlib_mpc/data_structures/coordinator_datatypes.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "warning",
            "module": "agentlib_mpc.data_structures.coordinator_datatypes",
            "obj": "",
            "line": 7,
            "column": 0,
            "path": "agentlib_mpc/data_structures/coordinator_datatypes.py",
            "symbol": "unused-import",
            "message": "Unused Source imported from agentlib.core",
            "message-id": "W0611"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.data_structures.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/data_structures/__init__.py",
            "symbol": "trailing-newlines",
            "message": "Trailing newlines",
            "message-id": "C0305"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.backend",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/optimization_backends/backend.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "fatal",
            "module": "agentlib_mpc.optimization_backends.backend",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/optimization_backends/backend.py",
            "symbol": "astroid-error",
            "message": "agentlib_mpc/optimization_backends/backend.py: Fatal error while checking 'agentlib_mpc/optimization_backends/backend.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-28-47.txt'.",
            "message-id": "F0002"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/optimization_backends/__init__.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "error",
            "module": "agentlib_mpc.optimization_backends",
            "obj": "",
            "line": 3,
            "column": 0,
            "path": "agentlib_mpc/optimization_backends/__init__.py",
            "symbol": "import-error",
            "message": "Unable to import 'pydantic'",
            "message-id": "E0401"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.basic",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/optimization_backends/casadi_/basic.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "error",
            "module": "agentlib_mpc.optimization_backends.casadi_.basic",
            "obj": "",
            "line": 3,
            "column": 0,
            "path": "agentlib_mpc/optimization_backends/casadi_/basic.py",
            "symbol": "import-error",
            "message": "Unable to import 'casadi'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "agentlib_mpc.optimization_backends.casadi_.basic",
            "obj": "",
            "line": 4,
            "column": 0,
            "path": "agentlib_mpc/optimization_backends/casadi_/basic.py",
            "symbol": "import-error",
            "message": "Unable to import 'numpy'",
            "message-id": "E0401"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.basic",
            "obj": "BaseSystem",
            "line": 28,
            "column": 0,
            "path": "agentlib_mpc/optimization_backends/casadi_/basic.py",
            "symbol": "missing-class-docstring",
            "message": "Missing class docstring",
            "message-id": "C0115"
        },
        {
            "type": "refactor",
            "module": "agentlib_mpc.optimization_backends.casadi_.basic",
            "obj": "BaseSystem",
            "line": 28,
            "column": 0,
            "path": "agentlib_mpc/optimization_backends/casadi_/basic.py",
            "symbol": "too-many-instance-attributes",
            "message": "Too many instance attributes (11/7)",
            "message-id": "R0902"
        },
        {
            "type": "warning",
            "module": "agentlib_mpc.optimization_backends.casadi_.basic",
            "obj": "BaseSystem.initialize",
            "line": 99,
            "column": 8,
            "path": "agentlib_mpc/optimization_backends/casadi_/basic.py",
            "symbol": "attribute-defined-outside-init",
            "message": "Attribute 'time' defined outside __init__",
            "message-id": "W0201"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.basic",
            "obj": "CollocationMatrices",
            "line": 103,
            "column": 0,
            "path": "agentlib_mpc/optimization_backends/casadi_/basic.py",
            "symbol": "missing-class-docstring",
            "message": "Missing class docstring",
            "message-id": "C0115"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.basic",
            "obj": "CollocationMatrices",
            "line": 106,
            "column": 4,
            "path": "agentlib_mpc/optimization_backends/casadi_/basic.py",
            "symbol": "invalid-name",
            "message": "Attribute name \"B\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.basic",
            "obj": "CollocationMatrices",
            "line": 107,
            "column": 4,
            "path": "agentlib_mpc/optimization_backends/casadi_/basic.py",
            "symbol": "invalid-name",
            "message": "Attribute name \"C\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.basic",
            "obj": "CollocationMatrices",
            "line": 108,
            "column": 4,
            "path": "agentlib_mpc/optimization_backends/casadi_/basic.py",
            "symbol": "invalid-name",
            "message": "Attribute name \"D\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.basic",
            "obj": "DirectCollocation",
            "line": 111,
            "column": 0,
            "path": "agentlib_mpc/optimization_backends/casadi_/basic.py",
            "symbol": "missing-class-docstring",
            "message": "Missing class docstring",
            "message-id": "C0115"
        },
        {
            "type": "refactor",
            "module": "agentlib_mpc.optimization_backends.casadi_.basic",
            "obj": "DirectCollocation._discretize",
            "line": 112,
            "column": 4,
            "path": "agentlib_mpc/optimization_backends/casadi_/basic.py",
            "symbol": "too-many-locals",
            "message": "Too many local variables (17/15)",
            "message-id": "R0914"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.basic",
            "obj": "DirectCollocation._discretize",
            "line": 122,
            "column": 8,
            "path": "agentlib_mpc/optimization_backends/casadi_/basic.py",
            "symbol": "invalid-name",
            "message": "Variable name \"n\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.basic",
            "obj": "DirectCollocation._discretize",
            "line": 123,
            "column": 8,
            "path": "agentlib_mpc/optimization_backends/casadi_/basic.py",
            "symbol": "invalid-name",
            "message": "Variable name \"ts\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.basic",
            "obj": "DirectCollocation._discretize",
            "line": 127,
            "column": 8,
            "path": "agentlib_mpc/optimization_backends/casadi_/basic.py",
            "symbol": "invalid-name",
            "message": "Variable name \"xk\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.basic",
            "obj": "DirectCollocation._discretize",
            "line": 137,
            "column": 12,
            "path": "agentlib_mpc/optimization_backends/casadi_/basic.py",
            "symbol": "invalid-name",
            "message": "Variable name \"uk\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.basic",
            "obj": "DirectCollocation._discretize",
            "line": 139,
            "column": 12,
            "path": "agentlib_mpc/optimization_backends/casadi_/basic.py",
            "symbol": "invalid-name",
            "message": "Variable name \"dk\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.basic",
            "obj": "DirectCollocation._discretize",
            "line": 164,
            "column": 12,
            "path": "agentlib_mpc/optimization_backends/casadi_/basic.py",
            "symbol": "invalid-name",
            "message": "Variable name \"xk\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "refactor",
            "module": "agentlib_mpc.optimization_backends.casadi_.basic",
            "obj": "DirectCollocation._collocation_inner_loop",
            "line": 249,
            "column": 4,
            "path": "agentlib_mpc/optimization_backends/casadi_/basic.py",
            "symbol": "too-many-arguments",
            "message": "Too many arguments (7/5)",
            "message-id": "R0913"
        },
        {
            "type": "refactor",
            "module": "agentlib_mpc.optimization_backends.casadi_.basic",
            "obj": "DirectCollocation._collocation_inner_loop",
            "line": 249,
            "column": 4,
            "path": "agentlib_mpc/optimization_backends/casadi_/basic.py",
            "symbol": "too-many-locals",
            "message": "Too many local variables (24/15)",
            "message-id": "R0914"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.basic",
            "obj": "DirectCollocation._collocation_inner_loop",
            "line": 283,
            "column": 8,
            "path": "agentlib_mpc/optimization_backends/casadi_/basic.py",
            "symbol": "invalid-name",
            "message": "Variable name \"ts\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.basic",
            "obj": "DirectCollocation._collocation_inner_loop",
            "line": 314,
            "column": 12,
            "path": "agentlib_mpc/optimization_backends/casadi_/basic.py",
            "symbol": "invalid-name",
            "message": "Variable name \"xp\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.basic",
            "obj": "DirectCollocation._collocation_inner_loop",
            "line": 315,
            "column": 16,
            "path": "agentlib_mpc/optimization_backends/casadi_/basic.py",
            "symbol": "invalid-name",
            "message": "Variable name \"r\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.basic",
            "obj": "DirectCollocation._collocation_inner_loop",
            "line": 316,
            "column": 16,
            "path": "agentlib_mpc/optimization_backends/casadi_/basic.py",
            "symbol": "invalid-name",
            "message": "Variable name \"xp\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.basic",
            "obj": "DirectCollocation._collocation_polynomial",
            "line": 345,
            "column": 8,
            "path": "agentlib_mpc/optimization_backends/casadi_/basic.py",
            "symbol": "invalid-name",
            "message": "Variable name \"d\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.basic",
            "obj": "DirectCollocation._collocation_polynomial",
            "line": 352,
            "column": 8,
            "path": "agentlib_mpc/optimization_backends/casadi_/basic.py",
            "symbol": "invalid-name",
            "message": "Variable name \"C\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.basic",
            "obj": "DirectCollocation._collocation_polynomial",
            "line": 355,
            "column": 8,
            "path": "agentlib_mpc/optimization_backends/casadi_/basic.py",
            "symbol": "invalid-name",
            "message": "Variable name \"D\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.basic",
            "obj": "DirectCollocation._collocation_polynomial",
            "line": 358,
            "column": 8,
            "path": "agentlib_mpc/optimization_backends/casadi_/basic.py",
            "symbol": "invalid-name",
            "message": "Variable name \"B\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.basic",
            "obj": "DirectCollocation._collocation_polynomial",
            "line": 364,
            "column": 12,
            "path": "agentlib_mpc/optimization_backends/casadi_/basic.py",
            "symbol": "invalid-name",
            "message": "Variable name \"p\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.basic",
            "obj": "DirectCollocation._collocation_polynomial",
            "line": 365,
            "column": 16,
            "path": "agentlib_mpc/optimization_backends/casadi_/basic.py",
            "symbol": "invalid-name",
            "message": "Variable name \"r\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.basic",
            "obj": "DirectCollocation._collocation_polynomial",
            "line": 367,
            "column": 20,
            "path": "agentlib_mpc/optimization_backends/casadi_/basic.py",
            "symbol": "invalid-name",
            "message": "Variable name \"p\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.basic",
            "obj": "DirectCollocation._collocation_polynomial",
            "line": 376,
            "column": 16,
            "path": "agentlib_mpc/optimization_backends/casadi_/basic.py",
            "symbol": "invalid-name",
            "message": "Variable name \"r\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.basic",
            "obj": "MultipleShooting",
            "line": 393,
            "column": 0,
            "path": "agentlib_mpc/optimization_backends/casadi_/basic.py",
            "symbol": "missing-class-docstring",
            "message": "Missing class docstring",
            "message-id": "C0115"
        },
        {
            "type": "refactor",
            "module": "agentlib_mpc.optimization_backends.casadi_.basic",
            "obj": "MultipleShooting._discretize",
            "line": 394,
            "column": 4,
            "path": "agentlib_mpc/optimization_backends/casadi_/basic.py",
            "symbol": "too-many-locals",
            "message": "Too many local variables (18/15)",
            "message-id": "R0914"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.basic",
            "obj": "MultipleShooting._discretize",
            "line": 399,
            "column": 8,
            "path": "agentlib_mpc/optimization_backends/casadi_/basic.py",
            "symbol": "invalid-name",
            "message": "Variable name \"n\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.basic",
            "obj": "MultipleShooting._discretize",
            "line": 400,
            "column": 8,
            "path": "agentlib_mpc/optimization_backends/casadi_/basic.py",
            "symbol": "invalid-name",
            "message": "Variable name \"ts\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.basic",
            "obj": "MultipleShooting._discretize",
            "line": 404,
            "column": 8,
            "path": "agentlib_mpc/optimization_backends/casadi_/basic.py",
            "symbol": "invalid-name",
            "message": "Variable name \"xk\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.basic",
            "obj": "MultipleShooting._discretize",
            "line": 411,
            "column": 12,
            "path": "agentlib_mpc/optimization_backends/casadi_/basic.py",
            "symbol": "invalid-name",
            "message": "Variable name \"uk\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.basic",
            "obj": "MultipleShooting._discretize",
            "line": 412,
            "column": 12,
            "path": "agentlib_mpc/optimization_backends/casadi_/basic.py",
            "symbol": "invalid-name",
            "message": "Variable name \"dk\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.basic",
            "obj": "MultipleShooting._discretize",
            "line": 413,
            "column": 12,
            "path": "agentlib_mpc/optimization_backends/casadi_/basic.py",
            "symbol": "invalid-name",
            "message": "Variable name \"zk\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.basic",
            "obj": "MultipleShooting._discretize",
            "line": 414,
            "column": 12,
            "path": "agentlib_mpc/optimization_backends/casadi_/basic.py",
            "symbol": "invalid-name",
            "message": "Variable name \"yk\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.basic",
            "obj": "MultipleShooting._discretize",
            "line": 435,
            "column": 12,
            "path": "agentlib_mpc/optimization_backends/casadi_/basic.py",
            "symbol": "invalid-name",
            "message": "Variable name \"fk\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.basic",
            "obj": "MultipleShooting._discretize",
            "line": 443,
            "column": 12,
            "path": "agentlib_mpc/optimization_backends/casadi_/basic.py",
            "symbol": "invalid-name",
            "message": "Variable name \"xk\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.basic",
            "obj": "MultipleShooting._create_ode",
            "line": 457,
            "column": 8,
            "path": "agentlib_mpc/optimization_backends/casadi_/basic.py",
            "symbol": "invalid-name",
            "message": "Variable name \"p\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.casadi_ml",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/optimization_backends/casadi_/casadi_ml.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "error",
            "module": "agentlib_mpc.optimization_backends.casadi_.casadi_ml",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/optimization_backends/casadi_/casadi_ml.py",
            "symbol": "import-error",
            "message": "Unable to import 'casadi'",
            "message-id": "E0401"
        },
        {
            "type": "fatal",
            "module": "agentlib_mpc.optimization_backends.casadi_.casadi_ml",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/optimization_backends/casadi_/casadi_ml.py",
            "symbol": "astroid-error",
            "message": "agentlib_mpc/optimization_backends/casadi_/casadi_ml.py: Fatal error while checking 'agentlib_mpc/optimization_backends/casadi_/casadi_ml.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-28-48.txt'.",
            "message-id": "F0002"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.full",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/optimization_backends/casadi_/full.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "error",
            "module": "agentlib_mpc.optimization_backends.casadi_.full",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/optimization_backends/casadi_/full.py",
            "symbol": "import-error",
            "message": "Unable to import 'casadi'",
            "message-id": "E0401"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.full",
            "obj": "FullSystem",
            "line": 17,
            "column": 0,
            "path": "agentlib_mpc/optimization_backends/casadi_/full.py",
            "symbol": "missing-class-docstring",
            "message": "Missing class docstring",
            "message-id": "C0115"
        },
        {
            "type": "warning",
            "module": "agentlib_mpc.optimization_backends.casadi_.full",
            "obj": "FullSystem.initialize",
            "line": 39,
            "column": 8,
            "path": "agentlib_mpc/optimization_backends/casadi_/full.py",
            "symbol": "attribute-defined-outside-init",
            "message": "Attribute 'time' defined outside __init__",
            "message-id": "W0201"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.full",
            "obj": "DirectCollocation",
            "line": 42,
            "column": 0,
            "path": "agentlib_mpc/optimization_backends/casadi_/full.py",
            "symbol": "missing-class-docstring",
            "message": "Missing class docstring",
            "message-id": "C0115"
        },
        {
            "type": "refactor",
            "module": "agentlib_mpc.optimization_backends.casadi_.full",
            "obj": "DirectCollocation._discretize",
            "line": 43,
            "column": 4,
            "path": "agentlib_mpc/optimization_backends/casadi_/full.py",
            "symbol": "too-many-locals",
            "message": "Too many local variables (17/15)",
            "message-id": "R0914"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.full",
            "obj": "DirectCollocation._discretize",
            "line": 53,
            "column": 8,
            "path": "agentlib_mpc/optimization_backends/casadi_/full.py",
            "symbol": "invalid-name",
            "message": "Variable name \"n\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.full",
            "obj": "DirectCollocation._discretize",
            "line": 54,
            "column": 8,
            "path": "agentlib_mpc/optimization_backends/casadi_/full.py",
            "symbol": "invalid-name",
            "message": "Variable name \"ts\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.full",
            "obj": "DirectCollocation._discretize",
            "line": 58,
            "column": 8,
            "path": "agentlib_mpc/optimization_backends/casadi_/full.py",
            "symbol": "invalid-name",
            "message": "Variable name \"xk\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.full",
            "obj": "DirectCollocation._discretize",
            "line": 59,
            "column": 8,
            "path": "agentlib_mpc/optimization_backends/casadi_/full.py",
            "symbol": "invalid-name",
            "message": "Variable name \"uk\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.full",
            "obj": "DirectCollocation._discretize",
            "line": 70,
            "column": 12,
            "path": "agentlib_mpc/optimization_backends/casadi_/full.py",
            "symbol": "invalid-name",
            "message": "Variable name \"uk\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.full",
            "obj": "DirectCollocation._discretize",
            "line": 93,
            "column": 12,
            "path": "agentlib_mpc/optimization_backends/casadi_/full.py",
            "symbol": "invalid-name",
            "message": "Variable name \"xk\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.full",
            "obj": "MultipleShooting",
            "line": 103,
            "column": 0,
            "path": "agentlib_mpc/optimization_backends/casadi_/full.py",
            "symbol": "missing-class-docstring",
            "message": "Missing class docstring",
            "message-id": "C0115"
        },
        {
            "type": "refactor",
            "module": "agentlib_mpc.optimization_backends.casadi_.full",
            "obj": "MultipleShooting._discretize",
            "line": 104,
            "column": 4,
            "path": "agentlib_mpc/optimization_backends/casadi_/full.py",
            "symbol": "too-many-locals",
            "message": "Too many local variables (20/15)",
            "message-id": "R0914"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.full",
            "obj": "MultipleShooting._discretize",
            "line": 109,
            "column": 8,
            "path": "agentlib_mpc/optimization_backends/casadi_/full.py",
            "symbol": "invalid-name",
            "message": "Variable name \"n\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.full",
            "obj": "MultipleShooting._discretize",
            "line": 110,
            "column": 8,
            "path": "agentlib_mpc/optimization_backends/casadi_/full.py",
            "symbol": "invalid-name",
            "message": "Variable name \"ts\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.full",
            "obj": "MultipleShooting._discretize",
            "line": 114,
            "column": 8,
            "path": "agentlib_mpc/optimization_backends/casadi_/full.py",
            "symbol": "invalid-name",
            "message": "Variable name \"xk\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.full",
            "obj": "MultipleShooting._discretize",
            "line": 116,
            "column": 8,
            "path": "agentlib_mpc/optimization_backends/casadi_/full.py",
            "symbol": "invalid-name",
            "message": "Variable name \"uk\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.full",
            "obj": "MultipleShooting._discretize",
            "line": 127,
            "column": 12,
            "path": "agentlib_mpc/optimization_backends/casadi_/full.py",
            "symbol": "invalid-name",
            "message": "Variable name \"uk\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.full",
            "obj": "MultipleShooting._discretize",
            "line": 130,
            "column": 12,
            "path": "agentlib_mpc/optimization_backends/casadi_/full.py",
            "symbol": "invalid-name",
            "message": "Variable name \"dk\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.full",
            "obj": "MultipleShooting._discretize",
            "line": 131,
            "column": 12,
            "path": "agentlib_mpc/optimization_backends/casadi_/full.py",
            "symbol": "invalid-name",
            "message": "Variable name \"zk\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.full",
            "obj": "MultipleShooting._discretize",
            "line": 132,
            "column": 12,
            "path": "agentlib_mpc/optimization_backends/casadi_/full.py",
            "symbol": "invalid-name",
            "message": "Variable name \"yk\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.full",
            "obj": "MultipleShooting._discretize",
            "line": 149,
            "column": 12,
            "path": "agentlib_mpc/optimization_backends/casadi_/full.py",
            "symbol": "invalid-name",
            "message": "Variable name \"fk\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.full",
            "obj": "MultipleShooting._discretize",
            "line": 156,
            "column": 12,
            "path": "agentlib_mpc/optimization_backends/casadi_/full.py",
            "symbol": "invalid-name",
            "message": "Variable name \"xk\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.admm",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/optimization_backends/casadi_/admm.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "error",
            "module": "agentlib_mpc.optimization_backends.casadi_.admm",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/optimization_backends/casadi_/admm.py",
            "symbol": "import-error",
            "message": "Unable to import 'casadi'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "agentlib_mpc.optimization_backends.casadi_.admm",
            "obj": "",
            "line": 2,
            "column": 0,
            "path": "agentlib_mpc/optimization_backends/casadi_/admm.py",
            "symbol": "import-error",
            "message": "Unable to import 'pandas'",
            "message-id": "E0401"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.admm",
            "obj": "CasadiADMMSystem",
            "line": 22,
            "column": 0,
            "path": "agentlib_mpc/optimization_backends/casadi_/admm.py",
            "symbol": "missing-class-docstring",
            "message": "Missing class docstring",
            "message-id": "C0115"
        },
        {
            "type": "refactor",
            "module": "agentlib_mpc.optimization_backends.casadi_.admm",
            "obj": "CasadiADMMSystem",
            "line": 22,
            "column": 0,
            "path": "agentlib_mpc/optimization_backends/casadi_/admm.py",
            "symbol": "too-many-instance-attributes",
            "message": "Too many instance attributes (9/7)",
            "message-id": "R0902"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.admm",
            "obj": "ADMMCollocation",
            "line": 107,
            "column": 0,
            "path": "agentlib_mpc/optimization_backends/casadi_/admm.py",
            "symbol": "missing-class-docstring",
            "message": "Missing class docstring",
            "message-id": "C0115"
        },
        {
            "type": "refactor",
            "module": "agentlib_mpc.optimization_backends.casadi_.admm",
            "obj": "ADMMCollocation._discretize",
            "line": 108,
            "column": 4,
            "path": "agentlib_mpc/optimization_backends/casadi_/admm.py",
            "symbol": "too-many-locals",
            "message": "Too many local variables (18/15)",
            "message-id": "R0914"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.admm",
            "obj": "ADMMCollocation._discretize",
            "line": 118,
            "column": 8,
            "path": "agentlib_mpc/optimization_backends/casadi_/admm.py",
            "symbol": "invalid-name",
            "message": "Variable name \"n\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.admm",
            "obj": "ADMMCollocation._discretize",
            "line": 119,
            "column": 8,
            "path": "agentlib_mpc/optimization_backends/casadi_/admm.py",
            "symbol": "invalid-name",
            "message": "Variable name \"ts\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.admm",
            "obj": "ADMMCollocation._discretize",
            "line": 123,
            "column": 8,
            "path": "agentlib_mpc/optimization_backends/casadi_/admm.py",
            "symbol": "invalid-name",
            "message": "Variable name \"xk\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.admm",
            "obj": "ADMMCollocation._discretize",
            "line": 124,
            "column": 8,
            "path": "agentlib_mpc/optimization_backends/casadi_/admm.py",
            "symbol": "invalid-name",
            "message": "Variable name \"uk\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.admm",
            "obj": "ADMMCollocation._discretize",
            "line": 136,
            "column": 12,
            "path": "agentlib_mpc/optimization_backends/casadi_/admm.py",
            "symbol": "invalid-name",
            "message": "Variable name \"uk\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.admm",
            "obj": "ADMMCollocation._discretize",
            "line": 173,
            "column": 12,
            "path": "agentlib_mpc/optimization_backends/casadi_/admm.py",
            "symbol": "invalid-name",
            "message": "Variable name \"xk\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.admm",
            "obj": "ADMMMultipleShooting",
            "line": 183,
            "column": 0,
            "path": "agentlib_mpc/optimization_backends/casadi_/admm.py",
            "symbol": "missing-class-docstring",
            "message": "Missing class docstring",
            "message-id": "C0115"
        },
        {
            "type": "refactor",
            "module": "agentlib_mpc.optimization_backends.casadi_.admm",
            "obj": "ADMMMultipleShooting._discretize",
            "line": 184,
            "column": 4,
            "path": "agentlib_mpc/optimization_backends/casadi_/admm.py",
            "symbol": "too-many-locals",
            "message": "Too many local variables (28/15)",
            "message-id": "R0914"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.admm",
            "obj": "ADMMMultipleShooting._create_ode",
            "line": 307,
            "column": 8,
            "path": "agentlib_mpc/optimization_backends/casadi_/admm.py",
            "symbol": "invalid-name",
            "message": "Variable name \"p\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.admm",
            "obj": "CasADiADMMBackend.__init__",
            "line": 342,
            "column": 8,
            "path": "agentlib_mpc/optimization_backends/casadi_/admm.py",
            "symbol": "invalid-name",
            "message": "Attribute name \"it\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "warning",
            "module": "agentlib_mpc.optimization_backends.casadi_.admm",
            "obj": "CasADiADMMBackend.save_result_df",
            "line": 402,
            "column": 13,
            "path": "agentlib_mpc/optimization_backends/casadi_/admm.py",
            "symbol": "unspecified-encoding",
            "message": "Using open without explicitly specifying an encoding",
            "message-id": "W1514"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.admm",
            "obj": "CasADiADMMBackend.save_result_df",
            "line": 402,
            "column": 48,
            "path": "agentlib_mpc/optimization_backends/casadi_/admm.py",
            "symbol": "invalid-name",
            "message": "Variable name \"f\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "warning",
            "module": "agentlib_mpc.optimization_backends.casadi_.admm",
            "obj": "CasADiADMMBackend.save_result_df",
            "line": 406,
            "column": 13,
            "path": "agentlib_mpc/optimization_backends/casadi_/admm.py",
            "symbol": "unspecified-encoding",
            "message": "Using open without explicitly specifying an encoding",
            "message-id": "W1514"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.admm",
            "obj": "CasADiADMMBackend.save_result_df",
            "line": 406,
            "column": 48,
            "path": "agentlib_mpc/optimization_backends/casadi_/admm.py",
            "symbol": "invalid-name",
            "message": "Variable name \"f\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.minlp",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/optimization_backends/casadi_/minlp.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "error",
            "module": "agentlib_mpc.optimization_backends.casadi_.minlp",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/optimization_backends/casadi_/minlp.py",
            "symbol": "import-error",
            "message": "Unable to import 'casadi'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "agentlib_mpc.optimization_backends.casadi_.minlp",
            "obj": "",
            "line": 2,
            "column": 0,
            "path": "agentlib_mpc/optimization_backends/casadi_/minlp.py",
            "symbol": "import-error",
            "message": "Unable to import 'numpy'",
            "message-id": "E0401"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.minlp",
            "obj": "CasadiMINLPSystem",
            "line": 17,
            "column": 0,
            "path": "agentlib_mpc/optimization_backends/casadi_/minlp.py",
            "symbol": "missing-class-docstring",
            "message": "Missing class docstring",
            "message-id": "C0115"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.minlp",
            "obj": "DirectCollocation",
            "line": 63,
            "column": 0,
            "path": "agentlib_mpc/optimization_backends/casadi_/minlp.py",
            "symbol": "missing-class-docstring",
            "message": "Missing class docstring",
            "message-id": "C0115"
        },
        {
            "type": "refactor",
            "module": "agentlib_mpc.optimization_backends.casadi_.minlp",
            "obj": "DirectCollocation._discretize",
            "line": 64,
            "column": 4,
            "path": "agentlib_mpc/optimization_backends/casadi_/minlp.py",
            "symbol": "too-many-locals",
            "message": "Too many local variables (16/15)",
            "message-id": "R0914"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.minlp",
            "obj": "DirectCollocation._discretize",
            "line": 74,
            "column": 8,
            "path": "agentlib_mpc/optimization_backends/casadi_/minlp.py",
            "symbol": "invalid-name",
            "message": "Variable name \"n\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.minlp",
            "obj": "DirectCollocation._discretize",
            "line": 75,
            "column": 8,
            "path": "agentlib_mpc/optimization_backends/casadi_/minlp.py",
            "symbol": "invalid-name",
            "message": "Variable name \"ts\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.minlp",
            "obj": "DirectCollocation._discretize",
            "line": 79,
            "column": 8,
            "path": "agentlib_mpc/optimization_backends/casadi_/minlp.py",
            "symbol": "invalid-name",
            "message": "Variable name \"xk\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.minlp",
            "obj": "DirectCollocation._discretize",
            "line": 88,
            "column": 12,
            "path": "agentlib_mpc/optimization_backends/casadi_/minlp.py",
            "symbol": "invalid-name",
            "message": "Variable name \"uk\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.minlp",
            "obj": "DirectCollocation._discretize",
            "line": 89,
            "column": 12,
            "path": "agentlib_mpc/optimization_backends/casadi_/minlp.py",
            "symbol": "invalid-name",
            "message": "Variable name \"wk\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.minlp",
            "obj": "DirectCollocation._discretize",
            "line": 114,
            "column": 12,
            "path": "agentlib_mpc/optimization_backends/casadi_/minlp.py",
            "symbol": "invalid-name",
            "message": "Variable name \"xk\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.minlp",
            "obj": "MultipleShooting",
            "line": 124,
            "column": 0,
            "path": "agentlib_mpc/optimization_backends/casadi_/minlp.py",
            "symbol": "missing-class-docstring",
            "message": "Missing class docstring",
            "message-id": "C0115"
        },
        {
            "type": "refactor",
            "module": "agentlib_mpc.optimization_backends.casadi_.minlp",
            "obj": "MultipleShooting._discretize",
            "line": 125,
            "column": 4,
            "path": "agentlib_mpc/optimization_backends/casadi_/minlp.py",
            "symbol": "too-many-locals",
            "message": "Too many local variables (19/15)",
            "message-id": "R0914"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.minlp",
            "obj": "MultipleShooting._discretize",
            "line": 130,
            "column": 8,
            "path": "agentlib_mpc/optimization_backends/casadi_/minlp.py",
            "symbol": "invalid-name",
            "message": "Variable name \"n\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.minlp",
            "obj": "MultipleShooting._discretize",
            "line": 131,
            "column": 8,
            "path": "agentlib_mpc/optimization_backends/casadi_/minlp.py",
            "symbol": "invalid-name",
            "message": "Variable name \"ts\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.minlp",
            "obj": "MultipleShooting._discretize",
            "line": 135,
            "column": 8,
            "path": "agentlib_mpc/optimization_backends/casadi_/minlp.py",
            "symbol": "invalid-name",
            "message": "Variable name \"xk\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.minlp",
            "obj": "MultipleShooting._discretize",
            "line": 142,
            "column": 12,
            "path": "agentlib_mpc/optimization_backends/casadi_/minlp.py",
            "symbol": "invalid-name",
            "message": "Variable name \"uk\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.minlp",
            "obj": "MultipleShooting._discretize",
            "line": 143,
            "column": 12,
            "path": "agentlib_mpc/optimization_backends/casadi_/minlp.py",
            "symbol": "invalid-name",
            "message": "Variable name \"wk\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.minlp",
            "obj": "MultipleShooting._discretize",
            "line": 144,
            "column": 12,
            "path": "agentlib_mpc/optimization_backends/casadi_/minlp.py",
            "symbol": "invalid-name",
            "message": "Variable name \"dk\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.minlp",
            "obj": "MultipleShooting._discretize",
            "line": 145,
            "column": 12,
            "path": "agentlib_mpc/optimization_backends/casadi_/minlp.py",
            "symbol": "invalid-name",
            "message": "Variable name \"zk\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.minlp",
            "obj": "MultipleShooting._discretize",
            "line": 146,
            "column": 12,
            "path": "agentlib_mpc/optimization_backends/casadi_/minlp.py",
            "symbol": "invalid-name",
            "message": "Variable name \"yk\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.minlp",
            "obj": "MultipleShooting._discretize",
            "line": 162,
            "column": 12,
            "path": "agentlib_mpc/optimization_backends/casadi_/minlp.py",
            "symbol": "invalid-name",
            "message": "Variable name \"fk\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.minlp",
            "obj": "MultipleShooting._discretize",
            "line": 170,
            "column": 12,
            "path": "agentlib_mpc/optimization_backends/casadi_/minlp.py",
            "symbol": "invalid-name",
            "message": "Variable name \"xk\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "warning",
            "module": "agentlib_mpc.optimization_backends.casadi_.minlp_cia",
            "obj": "",
            "line": 28,
            "column": 29,
            "path": "agentlib_mpc/optimization_backends/casadi_/minlp_cia.py",
            "symbol": "anomalous-backslash-in-string",
            "message": "Anomalous backslash in string: '\\ '. String constant might be missing an r prefix.",
            "message-id": "W1401"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.minlp_cia",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/optimization_backends/casadi_/minlp_cia.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "fatal",
            "module": "agentlib_mpc.optimization_backends.casadi_.minlp_cia",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/optimization_backends/casadi_/minlp_cia.py",
            "symbol": "astroid-error",
            "message": "agentlib_mpc/optimization_backends/casadi_/minlp_cia.py: Fatal error while checking 'agentlib_mpc/optimization_backends/casadi_/minlp_cia.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-28-49.txt'.",
            "message-id": "F0002"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.mhe",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/optimization_backends/casadi_/mhe.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "fatal",
            "module": "agentlib_mpc.optimization_backends.casadi_.mhe",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/optimization_backends/casadi_/mhe.py",
            "symbol": "astroid-error",
            "message": "agentlib_mpc/optimization_backends/casadi_/mhe.py: Fatal error while checking 'agentlib_mpc/optimization_backends/casadi_/mhe.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-28-49.txt'.",
            "message-id": "F0002"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.casadi_admm_ml",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/optimization_backends/casadi_/casadi_admm_ml.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "fatal",
            "module": "agentlib_mpc.optimization_backends.casadi_.casadi_admm_ml",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/optimization_backends/casadi_/casadi_admm_ml.py",
            "symbol": "astroid-error",
            "message": "agentlib_mpc/optimization_backends/casadi_/casadi_admm_ml.py: Fatal error while checking 'agentlib_mpc/optimization_backends/casadi_/casadi_admm_ml.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-28-49.txt'.",
            "message-id": "F0002"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.core.VariableGroup",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/optimization_backends/casadi_/core/VariableGroup.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.core.VariableGroup",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/optimization_backends/casadi_/core/VariableGroup.py",
            "symbol": "invalid-name",
            "message": "Module name \"VariableGroup\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "error",
            "module": "agentlib_mpc.optimization_backends.casadi_.core.VariableGroup",
            "obj": "",
            "line": 5,
            "column": 0,
            "path": "agentlib_mpc/optimization_backends/casadi_/core/VariableGroup.py",
            "symbol": "import-error",
            "message": "Unable to import 'casadi'",
            "message-id": "E0401"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.core.VariableGroup",
            "obj": "OptimizationQuantity",
            "line": 11,
            "column": 0,
            "path": "agentlib_mpc/optimization_backends/casadi_/core/VariableGroup.py",
            "symbol": "missing-class-docstring",
            "message": "Missing class docstring",
            "message-id": "C0115"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.core.VariableGroup",
            "obj": "OptimizationVariable",
            "line": 33,
            "column": 0,
            "path": "agentlib_mpc/optimization_backends/casadi_/core/VariableGroup.py",
            "symbol": "missing-class-docstring",
            "message": "Missing class docstring",
            "message-id": "C0115"
        },
        {
            "type": "refactor",
            "module": "agentlib_mpc.optimization_backends.casadi_.core.VariableGroup",
            "obj": "OptimizationVariable.declare",
            "line": 40,
            "column": 4,
            "path": "agentlib_mpc/optimization_backends/casadi_/core/VariableGroup.py",
            "symbol": "too-many-arguments",
            "message": "Too many arguments (7/5)",
            "message-id": "R0913"
        },
        {
            "type": "refactor",
            "module": "agentlib_mpc.optimization_backends.casadi_.core.VariableGroup",
            "obj": "OptimizationVariable.declare",
            "line": 40,
            "column": 4,
            "path": "agentlib_mpc/optimization_backends/casadi_/core/VariableGroup.py",
            "symbol": "too-many-locals",
            "message": "Too many local variables (22/15)",
            "message-id": "R0914"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.core.VariableGroup",
            "obj": "OptimizationParameter",
            "line": 144,
            "column": 0,
            "path": "agentlib_mpc/optimization_backends/casadi_/core/VariableGroup.py",
            "symbol": "missing-class-docstring",
            "message": "Missing class docstring",
            "message-id": "C0115"
        },
        {
            "type": "refactor",
            "module": "agentlib_mpc.optimization_backends.casadi_.core.VariableGroup",
            "obj": "OptimizationParameter.declare",
            "line": 149,
            "column": 4,
            "path": "agentlib_mpc/optimization_backends/casadi_/core/VariableGroup.py",
            "symbol": "too-many-arguments",
            "message": "Too many arguments (6/5)",
            "message-id": "R0913"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.optimization_backends.casadi_.core.casadi_backend",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/optimization_backends/casadi_/core/casadi_backend.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "fatal",
            "module": "agentlib_mpc.optimization_backends.casadi_.core.casadi_backend",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/optimization_backends/casadi_/core/casadi_backend.py",
            "symbol": "astroid-error",
            "message": "agentlib_mpc/optimization_backends/casadi_/core/casadi_backend.py: Fatal error while checking 'agentlib_mpc/optimization_backends/casadi_/core/casadi_backend.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-28-49.txt'.",
            "message-id": "F0002"
        },
        {
            "type": "fatal",
            "module": "agentlib_mpc.optimization_backends.casadi_.core.system",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/optimization_backends/casadi_/core/system.py",
            "symbol": "astroid-error",
            "message": "agentlib_mpc/optimization_backends/casadi_/core/system.py: Fatal error while checking 'agentlib_mpc/optimization_backends/casadi_/core/system.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-28-49.txt'.",
            "message-id": "F0002"
        },
        {
            "type": "fatal",
            "module": "agentlib_mpc.optimization_backends.casadi_.core.discretization",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/optimization_backends/casadi_/core/discretization.py",
            "symbol": "astroid-error",
            "message": "agentlib_mpc/optimization_backends/casadi_/core/discretization.py: Fatal error while checking 'agentlib_mpc/optimization_backends/casadi_/core/discretization.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-28-50.txt'.",
            "message-id": "F0002"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.modules.data_source",
            "obj": "",
            "line": 122,
            "column": 0,
            "path": "agentlib_mpc/modules/data_source.py",
            "symbol": "line-too-long",
            "message": "Line too long (147/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.modules.data_source",
            "obj": "",
            "line": 178,
            "column": 0,
            "path": "agentlib_mpc/modules/data_source.py",
            "symbol": "line-too-long",
            "message": "Line too long (101/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.modules.data_source",
            "obj": "",
            "line": 180,
            "column": 0,
            "path": "agentlib_mpc/modules/data_source.py",
            "symbol": "line-too-long",
            "message": "Line too long (116/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.modules.data_source",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/modules/data_source.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "error",
            "module": "agentlib_mpc.modules.data_source",
            "obj": "",
            "line": 3,
            "column": 0,
            "path": "agentlib_mpc/modules/data_source.py",
            "symbol": "import-error",
            "message": "Unable to import 'pandas'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "agentlib_mpc.modules.data_source",
            "obj": "",
            "line": 4,
            "column": 0,
            "path": "agentlib_mpc/modules/data_source.py",
            "symbol": "import-error",
            "message": "Unable to import 'numpy'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "agentlib_mpc.modules.data_source",
            "obj": "",
            "line": 6,
            "column": 0,
            "path": "agentlib_mpc/modules/data_source.py",
            "symbol": "import-error",
            "message": "Unable to import 'pydantic'",
            "message-id": "E0401"
        },
        {
            "type": "fatal",
            "module": "agentlib_mpc.modules.data_source",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/modules/data_source.py",
            "symbol": "astroid-error",
            "message": "agentlib_mpc/modules/data_source.py: Fatal error while checking 'agentlib_mpc/modules/data_source.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-28-50.txt'.",
            "message-id": "F0002"
        },
        {
            "type": "fatal",
            "module": "agentlib_mpc.modules.mpc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/modules/mpc.py",
            "symbol": "astroid-error",
            "message": "agentlib_mpc/modules/mpc.py: Fatal error while checking 'agentlib_mpc/modules/mpc.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-28-50.txt'.",
            "message-id": "F0002"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.modules.minlp_mpc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/modules/minlp_mpc.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "error",
            "module": "agentlib_mpc.modules.minlp_mpc",
            "obj": "",
            "line": 4,
            "column": 0,
            "path": "agentlib_mpc/modules/minlp_mpc.py",
            "symbol": "import-error",
            "message": "Unable to import 'pydantic'",
            "message-id": "E0401"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.modules.minlp_mpc",
            "obj": "MINLPMPCConfig.validate_binary_bounds",
            "line": 31,
            "column": 12,
            "path": "agentlib_mpc/modules/minlp_mpc.py",
            "symbol": "invalid-name",
            "message": "Variable name \"bc\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "warning",
            "module": "agentlib_mpc.modules.minlp_mpc",
            "obj": "MINLPMPCConfig.validate_binary_bounds",
            "line": 34,
            "column": 12,
            "path": "agentlib_mpc/modules/minlp_mpc.py",
            "symbol": "logging-fstring-interpolation",
            "message": "Use lazy % formatting in logging functions",
            "message-id": "W1203"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.modules.minlp_mpc",
            "obj": "MINLPMPC",
            "line": 43,
            "column": 0,
            "path": "agentlib_mpc/modules/minlp_mpc.py",
            "symbol": "missing-class-docstring",
            "message": "Missing class docstring",
            "message-id": "C0115"
        },
        {
            "type": "error",
            "module": "agentlib_mpc.modules.minlp_mpc",
            "obj": "MINLPMPC.set_actuation",
            "line": 98,
            "column": 25,
            "path": "agentlib_mpc/modules/minlp_mpc.py",
            "symbol": "not-an-iterable",
            "message": "Non-iterable value self.var_ref.binary_controls is used in an iterating context",
            "message-id": "E1133"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.modules.data_source",
            "obj": "",
            "line": 5,
            "column": 0,
            "path": "agentlib_mpc/modules/data_source.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"import logging\" should be placed before \"import pandas as pd\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.modules.mpc",
            "obj": "",
            "line": 3,
            "column": 0,
            "path": "agentlib_mpc/modules/mpc.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"import os\" should be placed before \"import pandas as pd\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.modules.minlp_mpc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/modules/minlp_mpc.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"import logging\" should be placed before \"import pandas as pd\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.modules.minlp_mpc",
            "obj": "",
            "line": 2,
            "column": 0,
            "path": "agentlib_mpc/modules/minlp_mpc.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"import os\" should be placed before \"import pandas as pd\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.modules.minlp_mpc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/modules/minlp_mpc.py",
            "symbol": "ungrouped-imports",
            "message": "Imports from package logging are not grouped",
            "message-id": "C0412"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.modules.minlp_mpc",
            "obj": "",
            "line": 2,
            "column": 0,
            "path": "agentlib_mpc/modules/minlp_mpc.py",
            "symbol": "ungrouped-imports",
            "message": "Imports from package os are not grouped",
            "message-id": "C0412"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.modules.ml_model_simulator",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/modules/ml_model_simulator.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "error",
            "module": "agentlib_mpc.modules.ml_model_simulator",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/modules/ml_model_simulator.py",
            "symbol": "import-error",
            "message": "Unable to import 'pydantic'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "agentlib_mpc.modules.ml_model_simulator",
            "obj": "",
            "line": 2,
            "column": 0,
            "path": "agentlib_mpc/modules/ml_model_simulator.py",
            "symbol": "import-error",
            "message": "Unable to import 'agentlib.core'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "agentlib_mpc.modules.ml_model_simulator",
            "obj": "",
            "line": 3,
            "column": 0,
            "path": "agentlib_mpc/modules/ml_model_simulator.py",
            "symbol": "import-error",
            "message": "Unable to import 'agentlib.core.errors'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "agentlib_mpc.modules.ml_model_simulator",
            "obj": "",
            "line": 4,
            "column": 0,
            "path": "agentlib_mpc/modules/ml_model_simulator.py",
            "symbol": "import-error",
            "message": "Unable to import 'agentlib.modules.simulator'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "agentlib_mpc.modules.ml_model_simulator",
            "obj": "",
            "line": 5,
            "column": 0,
            "path": "agentlib_mpc/modules/ml_model_simulator.py",
            "symbol": "import-error",
            "message": "Unable to import 'pydantic_core.core_schema'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "agentlib_mpc.modules.ml_model_simulator",
            "obj": "",
            "line": 9,
            "column": 0,
            "path": "agentlib_mpc/modules/ml_model_simulator.py",
            "symbol": "import-error",
            "message": "Unable to import 'pydantic'",
            "message-id": "E0401"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.modules.ml_model_simulator",
            "obj": "MLModelSimulatorConfig",
            "line": 12,
            "column": 0,
            "path": "agentlib_mpc/modules/ml_model_simulator.py",
            "symbol": "missing-class-docstring",
            "message": "Missing class docstring",
            "message-id": "C0115"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.modules.ml_model_simulator",
            "obj": "MLModelSimulator",
            "line": 28,
            "column": 0,
            "path": "agentlib_mpc/modules/ml_model_simulator.py",
            "symbol": "missing-class-docstring",
            "message": "Missing class docstring",
            "message-id": "C0115"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.modules.ml_model_simulator",
            "obj": "MLModelSimulator.register_callbacks",
            "line": 39,
            "column": 4,
            "path": "agentlib_mpc/modules/ml_model_simulator.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.modules.ml_model_simulator",
            "obj": "",
            "line": 9,
            "column": 0,
            "path": "agentlib_mpc/modules/ml_model_simulator.py",
            "symbol": "wrong-import-order",
            "message": "third party import \"from pydantic import field_validator\" should be placed before \"from agentlib_mpc.models.casadi_ml_model import CasadiMLModel\"",
            "message-id": "C0411"
        },
        {
            "type": "error",
            "module": "agentlib_mpc.modules.mpc_full",
            "obj": "",
            "line": 3,
            "column": 0,
            "path": "agentlib_mpc/modules/mpc_full.py",
            "symbol": "import-error",
            "message": "Unable to import 'numpy'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "agentlib_mpc.modules.mpc_full",
            "obj": "",
            "line": 4,
            "column": 0,
            "path": "agentlib_mpc/modules/mpc_full.py",
            "symbol": "import-error",
            "message": "Unable to import 'pandas'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "agentlib_mpc.modules.mpc_full",
            "obj": "",
            "line": 5,
            "column": 0,
            "path": "agentlib_mpc/modules/mpc_full.py",
            "symbol": "import-error",
            "message": "Unable to import 'agentlib.core'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "agentlib_mpc.modules.mpc_full",
            "obj": "",
            "line": 8,
            "column": 0,
            "path": "agentlib_mpc/modules/mpc_full.py",
            "symbol": "import-error",
            "message": "Unable to import 'pydantic'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "agentlib_mpc.modules.mpc_full",
            "obj": "",
            "line": 9,
            "column": 0,
            "path": "agentlib_mpc/modules/mpc_full.py",
            "symbol": "import-error",
            "message": "Unable to import 'rapidfuzz'",
            "message-id": "E0401"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.modules.mpc_full",
            "obj": "MPC._init_optimization",
            "line": 60,
            "column": 12,
            "path": "agentlib_mpc/modules/mpc_full.py",
            "symbol": "invalid-name",
            "message": "Variable name \"v\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "warning",
            "module": "agentlib_mpc.modules.mpc_full",
            "obj": "MPC._init_optimization",
            "line": 56,
            "column": 8,
            "path": "agentlib_mpc/modules/mpc_full.py",
            "symbol": "attribute-defined-outside-init",
            "message": "Attribute '_lags_dict_seconds' defined outside __init__",
            "message-id": "W0201"
        },
        {
            "type": "warning",
            "module": "agentlib_mpc.modules.mpc_full",
            "obj": "MPC._init_optimization",
            "line": 80,
            "column": 8,
            "path": "agentlib_mpc/modules/mpc_full.py",
            "symbol": "attribute-defined-outside-init",
            "message": "Attribute 'history' defined outside __init__",
            "message-id": "W0201"
        },
        {
            "type": "warning",
            "module": "agentlib_mpc.modules.mpc_full",
            "obj": "MPC._after_config_update",
            "line": 122,
            "column": 8,
            "path": "agentlib_mpc/modules/mpc_full.py",
            "symbol": "attribute-defined-outside-init",
            "message": "Attribute '_internal_variables' defined outside __init__",
            "message-id": "W0201"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.modules.mpc_full",
            "obj": "",
            "line": 8,
            "column": 0,
            "path": "agentlib_mpc/modules/mpc_full.py",
            "symbol": "wrong-import-order",
            "message": "third party import \"from pydantic import Field, field_validator, FieldValidationInfo\" should be placed before \"from agentlib_mpc.data_structures import mpc_datamodels\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.modules.mpc_full",
            "obj": "",
            "line": 9,
            "column": 0,
            "path": "agentlib_mpc/modules/mpc_full.py",
            "symbol": "wrong-import-order",
            "message": "third party import \"from rapidfuzz import process, fuzz\" should be placed before \"from agentlib_mpc.data_structures import mpc_datamodels\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.modules.mpc_full",
            "obj": "",
            "line": 11,
            "column": 0,
            "path": "agentlib_mpc/modules/mpc_full.py",
            "symbol": "ungrouped-imports",
            "message": "Imports from package agentlib_mpc are not grouped",
            "message-id": "C0412"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.modules",
            "obj": "ModuleImport",
            "line": 11,
            "column": 0,
            "path": "agentlib_mpc/modules/__init__.py",
            "symbol": "missing-class-docstring",
            "message": "Missing class docstring",
            "message-id": "C0115"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.modules",
            "obj": "ModuleImport.import_class",
            "line": 16,
            "column": 4,
            "path": "agentlib_mpc/modules/__init__.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.modules.estimation.mhe",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/modules/estimation/mhe.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "fatal",
            "module": "agentlib_mpc.modules.estimation.mhe",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/modules/estimation/mhe.py",
            "symbol": "astroid-error",
            "message": "agentlib_mpc/modules/estimation/mhe.py: Fatal error while checking 'agentlib_mpc/modules/estimation/mhe.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-28-50.txt'.",
            "message-id": "F0002"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.modules.dmpc.coordinator",
            "obj": "",
            "line": 204,
            "column": 0,
            "path": "agentlib_mpc/modules/dmpc/coordinator.py",
            "symbol": "superfluous-parens",
            "message": "Unnecessary parens after 'not' keyword",
            "message-id": "C0325"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.modules.dmpc.coordinator",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/modules/dmpc/coordinator.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "fatal",
            "module": "agentlib_mpc.modules.dmpc.coordinator",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/modules/dmpc/coordinator.py",
            "symbol": "astroid-error",
            "message": "agentlib_mpc/modules/dmpc/coordinator.py: Fatal error while checking 'agentlib_mpc/modules/dmpc/coordinator.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-28-50.txt'.",
            "message-id": "F0002"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.modules.dmpc.employee",
            "obj": "",
            "line": 87,
            "column": 0,
            "path": "agentlib_mpc/modules/dmpc/employee.py",
            "symbol": "line-too-long",
            "message": "Line too long (140/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.modules.dmpc.employee",
            "obj": "",
            "line": 171,
            "column": 0,
            "path": "agentlib_mpc/modules/dmpc/employee.py",
            "symbol": "superfluous-parens",
            "message": "Unnecessary parens after 'not' keyword",
            "message-id": "C0325"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.modules.dmpc.employee",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/modules/dmpc/employee.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "error",
            "module": "agentlib_mpc.modules.dmpc.employee",
            "obj": "",
            "line": 5,
            "column": 0,
            "path": "agentlib_mpc/modules/dmpc/employee.py",
            "symbol": "import-error",
            "message": "Unable to import 'pydantic'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "agentlib_mpc.modules.dmpc.employee",
            "obj": "",
            "line": 7,
            "column": 0,
            "path": "agentlib_mpc/modules/dmpc/employee.py",
            "symbol": "import-error",
            "message": "Unable to import 'agentlib.core'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "agentlib_mpc.modules.dmpc.employee",
            "obj": "",
            "line": 14,
            "column": 0,
            "path": "agentlib_mpc/modules/dmpc/employee.py",
            "symbol": "import-error",
            "message": "Unable to import 'agentlib.core.datamodels'",
            "message-id": "E0401"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.modules.dmpc.employee",
            "obj": "MiniEmployeeConfig",
            "line": 22,
            "column": 0,
            "path": "agentlib_mpc/modules/dmpc/employee.py",
            "symbol": "missing-class-docstring",
            "message": "Missing class docstring",
            "message-id": "C0115"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.modules.dmpc.employee",
            "obj": "MiniEmployee",
            "line": 45,
            "column": 0,
            "path": "agentlib_mpc/modules/dmpc/employee.py",
            "symbol": "missing-class-docstring",
            "message": "Missing class docstring",
            "message-id": "C0115"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.modules.dmpc.employee",
            "obj": "MiniEmployee.registration_callback",
            "line": 174,
            "column": 8,
            "path": "agentlib_mpc/modules/dmpc/employee.py",
            "symbol": "invalid-name",
            "message": "Attribute name \"OptimOpts\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.modules.dmpc.employee",
            "obj": "MiniEmployee.process",
            "line": 53,
            "column": 4,
            "path": "agentlib_mpc/modules/dmpc/employee.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.modules.dmpc.employee",
            "obj": "MiniEmployee.register_callbacks",
            "line": 61,
            "column": 4,
            "path": "agentlib_mpc/modules/dmpc/employee.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "warning",
            "module": "agentlib_mpc.modules.dmpc.employee",
            "obj": "MiniEmployee.pre_computation_hook",
            "line": 89,
            "column": 8,
            "path": "agentlib_mpc/modules/dmpc/employee.py",
            "symbol": "unnecessary-pass",
            "message": "Unnecessary pass statement",
            "message-id": "W0107"
        },
        {
            "type": "warning",
            "module": "agentlib_mpc.modules.dmpc.employee",
            "obj": "MiniEmployee.get_new_measurement",
            "line": 121,
            "column": 8,
            "path": "agentlib_mpc/modules/dmpc/employee.py",
            "symbol": "unnecessary-ellipsis",
            "message": "Unnecessary ellipsis constant",
            "message-id": "W2301"
        },
        {
            "type": "warning",
            "module": "agentlib_mpc.modules.dmpc.employee",
            "obj": "MiniEmployee.shift_trajectories",
            "line": 158,
            "column": 8,
            "path": "agentlib_mpc/modules/dmpc/employee.py",
            "symbol": "unnecessary-ellipsis",
            "message": "Unnecessary ellipsis constant",
            "message-id": "W2301"
        },
        {
            "type": "warning",
            "module": "agentlib_mpc.modules.dmpc.employee",
            "obj": "MiniEmployee.registration_callback",
            "line": 174,
            "column": 8,
            "path": "agentlib_mpc/modules/dmpc/employee.py",
            "symbol": "attribute-defined-outside-init",
            "message": "Attribute 'OptimOpts' defined outside __init__",
            "message-id": "W0201"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.modules.dmpc.employee",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/modules/dmpc/employee.py",
            "symbol": "ungrouped-imports",
            "message": "Imports from package logging are not grouped",
            "message-id": "C0412"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.modules.dmpc.employee",
            "obj": "",
            "line": 2,
            "column": 0,
            "path": "agentlib_mpc/modules/dmpc/employee.py",
            "symbol": "ungrouped-imports",
            "message": "Imports from package dataclasses are not grouped",
            "message-id": "C0412"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.modules.dmpc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/modules/dmpc/__init__.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "fatal",
            "module": "agentlib_mpc.modules.dmpc.admm.admm_coordinated",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/modules/dmpc/admm/admm_coordinated.py",
            "symbol": "astroid-error",
            "message": "agentlib_mpc/modules/dmpc/admm/admm_coordinated.py: Fatal error while checking 'agentlib_mpc/modules/dmpc/admm/admm_coordinated.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-28-51.txt'.",
            "message-id": "F0002"
        },
        {
            "type": "fatal",
            "module": "agentlib_mpc.modules.dmpc.admm.admm",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/modules/dmpc/admm/admm.py",
            "symbol": "astroid-error",
            "message": "agentlib_mpc/modules/dmpc/admm/admm.py: Fatal error while checking 'agentlib_mpc/modules/dmpc/admm/admm.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-28-51.txt'.",
            "message-id": "F0002"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.modules.dmpc.admm.admm_coordinator",
            "obj": "",
            "line": 599,
            "column": 0,
            "path": "agentlib_mpc/modules/dmpc/admm/admm_coordinator.py",
            "symbol": "superfluous-parens",
            "message": "Unnecessary parens after 'not' keyword",
            "message-id": "C0325"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.modules.dmpc.admm.admm_coordinator",
            "obj": "",
            "line": 631,
            "column": 0,
            "path": "agentlib_mpc/modules/dmpc/admm/admm_coordinator.py",
            "symbol": "superfluous-parens",
            "message": "Unnecessary parens after 'not' keyword",
            "message-id": "C0325"
        },
        {
            "type": "fatal",
            "module": "agentlib_mpc.modules.dmpc.admm.admm_coordinator",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/modules/dmpc/admm/admm_coordinator.py",
            "symbol": "astroid-error",
            "message": "agentlib_mpc/modules/dmpc/admm/admm_coordinator.py: Fatal error while checking 'agentlib_mpc/modules/dmpc/admm/admm_coordinator.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-28-51.txt'.",
            "message-id": "F0002"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.modules.dmpc.admm.admm_coordinator",
            "obj": "",
            "line": 6,
            "column": 0,
            "path": "agentlib_mpc/modules/dmpc/admm/admm_coordinator.py",
            "symbol": "ungrouped-imports",
            "message": "Imports from package time are not grouped",
            "message-id": "C0412"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.modules.ml_model_training.data_reduction",
            "obj": "",
            "line": 97,
            "column": 0,
            "path": "agentlib_mpc/modules/ml_model_training/data_reduction.py",
            "symbol": "line-too-long",
            "message": "Line too long (122/100)",
            "message-id": "C0301"
        },
        {
            "type": "error",
            "module": "agentlib_mpc.modules.ml_model_training.data_reduction",
            "obj": "",
            "line": 3,
            "column": 0,
            "path": "agentlib_mpc/modules/ml_model_training/data_reduction.py",
            "symbol": "import-error",
            "message": "Unable to import 'numpy'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "agentlib_mpc.modules.ml_model_training.data_reduction",
            "obj": "",
            "line": 4,
            "column": 0,
            "path": "agentlib_mpc/modules/ml_model_training/data_reduction.py",
            "symbol": "import-error",
            "message": "Unable to import 'sklearn'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "agentlib_mpc.modules.ml_model_training.data_reduction",
            "obj": "",
            "line": 6,
            "column": 0,
            "path": "agentlib_mpc/modules/ml_model_training/data_reduction.py",
            "symbol": "import-error",
            "message": "Unable to import 'sklearn.gaussian_process.kernels'",
            "message-id": "E0401"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.modules.ml_model_training.data_reduction",
            "obj": "InducingPoints.reduce",
            "line": 24,
            "column": 4,
            "path": "agentlib_mpc/modules/ml_model_training/data_reduction.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.modules.ml_model_training.data_reduction",
            "obj": "NystroemReducer",
            "line": 33,
            "column": 0,
            "path": "agentlib_mpc/modules/ml_model_training/data_reduction.py",
            "symbol": "missing-class-docstring",
            "message": "Missing class docstring",
            "message-id": "C0115"
        },
        {
            "type": "warning",
            "module": "agentlib_mpc.modules.ml_model_training.data_reduction",
            "obj": "NystroemReducer.__init__",
            "line": 34,
            "column": 23,
            "path": "agentlib_mpc/modules/ml_model_training/data_reduction.py",
            "symbol": "redefined-outer-name",
            "message": "Redefining name 'n_components' from outer scope (line 59)",
            "message-id": "W0621"
        },
        {
            "type": "refactor",
            "module": "agentlib_mpc.modules.ml_model_training.data_reduction",
            "obj": "NystroemReducer.__init__",
            "line": 35,
            "column": 8,
            "path": "agentlib_mpc/modules/ml_model_training/data_reduction.py",
            "symbol": "super-with-arguments",
            "message": "Consider using Python 3 style super() without arguments",
            "message-id": "R1725"
        },
        {
            "type": "error",
            "module": "agentlib_mpc.modules.ml_model_training.data_reduction",
            "obj": "",
            "line": 56,
            "column": 4,
            "path": "agentlib_mpc/modules/ml_model_training/data_reduction.py",
            "symbol": "import-error",
            "message": "Unable to import 'sklearn.gaussian_process'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "agentlib_mpc.modules.ml_model_training.data_reduction",
            "obj": "",
            "line": 57,
            "column": 4,
            "path": "agentlib_mpc/modules/ml_model_training/data_reduction.py",
            "symbol": "import-error",
            "message": "Unable to import 'matplotlib.pyplot'",
            "message-id": "E0401"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.modules.ml_model_training.data_reduction",
            "obj": "",
            "line": 59,
            "column": 4,
            "path": "agentlib_mpc/modules/ml_model_training/data_reduction.py",
            "symbol": "invalid-name",
            "message": "Constant name \"n_components\" doesn't conform to UPPER_CASE naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.modules.ml_model_training.data_reduction",
            "obj": "f",
            "line": 61,
            "column": 4,
            "path": "agentlib_mpc/modules/ml_model_training/data_reduction.py",
            "symbol": "invalid-name",
            "message": "Function name \"f\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.modules.ml_model_training.data_reduction",
            "obj": "get_score",
            "line": 66,
            "column": 4,
            "path": "agentlib_mpc/modules/ml_model_training/data_reduction.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "warning",
            "module": "agentlib_mpc.modules.ml_model_training.data_reduction",
            "obj": "get_score",
            "line": 66,
            "column": 24,
            "path": "agentlib_mpc/modules/ml_model_training/data_reduction.py",
            "symbol": "redefined-outer-name",
            "message": "Redefining name 'x_test' from outer scope (line 83)",
            "message-id": "W0621"
        },
        {
            "type": "warning",
            "module": "agentlib_mpc.modules.ml_model_training.data_reduction",
            "obj": "get_score",
            "line": 66,
            "column": 32,
            "path": "agentlib_mpc/modules/ml_model_training/data_reduction.py",
            "symbol": "redefined-outer-name",
            "message": "Redefining name 'y_test' from outer scope (line 84)",
            "message-id": "W0621"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.modules.ml_model_training.data_reduction",
            "obj": "get_score",
            "line": 69,
            "column": 8,
            "path": "agentlib_mpc/modules/ml_model_training/data_reduction.py",
            "symbol": "invalid-name",
            "message": "Variable name \"s\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "refactor",
            "module": "agentlib_mpc.modules.ml_model_training.data_reduction",
            "obj": "",
            "line": 75,
            "column": 13,
            "path": "agentlib_mpc/modules/ml_model_training/data_reduction.py",
            "symbol": "use-list-literal",
            "message": "Consider using [] instead of list()",
            "message-id": "R1734"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.modules.ml_model_training.data_reduction",
            "obj": "",
            "line": 5,
            "column": 0,
            "path": "agentlib_mpc/modules/ml_model_training/data_reduction.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"from abc import ABC, abstractmethod\" should be placed before \"import numpy as np\"",
            "message-id": "C0411"
        },
        {
            "type": "error",
            "module": "agentlib_mpc.modules.ml_model_training.setpoint_generator",
            "obj": "",
            "line": 7,
            "column": 0,
            "path": "agentlib_mpc/modules/ml_model_training/setpoint_generator.py",
            "symbol": "import-error",
            "message": "Unable to import 'agentlib.core'",
            "message-id": "E0401"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.modules.ml_model_training.setpoint_generator",
            "obj": "SetPointGenerator.register_callbacks",
            "line": 42,
            "column": 4,
            "path": "agentlib_mpc/modules/ml_model_training/setpoint_generator.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.modules.ml_model_training.setpoint_generator",
            "obj": "SetPointGenerator.process",
            "line": 44,
            "column": 4,
            "path": "agentlib_mpc/modules/ml_model_training/setpoint_generator.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.modules.ml_model_training.ml_model_trainer",
            "obj": "",
            "line": 515,
            "column": 0,
            "path": "agentlib_mpc/modules/ml_model_training/ml_model_trainer.py",
            "symbol": "superfluous-parens",
            "message": "Unnecessary parens after '=' keyword",
            "message-id": "C0325"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.modules.ml_model_training.ml_model_trainer",
            "obj": "",
            "line": 723,
            "column": 0,
            "path": "agentlib_mpc/modules/ml_model_training/ml_model_trainer.py",
            "symbol": "line-too-long",
            "message": "Line too long (102/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.modules.ml_model_training.ml_model_trainer",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/modules/ml_model_training/ml_model_trainer.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "fatal",
            "module": "agentlib_mpc.modules.ml_model_training.ml_model_trainer",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/modules/ml_model_training/ml_model_trainer.py",
            "symbol": "astroid-error",
            "message": "agentlib_mpc/modules/ml_model_training/ml_model_trainer.py: Fatal error while checking 'agentlib_mpc/modules/ml_model_training/ml_model_trainer.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-28-51.txt'.",
            "message-id": "F0002"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.modules.InputPrediction.try_predictor",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/modules/InputPrediction/try_predictor.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "error",
            "module": "agentlib_mpc.modules.InputPrediction.try_predictor",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/modules/InputPrediction/try_predictor.py",
            "symbol": "import-error",
            "message": "Unable to import 'pandas'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "agentlib_mpc.modules.InputPrediction.try_predictor",
            "obj": "",
            "line": 2,
            "column": 0,
            "path": "agentlib_mpc/modules/InputPrediction/try_predictor.py",
            "symbol": "import-error",
            "message": "Unable to import 'pydantic'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "agentlib_mpc.modules.InputPrediction.try_predictor",
            "obj": "",
            "line": 3,
            "column": 0,
            "path": "agentlib_mpc/modules/InputPrediction/try_predictor.py",
            "symbol": "import-error",
            "message": "Unable to import 'agentlib.core'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "agentlib_mpc.modules.InputPrediction.try_predictor",
            "obj": "",
            "line": 4,
            "column": 0,
            "path": "agentlib_mpc/modules/InputPrediction/try_predictor.py",
            "symbol": "import-error",
            "message": "Unable to import 'agentlib.modules.utils.try_sensor'",
            "message-id": "E0401"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.modules.InputPrediction.try_predictor",
            "obj": "TRYPredictorConfig",
            "line": 7,
            "column": 0,
            "path": "agentlib_mpc/modules/InputPrediction/try_predictor.py",
            "symbol": "missing-class-docstring",
            "message": "Missing class docstring",
            "message-id": "C0115"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.modules.InputPrediction.try_predictor",
            "obj": "TRYPredictor",
            "line": 70,
            "column": 0,
            "path": "agentlib_mpc/modules/InputPrediction/try_predictor.py",
            "symbol": "missing-class-docstring",
            "message": "Missing class docstring",
            "message-id": "C0115"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.modules.InputPrediction.try_predictor",
            "obj": "TRYPredictor.process",
            "line": 74,
            "column": 4,
            "path": "agentlib_mpc/modules/InputPrediction/try_predictor.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.modules.InputPrediction.try_predictor",
            "obj": "TRYPredictor.send_prediction",
            "line": 80,
            "column": 4,
            "path": "agentlib_mpc/modules/InputPrediction/try_predictor.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.modules.InputPrediction.try_predictor",
            "obj": "TRYPredictor.send_measurement",
            "line": 87,
            "column": 4,
            "path": "agentlib_mpc/modules/InputPrediction/try_predictor.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "agentlib_mpc.modules.InputPrediction",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "agentlib_mpc/modules/InputPrediction/__init__.py",
            "symbol": "invalid-name",
            "message": "Module name \"InputPrediction\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "error",
            "module": "ci.test_examples",
            "obj": "",
            "line": 8,
            "column": 0,
            "path": "ci/test_examples.py",
            "symbol": "import-error",
            "message": "Unable to import 'pandas'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "ci.test_examples",
            "obj": "",
            "line": 9,
            "column": 0,
            "path": "ci/test_examples.py",
            "symbol": "import-error",
            "message": "Unable to import 'pytest'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "ci.test_examples",
            "obj": "",
            "line": 11,
            "column": 0,
            "path": "ci/test_examples.py",
            "symbol": "import-error",
            "message": "Unable to import 'agentlib.utils'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "ci.test_examples",
            "obj": "",
            "line": 12,
            "column": 0,
            "path": "ci/test_examples.py",
            "symbol": "import-error",
            "message": "Unable to import 'agentlib.utils.local_broadcast_broker'",
            "message-id": "E0401"
        },
        {
            "type": "warning",
            "module": "ci.test_examples",
            "obj": "TestExamples.test_mpc",
            "line": 60,
            "column": 8,
            "path": "ci/test_examples.py",
            "symbol": "pointless-string-statement",
            "message": "String statement has no effect",
            "message-id": "W0105"
        },
        {
            "type": "convention",
            "module": "ci.test_examples",
            "obj": "TestExamples.test_mixed_integer_mpc",
            "line": 68,
            "column": 4,
            "path": "ci/test_examples.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "ci.test_examples",
            "obj": "TestExamples.test_admm_local",
            "line": 76,
            "column": 4,
            "path": "ci/test_examples.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "ci.test_examples",
            "obj": "TestExamples.test_admm_coordinated",
            "line": 86,
            "column": 4,
            "path": "ci/test_examples.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "ci.test_examples",
            "obj": "TestExamples.test_exchange_admm",
            "line": 96,
            "column": 4,
            "path": "ci/test_examples.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "ci.test_examples",
            "obj": "TestExamples.test_admm_mp_broadcast",
            "line": 112,
            "column": 4,
            "path": "ci/test_examples.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "warning",
            "module": "ci.test_examples",
            "obj": "",
            "line": 5,
            "column": 0,
            "path": "ci/test_examples.py",
            "symbol": "unused-import",
            "message": "Unused import subprocess",
            "message-id": "W0611"
        },
        {
            "type": "error",
            "module": "test_serialized_ann",
            "obj": "",
            "line": 4,
            "column": 0,
            "path": "tests/test_serialized_ann.py",
            "symbol": "import-error",
            "message": "Unable to import 'numpy'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "test_serialized_ann",
            "obj": "",
            "line": 7,
            "column": 0,
            "path": "tests/test_serialized_ann.py",
            "symbol": "import-error",
            "message": "Unable to import 'keras'",
            "message-id": "E0401"
        },
        {
            "type": "convention",
            "module": "test_serialized_ann",
            "obj": "",
            "line": 5,
            "column": 0,
            "path": "tests/test_serialized_ann.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"import unittest\" should be placed before \"import numpy as np\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "test_serialized_ann",
            "obj": "",
            "line": 8,
            "column": 0,
            "path": "tests/test_serialized_ann.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"from pathlib import Path\" should be placed before \"import numpy as np\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "test_serialized_ann",
            "obj": "",
            "line": 13,
            "column": 0,
            "path": "tests/test_serialized_ann.py",
            "symbol": "wrong-import-order",
            "message": "third party import \"from fixtures.ann import ANNTrainer\" should be placed before \"from agentlib_mpc.data_structures import ml_model_datatypes\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "test_serialized_ann",
            "obj": "",
            "line": 14,
            "column": 0,
            "path": "tests/test_serialized_ann.py",
            "symbol": "wrong-import-order",
            "message": "third party import \"from fixtures.data_generator import DataGenerator\" should be placed before \"from agentlib_mpc.data_structures import ml_model_datatypes\"",
            "message-id": "C0411"
        },
        {
            "type": "error",
            "module": "test_casadi_ml_model",
            "obj": "",
            "line": 3,
            "column": 0,
            "path": "tests/test_casadi_ml_model.py",
            "symbol": "import-error",
            "message": "Unable to import 'pytest'",
            "message-id": "E0401"
        },
        {
            "type": "convention",
            "module": "test_casadi_ml_model",
            "obj": "CasadiMLTestConfig",
            "line": 9,
            "column": 0,
            "path": "tests/test_casadi_ml_model.py",
            "symbol": "missing-class-docstring",
            "message": "Missing class docstring",
            "message-id": "C0115"
        },
        {
            "type": "convention",
            "module": "test_casadi_ml_model",
            "obj": "CasadiMLTestModel",
            "line": 14,
            "column": 0,
            "path": "tests/test_casadi_ml_model.py",
            "symbol": "missing-class-docstring",
            "message": "Missing class docstring",
            "message-id": "C0115"
        },
        {
            "type": "convention",
            "module": "test_casadi_ml_model",
            "obj": "test_casadi_ml_model",
            "line": 23,
            "column": 0,
            "path": "tests/test_casadi_ml_model.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "test_admm",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/test_admm.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "error",
            "module": "test_admm",
            "obj": "",
            "line": 8,
            "column": 0,
            "path": "tests/test_admm.py",
            "symbol": "import-error",
            "message": "Unable to import 'numpy'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "test_admm",
            "obj": "",
            "line": 10,
            "column": 0,
            "path": "tests/test_admm.py",
            "symbol": "import-error",
            "message": "Unable to import 'agentlib.core'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "test_admm",
            "obj": "",
            "line": 11,
            "column": 0,
            "path": "tests/test_admm.py",
            "symbol": "import-error",
            "message": "Unable to import 'agentlib.utils.local_broadcast_broker'",
            "message-id": "E0401"
        },
        {
            "type": "convention",
            "module": "test_admm",
            "obj": "",
            "line": 22,
            "column": 0,
            "path": "tests/test_admm.py",
            "symbol": "invalid-name",
            "message": "Constant name \"a\" doesn't conform to UPPER_CASE naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "test_admm",
            "obj": "TestRTADMM",
            "line": 63,
            "column": 0,
            "path": "tests/test_admm.py",
            "symbol": "missing-class-docstring",
            "message": "Missing class docstring",
            "message-id": "C0115"
        },
        {
            "type": "convention",
            "module": "test_admm",
            "obj": "TestRTADMM.test_admm_init",
            "line": 74,
            "column": 4,
            "path": "tests/test_admm.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "warning",
            "module": "test_admm",
            "obj": "TestRTADMM.test_admm_init",
            "line": 76,
            "column": 8,
            "path": "tests/test_admm.py",
            "symbol": "unused-variable",
            "message": "Unused variable 'admm_module'",
            "message-id": "W0612"
        },
        {
            "type": "convention",
            "module": "test_admm",
            "obj": "TestRTADMM.test_comm",
            "line": 80,
            "column": 4,
            "path": "tests/test_admm.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "warning",
            "module": "test_admm",
            "obj": "TestRTADMM.test_comm",
            "line": 85,
            "column": 13,
            "path": "tests/test_admm.py",
            "symbol": "protected-access",
            "message": "Access to a protected member _start_executing_callbacks of a client class",
            "message-id": "W0212"
        },
        {
            "type": "warning",
            "module": "test_admm",
            "obj": "TestRTADMM.test_comm",
            "line": 86,
            "column": 13,
            "path": "tests/test_admm.py",
            "symbol": "protected-access",
            "message": "Access to a protected member _start_executing_callbacks of a client class",
            "message-id": "W0212"
        },
        {
            "type": "warning",
            "module": "test_admm",
            "obj": "TestRTADMM.test_comm",
            "line": 109,
            "column": 8,
            "path": "tests/test_admm.py",
            "symbol": "protected-access",
            "message": "Access to a protected member _solve_local_optimization of a client class",
            "message-id": "W0212"
        },
        {
            "type": "warning",
            "module": "test_admm",
            "obj": "TestRTADMM.test_comm",
            "line": 110,
            "column": 12,
            "path": "tests/test_admm.py",
            "symbol": "protected-access",
            "message": "Access to a protected member _solve_local_optimization_debug of a client class",
            "message-id": "W0212"
        },
        {
            "type": "warning",
            "module": "test_admm",
            "obj": "TestRTADMM.test_comm",
            "line": 112,
            "column": 8,
            "path": "tests/test_admm.py",
            "symbol": "protected-access",
            "message": "Access to a protected member _solve_local_optimization of a client class",
            "message-id": "W0212"
        },
        {
            "type": "warning",
            "module": "test_admm",
            "obj": "TestRTADMM.test_comm",
            "line": 113,
            "column": 12,
            "path": "tests/test_admm.py",
            "symbol": "protected-access",
            "message": "Access to a protected member _solve_local_optimization_debug of a client class",
            "message-id": "W0212"
        },
        {
            "type": "warning",
            "module": "test_admm",
            "obj": "TestRTADMM.test_comm",
            "line": 118,
            "column": 19,
            "path": "tests/test_admm.py",
            "symbol": "protected-access",
            "message": "Access to a protected member _admm_loop of a client class",
            "message-id": "W0212"
        },
        {
            "type": "warning",
            "module": "test_admm",
            "obj": "TestRTADMM.test_comm",
            "line": 123,
            "column": 19,
            "path": "tests/test_admm.py",
            "symbol": "protected-access",
            "message": "Access to a protected member _admm_loop of a client class",
            "message-id": "W0212"
        },
        {
            "type": "warning",
            "module": "test_admm",
            "obj": "TestRTADMM.test_comm",
            "line": 127,
            "column": 13,
            "path": "tests/test_admm.py",
            "symbol": "protected-access",
            "message": "Access to a protected member _process_realtime of a client class",
            "message-id": "W0212"
        },
        {
            "type": "warning",
            "module": "test_admm",
            "obj": "TestRTADMM.test_comm",
            "line": 128,
            "column": 13,
            "path": "tests/test_admm.py",
            "symbol": "protected-access",
            "message": "Access to a protected member _process_realtime of a client class",
            "message-id": "W0212"
        },
        {
            "type": "warning",
            "module": "test_admm",
            "obj": "TestRTADMM.test_comm",
            "line": 149,
            "column": 24,
            "path": "tests/test_admm.py",
            "symbol": "protected-access",
            "message": "Access to a protected member _admm_variables of a client class",
            "message-id": "W0212"
        },
        {
            "type": "warning",
            "module": "test_admm",
            "obj": "TestRTADMM.test_comm",
            "line": 150,
            "column": 24,
            "path": "tests/test_admm.py",
            "symbol": "protected-access",
            "message": "Access to a protected member _admm_variables of a client class",
            "message-id": "W0212"
        },
        {
            "type": "convention",
            "module": "test_admm",
            "obj": "TestRTADMM.new_receive",
            "line": 163,
            "column": 4,
            "path": "tests/test_admm.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "test_admm",
            "obj": "TestRTADMM.new_receive_2",
            "line": 167,
            "column": 4,
            "path": "tests/test_admm.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "warning",
            "module": "test_admm",
            "obj": "TestRTADMM.test_comm",
            "line": 88,
            "column": 8,
            "path": "tests/test_admm.py",
            "symbol": "attribute-defined-outside-init",
            "message": "Attribute 'admm_module1' defined outside __init__",
            "message-id": "W0201"
        },
        {
            "type": "warning",
            "module": "test_admm",
            "obj": "TestRTADMM.test_comm",
            "line": 89,
            "column": 8,
            "path": "tests/test_admm.py",
            "symbol": "attribute-defined-outside-init",
            "message": "Attribute 'admm_module2' defined outside __init__",
            "message-id": "W0201"
        },
        {
            "type": "warning",
            "module": "test_admm",
            "obj": "TestRTADMM.test_comm",
            "line": 92,
            "column": 8,
            "path": "tests/test_admm.py",
            "symbol": "attribute-defined-outside-init",
            "message": "Attribute 'counter' defined outside __init__",
            "message-id": "W0201"
        },
        {
            "type": "warning",
            "module": "test_admm",
            "obj": "TestRTADMM.test_comm",
            "line": 93,
            "column": 8,
            "path": "tests/test_admm.py",
            "symbol": "attribute-defined-outside-init",
            "message": "Attribute 'counter2' defined outside __init__",
            "message-id": "W0201"
        },
        {
            "type": "convention",
            "module": "test_casadi_backend",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/test_casadi_backend.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "error",
            "module": "test_casadi_backend",
            "obj": "",
            "line": 3,
            "column": 0,
            "path": "tests/test_casadi_backend.py",
            "symbol": "import-error",
            "message": "Unable to import 'casadi'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "test_casadi_backend",
            "obj": "",
            "line": 4,
            "column": 0,
            "path": "tests/test_casadi_backend.py",
            "symbol": "import-error",
            "message": "Unable to import 'pytest'",
            "message-id": "E0401"
        },
        {
            "type": "convention",
            "module": "test_casadi_backend",
            "obj": "var_ref",
            "line": 26,
            "column": 0,
            "path": "tests/test_casadi_backend.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "test_casadi_backend",
            "obj": "example_casadi_system",
            "line": 37,
            "column": 0,
            "path": "tests/test_casadi_backend.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "warning",
            "module": "test_casadi_backend",
            "obj": "example_casadi_system",
            "line": 37,
            "column": 48,
            "path": "tests/test_casadi_backend.py",
            "symbol": "redefined-outer-name",
            "message": "Redefining name 'var_ref' from outer scope (line 26)",
            "message-id": "W0621"
        },
        {
            "type": "convention",
            "module": "test_casadi_backend",
            "obj": "collocation_discretization",
            "line": 44,
            "column": 0,
            "path": "tests/test_casadi_backend.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "warning",
            "module": "test_casadi_backend",
            "obj": "collocation_discretization",
            "line": 44,
            "column": 31,
            "path": "tests/test_casadi_backend.py",
            "symbol": "redefined-outer-name",
            "message": "Redefining name 'example_casadi_system' from outer scope (line 37)",
            "message-id": "W0621"
        },
        {
            "type": "convention",
            "module": "test_casadi_backend",
            "obj": "example_backend",
            "line": 55,
            "column": 0,
            "path": "tests/test_casadi_backend.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "warning",
            "module": "test_casadi_backend",
            "obj": "example_backend",
            "line": 55,
            "column": 32,
            "path": "tests/test_casadi_backend.py",
            "symbol": "redefined-outer-name",
            "message": "Redefining name 'var_ref' from outer scope (line 26)",
            "message-id": "W0621"
        },
        {
            "type": "convention",
            "module": "test_casadi_backend",
            "obj": "example_backend",
            "line": 56,
            "column": 4,
            "path": "tests/test_casadi_backend.py",
            "symbol": "invalid-name",
            "message": "Variable name \"be\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "test_casadi_backend",
            "obj": "test_optimization_variable",
            "line": 61,
            "column": 0,
            "path": "tests/test_casadi_backend.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "warning",
            "module": "test_casadi_backend",
            "obj": "test_optimization_variable",
            "line": 68,
            "column": 8,
            "path": "tests/test_casadi_backend.py",
            "symbol": "unused-variable",
            "message": "Unused variable 'optimization_variable'",
            "message-id": "W0612"
        },
        {
            "type": "warning",
            "module": "test_casadi_backend",
            "obj": "test_optimization_variable",
            "line": 75,
            "column": 4,
            "path": "tests/test_casadi_backend.py",
            "symbol": "unused-variable",
            "message": "Unused variable 'optimization_variable_1'",
            "message-id": "W0612"
        },
        {
            "type": "warning",
            "module": "test_casadi_backend",
            "obj": "test_optimization_variable",
            "line": 90,
            "column": 8,
            "path": "tests/test_casadi_backend.py",
            "symbol": "unused-variable",
            "message": "Unused variable 'optimization_variable_3'",
            "message-id": "W0612"
        },
        {
            "type": "convention",
            "module": "test_casadi_backend",
            "obj": "test_system",
            "line": 97,
            "column": 0,
            "path": "tests/test_casadi_backend.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "warning",
            "module": "test_casadi_backend",
            "obj": "test_system",
            "line": 97,
            "column": 16,
            "path": "tests/test_casadi_backend.py",
            "symbol": "redefined-outer-name",
            "message": "Redefining name 'example_casadi_system' from outer scope (line 37)",
            "message-id": "W0621"
        },
        {
            "type": "convention",
            "module": "test_casadi_backend",
            "obj": "test_discretization",
            "line": 113,
            "column": 0,
            "path": "tests/test_casadi_backend.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "warning",
            "module": "test_casadi_backend",
            "obj": "test_discretization",
            "line": 114,
            "column": 4,
            "path": "tests/test_casadi_backend.py",
            "symbol": "redefined-outer-name",
            "message": "Redefining name 'collocation_discretization' from outer scope (line 44)",
            "message-id": "W0621"
        },
        {
            "type": "warning",
            "module": "test_casadi_backend",
            "obj": "test_discretization",
            "line": 114,
            "column": 51,
            "path": "tests/test_casadi_backend.py",
            "symbol": "redefined-outer-name",
            "message": "Redefining name 'example_casadi_system' from outer scope (line 37)",
            "message-id": "W0621"
        },
        {
            "type": "convention",
            "module": "test_casadi_backend",
            "obj": "test_add_opt",
            "line": 135,
            "column": 0,
            "path": "tests/test_casadi_backend.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "warning",
            "module": "test_casadi_backend",
            "obj": "test_add_opt",
            "line": 135,
            "column": 17,
            "path": "tests/test_casadi_backend.py",
            "symbol": "redefined-outer-name",
            "message": "Redefining name 'example_casadi_system' from outer scope (line 37)",
            "message-id": "W0621"
        },
        {
            "type": "convention",
            "module": "test_casadi_backend",
            "obj": "test_create_backend",
            "line": 154,
            "column": 0,
            "path": "tests/test_casadi_backend.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "warning",
            "module": "test_casadi_backend",
            "obj": "test_create_backend",
            "line": 154,
            "column": 24,
            "path": "tests/test_casadi_backend.py",
            "symbol": "redefined-outer-name",
            "message": "Redefining name 'example_backend' from outer scope (line 55)",
            "message-id": "W0621"
        },
        {
            "type": "convention",
            "module": "test_casadi_backend",
            "obj": "test_create_backend",
            "line": 155,
            "column": 4,
            "path": "tests/test_casadi_backend.py",
            "symbol": "invalid-name",
            "message": "Variable name \"be\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "warning",
            "module": "test_casadi_backend",
            "obj": "test_create_backend",
            "line": 159,
            "column": 13,
            "path": "tests/test_casadi_backend.py",
            "symbol": "protected-access",
            "message": "Access to a protected member _mpc_inputs_to_nlp_inputs of a client class",
            "message-id": "W0212"
        },
        {
            "type": "convention",
            "module": "test_serialized_linreg",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/test_serialized_linreg.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "error",
            "module": "test_serialized_linreg",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/test_serialized_linreg.py",
            "symbol": "import-error",
            "message": "Unable to import 'numpy'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "test_serialized_linreg",
            "obj": "",
            "line": 6,
            "column": 0,
            "path": "tests/test_serialized_linreg.py",
            "symbol": "import-error",
            "message": "Unable to import 'sklearn.linear_model'",
            "message-id": "E0401"
        },
        {
            "type": "convention",
            "module": "test_serialized_linreg",
            "obj": "",
            "line": 2,
            "column": 0,
            "path": "tests/test_serialized_linreg.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"import os\" should be placed before \"import numpy as np\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "test_serialized_linreg",
            "obj": "",
            "line": 3,
            "column": 0,
            "path": "tests/test_serialized_linreg.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"import unittest\" should be placed before \"import numpy as np\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "test_serialized_linreg",
            "obj": "",
            "line": 5,
            "column": 0,
            "path": "tests/test_serialized_linreg.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"from pathlib import Path\" should be placed before \"import numpy as np\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "test_serialized_linreg",
            "obj": "",
            "line": 11,
            "column": 0,
            "path": "tests/test_serialized_linreg.py",
            "symbol": "wrong-import-order",
            "message": "third party import \"from fixtures.linreg import LinRegTrainer\" should be placed before \"from agentlib_mpc.data_structures import ml_model_datatypes\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "test_serialized_linreg",
            "obj": "",
            "line": 12,
            "column": 0,
            "path": "tests/test_serialized_linreg.py",
            "symbol": "wrong-import-order",
            "message": "third party import \"from fixtures.data_generator import DataGenerator\" should be placed before \"from agentlib_mpc.data_structures import ml_model_datatypes\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "test_serialized_gpr",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/test_serialized_gpr.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "error",
            "module": "test_serialized_gpr",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/test_serialized_gpr.py",
            "symbol": "import-error",
            "message": "Unable to import 'numpy'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "test_serialized_gpr",
            "obj": "",
            "line": 6,
            "column": 0,
            "path": "tests/test_serialized_gpr.py",
            "symbol": "import-error",
            "message": "Unable to import 'sklearn.gaussian_process'",
            "message-id": "E0401"
        },
        {
            "type": "convention",
            "module": "test_serialized_gpr",
            "obj": "",
            "line": 2,
            "column": 0,
            "path": "tests/test_serialized_gpr.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"import os\" should be placed before \"import numpy as np\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "test_serialized_gpr",
            "obj": "",
            "line": 3,
            "column": 0,
            "path": "tests/test_serialized_gpr.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"import unittest\" should be placed before \"import numpy as np\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "test_serialized_gpr",
            "obj": "",
            "line": 5,
            "column": 0,
            "path": "tests/test_serialized_gpr.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"from pathlib import Path\" should be placed before \"import numpy as np\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "test_serialized_gpr",
            "obj": "",
            "line": 11,
            "column": 0,
            "path": "tests/test_serialized_gpr.py",
            "symbol": "wrong-import-order",
            "message": "third party import \"from fixtures.gpr import GPRTrainer\" should be placed before \"from agentlib_mpc.data_structures import ml_model_datatypes\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "test_serialized_gpr",
            "obj": "",
            "line": 12,
            "column": 0,
            "path": "tests/test_serialized_gpr.py",
            "symbol": "wrong-import-order",
            "message": "third party import \"from fixtures.data_generator import DataGenerator\" should be placed before \"from agentlib_mpc.data_structures import ml_model_datatypes\"",
            "message-id": "C0411"
        },
        {
            "type": "warning",
            "module": "test_serialized_gpr",
            "obj": "",
            "line": 10,
            "column": 0,
            "path": "tests/test_serialized_gpr.py",
            "symbol": "unused-import",
            "message": "Unused MLModels imported from agentlib_mpc.models.serialized_ml_model",
            "message-id": "W0611"
        },
        {
            "type": "convention",
            "module": "conftest",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/conftest.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "error",
            "module": "conftest",
            "obj": "",
            "line": 2,
            "column": 0,
            "path": "tests/conftest.py",
            "symbol": "import-error",
            "message": "Unable to import 'pytest'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "conftest",
            "obj": "",
            "line": 3,
            "column": 0,
            "path": "tests/conftest.py",
            "symbol": "import-error",
            "message": "Unable to import 'agentlib.utils'",
            "message-id": "E0401"
        },
        {
            "type": "convention",
            "module": "conftest",
            "obj": "model_type",
            "line": 7,
            "column": 0,
            "path": "tests/conftest.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "conftest",
            "obj": "example_casadi_model",
            "line": 13,
            "column": 0,
            "path": "tests/conftest.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "warning",
            "module": "conftest",
            "obj": "example_casadi_model",
            "line": 13,
            "column": 25,
            "path": "tests/conftest.py",
            "symbol": "redefined-outer-name",
            "message": "Redefining name 'model_type' from outer scope (line 7)",
            "message-id": "W0621"
        },
        {
            "type": "convention",
            "module": "test_mpc",
            "obj": "",
            "line": 176,
            "column": 0,
            "path": "tests/test_mpc.py",
            "symbol": "line-too-long",
            "message": "Line too long (108/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "test_mpc",
            "obj": "",
            "line": 187,
            "column": 0,
            "path": "tests/test_mpc.py",
            "symbol": "line-too-long",
            "message": "Line too long (127/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "test_mpc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/test_mpc.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "error",
            "module": "test_mpc",
            "obj": "",
            "line": 4,
            "column": 0,
            "path": "tests/test_mpc.py",
            "symbol": "import-error",
            "message": "Unable to import 'numpy'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "test_mpc",
            "obj": "",
            "line": 5,
            "column": 0,
            "path": "tests/test_mpc.py",
            "symbol": "import-error",
            "message": "Unable to import 'pandas'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "test_mpc",
            "obj": "",
            "line": 8,
            "column": 0,
            "path": "tests/test_mpc.py",
            "symbol": "import-error",
            "message": "Unable to import 'agentlib.core.environment'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "test_mpc",
            "obj": "",
            "line": 9,
            "column": 0,
            "path": "tests/test_mpc.py",
            "symbol": "import-error",
            "message": "Unable to import 'agentlib.core.agent'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "test_mpc",
            "obj": "",
            "line": 10,
            "column": 0,
            "path": "tests/test_mpc.py",
            "symbol": "import-error",
            "message": "Unable to import 'agentlib.core.errors'",
            "message-id": "E0401"
        },
        {
            "type": "convention",
            "module": "test_mpc",
            "obj": "",
            "line": 18,
            "column": 0,
            "path": "tests/test_mpc.py",
            "symbol": "invalid-name",
            "message": "Constant name \"a\" doesn't conform to UPPER_CASE naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "test_mpc",
            "obj": "TestSampling.test_sample_datetime",
            "line": 24,
            "column": 4,
            "path": "tests/test_mpc.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "test_mpc",
            "obj": "TestSampling.test_get_scalar",
            "line": 75,
            "column": 4,
            "path": "tests/test_mpc.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "test_mpc",
            "obj": "TestSampling.test_series",
            "line": 81,
            "column": 4,
            "path": "tests/test_mpc.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "test_mpc",
            "obj": "TestSampling.test_series",
            "line": 82,
            "column": 8,
            "path": "tests/test_mpc.py",
            "symbol": "invalid-name",
            "message": "Variable name \"sr\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "test_mpc",
            "obj": "TestSampling.test_list",
            "line": 94,
            "column": 4,
            "path": "tests/test_mpc.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "test_mpc",
            "obj": "TestSampling.test_previous_interpolation_method",
            "line": 105,
            "column": 4,
            "path": "tests/test_mpc.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "test_mpc",
            "obj": "TestCasadiMPC.test_CasadiMPC",
            "line": 152,
            "column": 4,
            "path": "tests/test_mpc.py",
            "symbol": "invalid-name",
            "message": "Method name \"test_CasadiMPC\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "warning",
            "module": "test_mpc",
            "obj": "TestCasadiMPC.test_CasadiMPC",
            "line": 158,
            "column": 14,
            "path": "tests/test_mpc.py",
            "symbol": "protected-access",
            "message": "Access to a protected member _modules of a client class",
            "message-id": "W0212"
        },
        {
            "type": "convention",
            "module": "test_mpc",
            "obj": "TestCasadiMPC.test_incomplete_config",
            "line": 166,
            "column": 4,
            "path": "tests/test_mpc.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "test_mpc",
            "obj": "TestCasadiMPC.test_bad_names",
            "line": 173,
            "column": 4,
            "path": "tests/test_mpc.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "test_mpc",
            "obj": "TestCasadiMPC.test_instance_setter",
            "line": 184,
            "column": 4,
            "path": "tests/test_mpc.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "test_mpc",
            "obj": "",
            "line": 6,
            "column": 0,
            "path": "tests/test_mpc.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"import pathlib\" should be placed before \"import numpy as np\"",
            "message-id": "C0411"
        },
        {
            "type": "warning",
            "module": "test_mpc",
            "obj": "",
            "line": 13,
            "column": 0,
            "path": "tests/test_mpc.py",
            "symbol": "unused-import",
            "message": "Unused OptimizationBackend imported from agentlib_mpc.optimization_backends.backend",
            "message-id": "W0611"
        },
        {
            "type": "convention",
            "module": "fixtures.gpr",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/gpr.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "error",
            "module": "fixtures.gpr",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/gpr.py",
            "symbol": "import-error",
            "message": "Unable to import 'sklearn.gaussian_process.kernels'",
            "message-id": "E0401"
        },
        {
            "type": "convention",
            "module": "fixtures.gpr",
            "obj": "GPRTrainer.fit_test_gpr",
            "line": 29,
            "column": 4,
            "path": "tests/fixtures/gpr.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "fixtures.data_generator",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/data_generator.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "error",
            "module": "fixtures.data_generator",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/data_generator.py",
            "symbol": "import-error",
            "message": "Unable to import 'pytest'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "fixtures.data_generator",
            "obj": "",
            "line": 3,
            "column": 0,
            "path": "tests/fixtures/data_generator.py",
            "symbol": "import-error",
            "message": "Unable to import 'numpy'",
            "message-id": "E0401"
        },
        {
            "type": "convention",
            "module": "fixtures.data_generator",
            "obj": "DataGenerator.evaluate_rosenbrock_function",
            "line": 30,
            "column": 8,
            "path": "tests/fixtures/data_generator.py",
            "symbol": "invalid-name",
            "message": "Variable name \"a\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "fixtures.data_generator",
            "obj": "DataGenerator.evaluate_rosenbrock_function",
            "line": 31,
            "column": 8,
            "path": "tests/fixtures/data_generator.py",
            "symbol": "invalid-name",
            "message": "Variable name \"b\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "fixtures.data_generator",
            "obj": "training_data",
            "line": 41,
            "column": 0,
            "path": "tests/fixtures/data_generator.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "fixtures.linreg",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/linreg.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "error",
            "module": "fixtures.linreg",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/linreg.py",
            "symbol": "import-error",
            "message": "Unable to import 'sklearn.linear_model'",
            "message-id": "E0401"
        },
        {
            "type": "convention",
            "module": "fixtures.linreg",
            "obj": "LinRegTrainer.fit_test_linreg",
            "line": 21,
            "column": 4,
            "path": "tests/fixtures/linreg.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "warning",
            "module": "fixtures.linreg",
            "obj": "",
            "line": 3,
            "column": 0,
            "path": "tests/fixtures/linreg.py",
            "symbol": "unused-import",
            "message": "Unused CustomGPR imported from agentlib_mpc.models.serialized_ml_model",
            "message-id": "W0611"
        },
        {
            "type": "convention",
            "module": "fixtures.casadi_test_model",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/casadi_test_model.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "fatal",
            "module": "fixtures.casadi_test_model",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/casadi_test_model.py",
            "symbol": "astroid-error",
            "message": "tests/fixtures/casadi_test_model.py: Fatal error while checking 'tests/fixtures/casadi_test_model.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-12-28-52.txt'.",
            "message-id": "F0002"
        },
        {
            "type": "convention",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "error",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "import-error",
            "message": "Unable to import 'keras'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "fixtures.ann",
            "obj": "",
            "line": 2,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "import-error",
            "message": "Unable to import 'numpy'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "fixtures.ann",
            "obj": "",
            "line": 3,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "import-error",
            "message": "Unable to import 'pytest'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "fixtures.ann",
            "obj": "",
            "line": 4,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "import-error",
            "message": "Unable to import 'keras'",
            "message-id": "E0401"
        },
        {
            "type": "convention",
            "module": "fixtures.ann",
            "obj": "example_ann",
            "line": 42,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "fixtures.ann",
            "obj": "example_serialized_ann",
            "line": 49,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "warning",
            "module": "fixtures.ann",
            "obj": "example_serialized_ann",
            "line": 49,
            "column": 27,
            "path": "tests/fixtures/ann.py",
            "symbol": "redefined-outer-name",
            "message": "Redefining name 'example_ann' from outer scope (line 42)",
            "message-id": "W0621"
        },
        {
            "type": "warning",
            "module": "fixtures.ann",
            "obj": "",
            "line": 2,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "unused-import",
            "message": "Unused numpy imported as np",
            "message-id": "W0611"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.physical.mixed_integer.mixed_integer_mpc:[0:150]\n==examples.one_room_mpc.physical.mixed_integer.mixed_integer_mpc_cia:[0:149]\nimport logging\nimport os\nfrom pathlib import Path\nfrom typing import List\n\nimport casadi as ca\n\nfrom agentlib_mpc.models.casadi_model import (\n    CasadiModel,\n    CasadiInput,\n    CasadiState,\n    CasadiParameter,\n    CasadiOutput,\n    CasadiModelConfig,\n)\nfrom agentlib.utils.multi_agent_system import LocalMASAgency\n\nlogger = logging.getLogger(__name__)\n\n\n# script variables\nub = 295.15\n\n# constants\nCOOLING = 1000\n\n\nclass MyCasadiModelConfig(CasadiModelConfig):\n    inputs: List[CasadiInput] = [\n        # controls\n        CasadiInput(\n            name=\"cooling_power\",\n            value=400,\n            unit=\"W\",\n            description=\"Air mass flow \" \"into zone\",\n        ),\n        CasadiInput(\n            name=\"cooler_on\",\n            value=1,\n            unit=\"-\",\n            description=\"On / off signal of mass flow.\",\n            lb=0,\n            ub=1,\n        ),\n        # disturbances\n        CasadiInput(\n            name=\"load\", value=150, unit=\"W\", description=\"Heat \" \"load into zone\"\n        ),\n        CasadiInput(\n            name=\"T_in\", value=290.15, unit=\"K\", description=\"Inflow air temperature\"\n        ),\n        # settings\n        CasadiInput(\n            name=\"T_upper\",\n            value=294.15,\n            unit=\"K\",\n            description=\"Upper boundary (soft) for T.\",\n        ),\n    ]\n\n    states: List[CasadiState] = [\n        # differential\n        CasadiState(\n            name=\"T\", value=293.15, unit=\"K\", description=\"Temperature of zone\"\n        ),\n        # algebraic\n        # slack variables\n        CasadiState(\n            name=\"T_slack\",\n            value=0,\n            unit=\"K\",\n            description=\"Slack variable of temperature of zone\",\n        ),\n    ]\n\n    parameters: List[CasadiParameter] = [\n        CasadiParameter(\n            name=\"cp\",\n            value=1000,\n            unit=\"J/kg*K\",\n            description=\"thermal capacity of the air\",\n        ),\n        CasadiParameter(\n            name=\"C\", value=100000, unit=\"J/K\", description=\"thermal capacity of zone\"\n        ),\n        CasadiParameter(\n            name=\"s_T\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for T in constraint function\",\n        ),\n        CasadiParameter(\n            name=\"r_cooling\",\n            value=1 / 5,\n            unit=\"-\",\n            description=\"Weight for mDot in objective function\",\n        ),\n        CasadiParameter(\n            name=\"cooler_mod_limit\",\n            value=200,\n            unit=\"W\",\n            description=\"Cooling power cannot modulate below this value\",\n        ),\n    ]\n    outputs: List[CasadiOutput] = [\n        CasadiOutput(name=\"T_out\", unit=\"K\", description=\"Temperature of zone\")\n    ]\n\n\nclass MyCasadiModel(CasadiModel):\n    config: MyCasadiModelConfig\n\n    def setup_system(self):\n        # Define ode\n        self.T.ode = (self.load - self.cooling_power) / self.C\n\n        # Define ae\n        self.T_out.alg = self.T  # math operation to get the symbolic variable\n\n        # Constraints: List[(lower bound, function, upper bound)]\n        self.constraints = [\n            # bigM reformulation\n            (-ca.inf, self.cooling_power - self.cooler_on * COOLING, 0),\n            (0, self.cooling_power - self.cooler_on * self.cooler_mod_limit, ca.inf),\n            # soft constraints\n            (0, self.T + self.T_slack, self.T_upper),\n        ]\n\n        # Objective function\n        objective = sum(\n            [\n                self.r_cooling * self.cooling_power,\n                self.s_T * self.T_slack**2,\n            ]\n        )\n\n        return objective\n\n\nENV_CONFIG = {\"rt\": False, \"factor\": 0.01, \"t_sample\": 60}\n\nAGENT_MPC = {\n    \"id\": \"myMPCAgent\",\n    \"modules\": [\n        {\"module_id\": \"Ag1Com\", \"type\": \"local_broadcast\"},\n        {\n            \"module_id\": \"myMPC\",\n            \"type\": \"agentlib_mpc.minlp_mpc\",\n            \"optimization_backend\": {",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.physical.simple_mpc:[0:136]\n==examples.one_room_mpc.physical.simple_mpc_multiple_shooting:[0:136]\nimport logging\nimport os\nfrom pathlib import Path\nfrom typing import List\n\nimport pandas as pd\n\nfrom agentlib_mpc.models.casadi_model import (\n    CasadiModel,\n    CasadiInput,\n    CasadiState,\n    CasadiParameter,\n    CasadiOutput,\n    CasadiModelConfig,\n)\nfrom agentlib.utils.multi_agent_system import LocalMASAgency\n\nfrom agentlib_mpc.utils.analysis import load_mpc_stats\nfrom agentlib_mpc.utils.plotting.interactive import show_dashboard\n\nlogger = logging.getLogger(__name__)\n\n# script variables\nub = 295.15\n\n\nclass MyCasadiModelConfig(CasadiModelConfig):\n    inputs: List[CasadiInput] = [\n        # controls\n        CasadiInput(\n            name=\"mDot\",\n            value=0.0225,\n            unit=\"m\u00b3/s\",\n            description=\"Air mass flow into zone\",\n        ),\n        # disturbances\n        CasadiInput(\n            name=\"load\", value=150, unit=\"W\", description=\"Heat load into zone\"\n        ),\n        CasadiInput(\n            name=\"T_in\", value=290.15, unit=\"K\", description=\"Inflow air temperature\"\n        ),\n        # settings\n        CasadiInput(\n            name=\"T_upper\",\n            value=294.15,\n            unit=\"K\",\n            description=\"Upper boundary (soft) for T.\",\n        ),\n    ]\n\n    states: List[CasadiState] = [\n        # differential\n        CasadiState(\n            name=\"T\", value=293.15, unit=\"K\", description=\"Temperature of zone\"\n        ),\n        # algebraic\n        # slack variables\n        CasadiState(\n            name=\"T_slack\",\n            value=0,\n            unit=\"K\",\n            description=\"Slack variable of temperature of zone\",\n        ),\n    ]\n\n    parameters: List[CasadiParameter] = [\n        CasadiParameter(\n            name=\"cp\",\n            value=1000,\n            unit=\"J/kg*K\",\n            description=\"thermal capacity of the air\",\n        ),\n        CasadiParameter(\n            name=\"C\", value=100000, unit=\"J/K\", description=\"thermal capacity of zone\"\n        ),\n        CasadiParameter(\n            name=\"s_T\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for T in constraint function\",\n        ),\n        CasadiParameter(\n            name=\"r_mDot\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for mDot in objective function\",\n        ),\n    ]\n    outputs: List[CasadiOutput] = [\n        CasadiOutput(name=\"T_out\", unit=\"K\", description=\"Temperature of zone\")\n    ]\n\n\nclass MyCasadiModel(CasadiModel):\n    config: MyCasadiModelConfig\n\n    def setup_system(self):\n        # Define ode\n        self.T.ode = (\n            self.cp * self.mDot / self.C * (self.T_in - self.T) + self.load / self.C\n        )\n\n        # Define ae\n        self.T_out.alg = self.T  # math operation to get the symbolic variable\n\n        # Constraints: List[(lower bound, function, upper bound)]\n        self.constraints = [\n            # soft constraints\n            (0, self.T + self.T_slack, self.T_upper),\n        ]\n\n        # Objective function\n        objective = sum(\n            [\n                self.r_mDot * self.mDot,\n                self.s_T * self.T_slack**2,\n            ]\n        )\n\n        return objective\n\n\nENV_CONFIG = {\"rt\": False, \"factor\": 0.01, \"t_sample\": 60}\n\nAGENT_MPC = {\n    \"id\": \"myMPCAgent\",\n    \"modules\": [\n        {\"module_id\": \"Ag1Com\", \"type\": \"local_broadcast\"},\n        {\n            \"module_id\": \"myMPC\",\n            \"type\": \"agentlib_mpc.mpc\",\n            \"optimization_backend\": {\n                \"type\": \"casadi\",\n                \"model\": {\"type\": {\"file\": __file__, \"class_name\": \"MyCasadiModel\"}},\n                \"discretization_options\": {",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.physical.simple_mpc:[168:271]\n==examples.one_room_mpc.physical.simple_mpc_time_dependent_obj:[190:293]\n            ],\n        },\n    ],\n}\nAGENT_SIM = {\n    \"id\": \"SimAgent\",\n    \"modules\": [\n        {\"module_id\": \"Ag1Com\", \"type\": \"local_broadcast\"},\n        {\n            \"module_id\": \"room\",\n            \"type\": \"simulator\",\n            \"model\": {\n                \"type\": {\"file\": __file__, \"class_name\": \"MyCasadiModel\"},\n                \"states\": [{\"name\": \"T\", \"value\": 298.16}],\n            },\n            \"t_sample\": 10,\n            \"update_inputs_on_callback\": False,\n            \"save_results\": True,\n            \"outputs\": [\n                {\"name\": \"T_out\", \"value\": 298, \"alias\": \"T\"},\n            ],\n            \"inputs\": [\n                {\"name\": \"mDot\", \"value\": 0.02, \"alias\": \"mDot\"},\n            ],\n        },\n    ],\n}\n\n\ndef run_example(\n    with_plots=True, log_level=logging.INFO, until=10000, with_dashboard=False\n):\n    # Change the working directly so that relative paths work\n    os.chdir(Path(__file__).parent)\n\n    # Set the log-level\n    logging.basicConfig(level=log_level)\n    mas = LocalMASAgency(\n        agent_configs=[AGENT_MPC, AGENT_SIM], env=ENV_CONFIG, variable_logging=False\n    )\n    mas.run(until=until)\n    try:\n        stats = load_mpc_stats(\"results/__mpc.csv\")\n    except Exception:\n        stats = None\n    results = mas.get_results(cleanup=False)\n    mpc_results = results[\"myMPCAgent\"][\"myMPC\"]\n    sim_res = results[\"SimAgent\"][\"room\"]\n\n    if with_dashboard:\n        show_dashboard(mpc_results, stats)\n\n    if with_plots:\n        plot(mpc_results, sim_res, until)\n\n    return results\n\n\ndef plot(mpc_results: pd.DataFrame, sim_res: pd.DataFrame, until: float):\n    import matplotlib.pyplot as plt\n    from agentlib_mpc.utils.plotting.mpc import plot_mpc\n\n    fig, ax = plt.subplots(2, 1, sharex=True)\n    t_sim = sim_res[\"T_out\"]\n    t_sample = t_sim.index[1] - t_sim.index[0]\n    aie_kh = (t_sim - ub).abs().sum() * t_sample / 3600\n    energy_cost_kWh = (\n        (sim_res[\"mDot\"] * (sim_res[\"T_out\"] - sim_res[\"T_in\"])).sum()\n        * t_sample\n        * 1\n        / 3600\n    )  # cp is 1\n    print(f\"Absoulute integral error: {aie_kh} Kh.\")\n    print(f\"Cooling energy used: {energy_cost_kWh} kWh.\")\n\n    plot_mpc(\n        series=mpc_results[\"variable\"][\"T\"] - 273.15,\n        ax=ax[0],\n        plot_actual_values=True,\n        plot_predictions=True,\n    )\n    ax[0].axhline(ub - 273.15, color=\"grey\", linestyle=\"--\", label=\"upper boundary\")\n    plot_mpc(\n        series=mpc_results[\"variable\"][\"mDot\"],\n        ax=ax[1],\n        plot_actual_values=True,\n        plot_predictions=True,\n    )\n\n    ax[1].legend()\n    ax[0].legend()\n    ax[0].set_ylabel(\"$T_{room}$ / \u00b0C\")\n    ax[1].set_ylabel(\"$\\dot{m}_{air}$ / kg/s\")\n    ax[1].set_xlabel(\"simulation time / s\")\n    ax[1].set_ylim([0, 0.06])\n    ax[1].set_xlim([0, until])\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    run_example(\n        with_plots=True, with_dashboard=True, until=7200, log_level=logging.INFO\n    )",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.ann.model:[0:99]\n==examples.one_room_mpc.gpr.model:[0:99]\nfrom typing import List\n\nfrom agentlib_mpc.models.casadi_model import (\n    CasadiModelConfig,\n    CasadiInput,\n    CasadiState,\n    CasadiParameter,\n    CasadiOutput,\n    CasadiModel,\n)\nfrom agentlib_mpc.models.casadi_ml_model import CasadiMLModel, CasadiMLModelConfig\n\n\nclass PhysicalModelConfig(CasadiModelConfig):\n    inputs: List[CasadiInput] = [\n        # controls\n        CasadiInput(\n            name=\"mDot\", value=0.0225, unit=\"K\", description=\"Air mass flow into zone\"\n        ),\n        # disturbances\n        CasadiInput(\n            name=\"load\", value=150, unit=\"W\", description=\"Heat load into zone\"\n        ),\n        CasadiInput(\n            name=\"T_in\", value=290.15, unit=\"K\", description=\"Inflow air temperature\"\n        ),\n        # settings\n        CasadiInput(\n            name=\"T_upper\",\n            value=294.15,\n            unit=\"K\",\n            description=\"Upper boundary (soft) for T.\",\n        ),\n    ]\n\n    states: List[CasadiState] = [\n        # differential\n        CasadiState(\n            name=\"T\", value=293.15, unit=\"K\", description=\"Temperature of zone\"\n        ),\n        # algebraic\n        # slack variables\n        CasadiState(\n            name=\"T_slack\",\n            value=0,\n            unit=\"K\",\n            description=\"Slack variable of temperature of zone\",\n        ),\n    ]\n\n    parameters: List[CasadiParameter] = [\n        CasadiParameter(\n            name=\"cp\",\n            value=1000,\n            unit=\"J/kg*K\",\n            description=\"thermal capacity of the air\",\n        ),\n        CasadiParameter(\n            name=\"C\", value=100000, unit=\"J/K\", description=\"thermal capacity of zone\"\n        ),\n        CasadiParameter(\n            name=\"s_T\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for T in constraint function\",\n        ),\n        CasadiParameter(\n            name=\"r_mDot\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for mDot in objective function\",\n        ),\n    ]\n    outputs: List[CasadiOutput] = [\n        CasadiOutput(name=\"T_out\", unit=\"K\", description=\"Temperature of zone\")\n    ]\n\n\nclass PhysicalModel(CasadiModel):\n    config: PhysicalModelConfig\n\n    def setup_system(self):\n        # Define ode\n        self.T.ode = (\n            self.cp * self.mDot / self.C * (self.T_in - self.T) + self.load / self.C\n        )\n\n        # Define ae\n        self.T_out.alg = self.T  # math operation to get the symbolic variable\n\n        # Constraints: List[(lower bound, function, upper bound)]\n        self.constraints = [\n            # soft constraints\n            (0, self.T + self.T_slack, self.T_upper),\n        ]\n\n        # Objective function\n        objective = sum(\n            [",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.physical.simple_mpc_multiple_shooting:[38:135]\n==examples.one_room_mpc.physical.with_change_control_penalty:[30:127]\n        ),\n        CasadiInput(\n            name=\"T_in\", value=290.15, unit=\"K\", description=\"Inflow air temperature\"\n        ),\n        # settings\n        CasadiInput(\n            name=\"T_upper\",\n            value=294.15,\n            unit=\"K\",\n            description=\"Upper boundary (soft) for T.\",\n        ),\n    ]\n\n    states: List[CasadiState] = [\n        # differential\n        CasadiState(\n            name=\"T\", value=293.15, unit=\"K\", description=\"Temperature of zone\"\n        ),\n        # algebraic\n        # slack variables\n        CasadiState(\n            name=\"T_slack\",\n            value=0,\n            unit=\"K\",\n            description=\"Slack variable of temperature of zone\",\n        ),\n    ]\n\n    parameters: List[CasadiParameter] = [\n        CasadiParameter(\n            name=\"cp\",\n            value=1000,\n            unit=\"J/kg*K\",\n            description=\"thermal capacity of the air\",\n        ),\n        CasadiParameter(\n            name=\"C\", value=100000, unit=\"J/K\", description=\"thermal capacity of zone\"\n        ),\n        CasadiParameter(\n            name=\"s_T\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for T in constraint function\",\n        ),\n        CasadiParameter(\n            name=\"r_mDot\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for mDot in objective function\",\n        ),\n    ]\n    outputs: List[CasadiOutput] = [\n        CasadiOutput(name=\"T_out\", unit=\"K\", description=\"Temperature of zone\")\n    ]\n\n\nclass MyCasadiModel(CasadiModel):\n    config: MyCasadiModelConfig\n\n    def setup_system(self):\n        # Define ode\n        self.T.ode = (\n            self.cp * self.mDot / self.C * (self.T_in - self.T) + self.load / self.C\n        )\n\n        # Define ae\n        self.T_out.alg = self.T  # math operation to get the symbolic variable\n\n        # Constraints: List[(lower bound, function, upper bound)]\n        self.constraints = [\n            # soft constraints\n            (0, self.T + self.T_slack, self.T_upper),\n        ]\n\n        # Objective function\n        objective = sum(\n            [\n                self.r_mDot * self.mDot,\n                self.s_T * self.T_slack**2,\n            ]\n        )\n\n        return objective\n\n\nENV_CONFIG = {\"rt\": False, \"factor\": 0.01, \"t_sample\": 60}\n\nAGENT_MPC = {\n    \"id\": \"myMPCAgent\",\n    \"modules\": [\n        {\"module_id\": \"Ag1Com\", \"type\": \"local_broadcast\"},\n        {\n            \"module_id\": \"myMPC\",\n            \"type\": \"agentlib_mpc.mpc\",\n            \"optimization_backend\": {\n                \"type\": \"casadi\",\n                \"model\": {\"type\": {\"file\": __file__, \"class_name\": \"MyCasadiModel\"}},",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.ann.simple_mpc_nn:[7:94]\n==examples.one_room_mpc.gpr.simple_mpc_gpr:[9:98]\nlogger = logging.getLogger(__name__)\n\n# script variables\nub = 295.15\n\nENV_CONFIG = {\"rt\": False, \"factor\": 0.01, \"t_sample\": 60}\n\n\ndef agent_configs(ml_model_path: str) -> list[dict]:\n    agent_mpc = {\n        \"id\": \"myMPCAgent\",\n        \"modules\": [\n            {\"module_id\": \"Ag1Com\", \"type\": \"local_broadcast\"},\n            {\n                \"module_id\": \"myMPC\",\n                \"type\": \"agentlib_mpc.mpc\",\n                \"optimization_backend\": {\n                    \"type\": \"casadi_ml\",\n                    \"model\": {\n                        \"type\": {\n                            \"file\": \"model.py\",\n                            \"class_name\": \"DataDrivenModel\",\n                        },\n                        \"ml_model_sources\": [ml_model_path],\n                    },\n                    \"discretization_options\": {\n                        \"method\": \"multiple_shooting\",\n                    },\n                    \"results_file\": \"results//opt.csv\",\n                    \"overwrite_result_file\": True,\n                    \"solver\": {\"name\": \"ipopt\", \"options\": {\"ipopt.print_level\": 0}},\n                },\n                \"time_step\": 300,\n                \"prediction_horizon\": 15,\n                \"parameters\": [\n                    {\"name\": \"s_T\", \"value\": 3},\n                    {\"name\": \"r_mDot\", \"value\": 1},\n                ],\n                \"inputs\": [\n                    {\"name\": \"T_in\", \"value\": 290.15},\n                    {\"name\": \"load\", \"value\": 150},\n                    {\"name\": \"T_upper\", \"value\": ub},\n                ],\n                \"controls\": [{\"name\": \"mDot\", \"value\": 0.02, \"ub\": 0.05, \"lb\": 0}],\n                \"states\": [{\"name\": \"T\", \"value\": 298.16, \"ub\": 303.15, \"lb\": 288.15}],\n            },\n        ],\n    }\n    agent_sim = {\n        \"id\": \"SimAgent\",\n        \"modules\": [\n            {\"module_id\": \"Ag1Com\", \"type\": \"local_broadcast\"},\n            {\n                \"module_id\": \"room\",\n                \"type\": \"simulator\",\n                \"model\": {\n                    \"type\": {\n                        \"file\": \"model.py\",\n                        \"class_name\": \"PhysicalModel\",\n                    },\n                    \"states\": [{\"name\": \"T\", \"value\": 298.16}],\n                },\n                \"t_sample\": 10,\n                \"save_results\": True,\n                \"update_inputs_on_callback\": False,\n                \"outputs\": [\n                    {\"name\": \"T_out\", \"value\": 298, \"alias\": \"T\"},\n                ],\n                \"inputs\": [\n                    {\"name\": \"mDot\", \"value\": 0.02, \"alias\": \"mDot\"},\n                ],\n            },\n        ],\n    }\n    return [agent_mpc, agent_sim]\n\n\ndef run_example(with_plots=True, log_level=logging.INFO, until=8000, testing=False):\n    # Change the working directory so that relative paths work\n    script_dir = os.path.abspath(os.path.dirname(__file__))\n    os.chdir(script_dir)\n\n    if script_dir not in sys.path:\n        sys.path.insert(0, script_dir)\n\n    logging.basicConfig(level=log_level)\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.gpr.model:[22:196]\n==examples.one_room_mpc.linreg.model:[22:196]\n        ),\n        CasadiInput(\n            name=\"T_in\", value=290.15, unit=\"K\", description=\"Inflow air temperature\"\n        ),\n        # settings\n        CasadiInput(\n            name=\"T_upper\",\n            value=294.15,\n            unit=\"K\",\n            description=\"Upper boundary (soft) for T.\",\n        ),\n    ]\n\n    states: List[CasadiState] = [\n        # differential\n        CasadiState(\n            name=\"T\", value=293.15, unit=\"K\", description=\"Temperature of zone\"\n        ),\n        # algebraic\n        # slack variables\n        CasadiState(\n            name=\"T_slack\",\n            value=0,\n            unit=\"K\",\n            description=\"Slack variable of temperature of zone\",\n        ),\n    ]\n\n    parameters: List[CasadiParameter] = [\n        CasadiParameter(\n            name=\"cp\",\n            value=1000,\n            unit=\"J/kg*K\",\n            description=\"thermal capacity of the air\",\n        ),\n        CasadiParameter(\n            name=\"C\", value=100000, unit=\"J/K\", description=\"thermal capacity of zone\"\n        ),\n        CasadiParameter(\n            name=\"s_T\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for T in constraint function\",\n        ),\n        CasadiParameter(\n            name=\"r_mDot\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for mDot in objective function\",\n        ),\n    ]\n    outputs: List[CasadiOutput] = [\n        CasadiOutput(name=\"T_out\", unit=\"K\", description=\"Temperature of zone\")\n    ]\n\n\nclass PhysicalModel(CasadiModel):\n    config: PhysicalModelConfig\n\n    def setup_system(self):\n        # Define ode\n        self.T.ode = (\n            self.cp * self.mDot / self.C * (self.T_in - self.T) + self.load / self.C\n        )\n\n        # Define ae\n        self.T_out.alg = self.T  # math operation to get the symbolic variable\n\n        # Constraints: List[(lower bound, function, upper bound)]\n        self.constraints = [\n            # soft constraints\n            (0, self.T + self.T_slack, self.T_upper),\n        ]\n\n        # Objective function\n        objective = sum(\n            [\n                0 * self.r_mDot * self.mDot,\n                self.s_T * self.T_slack**2,\n            ]\n        )\n        return objective\n\n\nclass DataDrivenModelConfig(CasadiMLModelConfig, PhysicalModelConfig):\n    # use the same variables as physical,  have some attributes only the ANN Config has\n    inputs: List[CasadiInput] = [\n        # controls\n        CasadiInput(\n            name=\"mDot\", value=0.0225, unit=\"K\", description=\"Air mass flow into zone\"\n        ),\n        # disturbances\n        CasadiInput(\n            name=\"load\", value=10, unit=\"W\", description=\"Heat \" \"load into zone\"\n        ),\n        CasadiInput(\n            name=\"T_in\", value=290.15, unit=\"K\", description=\"Inflow air temperature\"\n        ),\n        # settings\n        CasadiInput(\n            name=\"T_upper\",\n            value=294.15,\n            unit=\"K\",\n            description=\"Upper boundary (soft) for T.\",\n        ),\n    ]\n\n    states: List[CasadiState] = [\n        # differential\n        CasadiState(\n            name=\"T\", value=293.15, unit=\"K\", description=\"Temperature of zone\"\n        ),\n        # algebraic\n        # slack variables\n        CasadiState(\n            name=\"T_slack\",\n            value=0,\n            unit=\"K\",\n            description=\"Slack variable of temperature of zone\",\n        ),\n    ]\n\n    parameters: List[CasadiParameter] = [\n        CasadiParameter(\n            name=\"cp\",\n            value=1000,\n            unit=\"J/kg*K\",\n            description=\"thermal capacity of the air\",\n        ),\n        CasadiParameter(\n            name=\"C\", value=100000, unit=\"J/K\", description=\"thermal capacity of zone\"\n        ),\n        CasadiParameter(\n            name=\"s_T\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for T in constraint function\",\n        ),\n        CasadiParameter(\n            name=\"r_mDot\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for mDot in objective function\",\n        ),\n    ]\n    outputs: List[CasadiOutput] = [\n        CasadiOutput(name=\"T_out\", unit=\"K\", description=\"Temperature of zone\")\n    ]\n\n\nclass DataDrivenModel(CasadiMLModel):\n    config: DataDrivenModelConfig\n\n    def setup_system(self):\n        # ode\n\n        # Define ae\n        self.T_out.alg = self.T  # math operation to get the symbolic variable\n\n        # Constraints: List[(lower bound, function, upper bound)]\n        self.constraints = [\n            # soft constraints\n            (0, self.T + self.T_slack, self.T_upper),\n        ]\n\n        # Objective function\n        objective = sum(\n            [\n                self.r_mDot * self.mDot,\n                self.s_T * self.T_slack**2,\n            ]\n        )\n\n        return objective",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.physical.simple_mpc_multiple_shooting:[5:88]\n==examples.one_room_mpc.physical.simple_mpc_time_dependent_obj:[6:89]\nimport pandas as pd\n\nfrom agentlib_mpc.models.casadi_model import (\n    CasadiModel,\n    CasadiInput,\n    CasadiState,\n    CasadiParameter,\n    CasadiOutput,\n    CasadiModelConfig,\n)\nfrom agentlib.utils.multi_agent_system import LocalMASAgency\n\nfrom agentlib_mpc.utils.analysis import load_mpc_stats\nfrom agentlib_mpc.utils.plotting.interactive import show_dashboard\n\nlogger = logging.getLogger(__name__)\n\n# script variables\nub = 295.15\n\n\nclass MyCasadiModelConfig(CasadiModelConfig):\n    inputs: List[CasadiInput] = [\n        # controls\n        CasadiInput(\n            name=\"mDot\",\n            value=0.0225,\n            unit=\"m\u00b3/s\",\n            description=\"Air mass flow into zone\",\n        ),\n        # disturbances\n        CasadiInput(\n            name=\"load\", value=150, unit=\"W\", description=\"Heat load into zone\"\n        ),\n        CasadiInput(\n            name=\"T_in\", value=290.15, unit=\"K\", description=\"Inflow air temperature\"\n        ),\n        # settings\n        CasadiInput(\n            name=\"T_upper\",\n            value=294.15,\n            unit=\"K\",\n            description=\"Upper boundary (soft) for T.\",\n        ),\n    ]\n\n    states: List[CasadiState] = [\n        # differential\n        CasadiState(\n            name=\"T\", value=293.15, unit=\"K\", description=\"Temperature of zone\"\n        ),\n        # algebraic\n        # slack variables\n        CasadiState(\n            name=\"T_slack\",\n            value=0,\n            unit=\"K\",\n            description=\"Slack variable of temperature of zone\",\n        ),\n    ]\n\n    parameters: List[CasadiParameter] = [\n        CasadiParameter(\n            name=\"cp\",\n            value=1000,\n            unit=\"J/kg*K\",\n            description=\"thermal capacity of the air\",\n        ),\n        CasadiParameter(\n            name=\"C\", value=100000, unit=\"J/K\", description=\"thermal capacity of zone\"\n        ),\n        CasadiParameter(\n            name=\"s_T\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for T in constraint function\",\n        ),\n        CasadiParameter(\n            name=\"r_mDot\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for mDot in objective function\",\n        ),",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.gpr.training_gpr:[109:180]\n==examples.one_room_mpc.linreg.training_linreg:[103:174]\n            },\n            {\"type\": \"local\", \"subscriptions\": [\"Simulator\", \"PID\"]},\n        ],\n    }\n\n    # sample rate is at least 1, and maximum 10\n    t_sample_sim = min(max(1, int(step_size) // 30), 10)\n    simulator_config = {\n        \"id\": \"Simulator\",\n        \"modules\": [\n            {\n                \"module_id\": \"simulator\",\n                \"type\": \"simulator\",\n                \"model\": {\n                    \"type\": {\n                        \"file\": model.__file__,\n                        \"class_name\": model.PhysicalModel.__name__,\n                    },\n                },\n                \"t_sample\": t_sample_sim,\n                \"save_results\": plot_results,\n                \"result_filename\": \"results//simulation_data.csv\",\n                \"result_causalities\": [\"local\", \"input\", \"output\"],\n                \"overwrite_result_file\": False,\n                \"inputs\": [\n                    {\"name\": \"mDot\", \"value\": 0.0225, \"source\": \"PID\"},\n                    {\"name\": \"load\", \"value\": 30},\n                    {\"name\": \"T_in\", \"value\": 290.15},\n                ],\n                \"states\": [{\"name\": \"T\", \"shared\": True}],\n            },\n            {\n                \"module_id\": \"input_generator\",\n                \"type\": \"simulator\",\n                \"t_sample\": step_size * 10,\n                \"model\": {\"type\": {\"file\": __file__, \"class_name\": \"InputGenerator\"}},\n                \"outputs\": [\n                    # {\"name\": \"mDot\"},\n                    {\"name\": \"load\", \"ub\": 150, \"lb\": 150},\n                    {\"name\": \"T_in\"},\n                ],\n            },\n            {\"type\": \"local\", \"subscriptions\": [\"PID\"]},\n        ],\n    }\n\n    pid_controller = {\n        \"id\": \"PID\",\n        \"modules\": [\n            {\n                \"module_id\": \"pid\",\n                \"type\": \"pid\",\n                \"setpoint\": {\n                    \"name\": \"setpoint\",\n                    \"value\": 273.15 + 22,\n                    \"alias\": \"T_set\",\n                },\n                \"Kp\": 0.01,\n                \"Ti\": 1,\n                \"input\": {\"name\": \"u\", \"value\": 0, \"alias\": \"T\"},\n                \"output\": {\"name\": \"y\", \"value\": 0, \"alias\": \"mDot\", \"shared\": \"True\"},\n                \"lb\": 0,\n                \"ub\": 0.05,\n                \"reverse\": True,\n            },\n            {\n                \"module_id\": \"set_points\",\n                \"type\": \"agentlib_mpc.set_point_generator\",\n                \"interval\": 60 * 10,\n                \"target_variable\": {\"name\": \"T_set\", \"alias\": \"T_set\"},\n            },",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.physical.simple_mpc:[138:210]\n==examples.one_room_mpc.physical.simple_mpc_multiple_shooting:[138:210]\n                },\n                \"solver\": {\n                    \"name\": \"fatrop\",\n                },\n                \"results_file\": \"results//mpc.csv\",\n                \"save_results\": True,\n                \"overwrite_result_file\": True,\n            },\n            \"time_step\": 300,\n            \"prediction_horizon\": 15,\n            \"parameters\": [\n                {\"name\": \"s_T\", \"value\": 3},\n                {\"name\": \"r_mDot\", \"value\": 1},\n            ],\n            \"inputs\": [\n                {\"name\": \"T_in\", \"value\": 290.15},\n                {\"name\": \"load\", \"value\": 150},\n                {\"name\": \"T_upper\", \"value\": ub},\n            ],\n            \"controls\": [{\"name\": \"mDot\", \"value\": 0.02, \"ub\": 0.05, \"lb\": 0}],\n            \"outputs\": [{\"name\": \"T_out\"}],\n            \"states\": [\n                {\n                    \"name\": \"T\",\n                    \"value\": 298.16,\n                    \"ub\": 303.15,\n                    \"lb\": 288.15,\n                    \"alias\": \"T\",\n                    \"source\": \"SimAgent\",\n                }\n            ],\n        },\n    ],\n}\nAGENT_SIM = {\n    \"id\": \"SimAgent\",\n    \"modules\": [\n        {\"module_id\": \"Ag1Com\", \"type\": \"local_broadcast\"},\n        {\n            \"module_id\": \"room\",\n            \"type\": \"simulator\",\n            \"model\": {\n                \"type\": {\"file\": __file__, \"class_name\": \"MyCasadiModel\"},\n                \"states\": [{\"name\": \"T\", \"value\": 298.16}],\n            },\n            \"t_sample\": 10,\n            \"update_inputs_on_callback\": False,\n            \"save_results\": True,\n            \"outputs\": [\n                {\"name\": \"T_out\", \"value\": 298, \"alias\": \"T\"},\n            ],\n            \"inputs\": [\n                {\"name\": \"mDot\", \"value\": 0.02, \"alias\": \"mDot\"},\n            ],\n        },\n    ],\n}\n\n\ndef run_example(\n    with_plots=True, log_level=logging.INFO, until=10000, with_dashboard=False\n):\n    # Change the working directly so that relative paths work\n    os.chdir(Path(__file__).parent)\n\n    # Set the log-level\n    logging.basicConfig(level=log_level)\n    mas = LocalMASAgency(\n        agent_configs=[AGENT_MPC, AGENT_SIM], env=ENV_CONFIG, variable_logging=False\n    )\n    mas.run(until=until)\n    try:",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==agentlib_mpc.optimization_backends.casadi_.casadi_admm_ml:[47:114]\n==agentlib_mpc.optimization_backends.casadi_.casadi_ml:[39:104]\n        self.states = OptimizationVariable.declare(\n            denotation=\"state\",\n            variables=model.get_states(var_ref.states),\n            ref_list=var_ref.states,\n            assert_complete=True,\n        )\n        self.controls = OptimizationVariable.declare(\n            denotation=\"control\",\n            variables=model.get_inputs(var_ref.controls),\n            ref_list=var_ref.controls,\n            assert_complete=True,\n        )\n        self.algebraics = OptimizationVariable.declare(\n            denotation=\"z\",\n            variables=model.auxiliaries,\n            ref_list=[],\n        )\n        self.outputs = OptimizationVariable.declare(\n            denotation=\"y\",\n            variables=model.outputs,\n            ref_list=var_ref.outputs,\n        )\n\n        # define parameters\n        self.non_controlled_inputs = OptimizationParameter.declare(\n            denotation=\"d\",\n            variables=model.get_inputs(var_ref.inputs),\n            ref_list=var_ref.inputs,\n            assert_complete=True,\n        )\n        self.model_parameters = OptimizationParameter.declare(\n            denotation=\"parameter\",\n            variables=model.parameters,\n            ref_list=var_ref.parameters,\n        )\n        self.initial_state = OptimizationParameter.declare(\n            denotation=\"initial_state\",  # append the 0 as a convention to get initial guess\n            variables=model.get_states(var_ref.states),\n            ref_list=var_ref.states,\n            use_in_stage_function=False,\n            assert_complete=True,\n        )\n        self.last_control = OptimizationParameter.declare(\n            denotation=\"initial_control\",  # append the 0 as a convention to get initial guess\n            variables=model.get_inputs(var_ref.controls),\n            ref_list=var_ref.controls,\n            use_in_stage_function=False,\n            assert_complete=True,\n        )\n        self.r_del_u = OptimizationParameter.declare(\n            denotation=\"r_del_u\",\n            variables=[CasadiParameter(name=r_del_u) for r_del_u in var_ref.r_del_u],\n            ref_list=var_ref.r_del_u,\n            use_in_stage_function=False,\n            assert_complete=True,\n        )\n\n        self.cost_function = model.cost_func\n        self.model_constraints = Constraint(\n            function=ca.vertcat(*[c.function for c in model.get_constraints()]),\n            lb=ca.vertcat(*[c.lb for c in model.get_constraints()]),\n            ub=ca.vertcat(*[c.ub for c in model.get_constraints()]),\n        )\n        self.sim_step = model.make_predict_function_for_mpc()\n        self.model = model\n        self.lags_dict: dict[str, int] = model.lags_dict\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.ann.model:[22:99]\n==examples.one_room_mpc.linreg.model:[22:99]\n        ),\n        CasadiInput(\n            name=\"T_in\", value=290.15, unit=\"K\", description=\"Inflow air temperature\"\n        ),\n        # settings\n        CasadiInput(\n            name=\"T_upper\",\n            value=294.15,\n            unit=\"K\",\n            description=\"Upper boundary (soft) for T.\",\n        ),\n    ]\n\n    states: List[CasadiState] = [\n        # differential\n        CasadiState(\n            name=\"T\", value=293.15, unit=\"K\", description=\"Temperature of zone\"\n        ),\n        # algebraic\n        # slack variables\n        CasadiState(\n            name=\"T_slack\",\n            value=0,\n            unit=\"K\",\n            description=\"Slack variable of temperature of zone\",\n        ),\n    ]\n\n    parameters: List[CasadiParameter] = [\n        CasadiParameter(\n            name=\"cp\",\n            value=1000,\n            unit=\"J/kg*K\",\n            description=\"thermal capacity of the air\",\n        ),\n        CasadiParameter(\n            name=\"C\", value=100000, unit=\"J/K\", description=\"thermal capacity of zone\"\n        ),\n        CasadiParameter(\n            name=\"s_T\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for T in constraint function\",\n        ),\n        CasadiParameter(\n            name=\"r_mDot\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for mDot in objective function\",\n        ),\n    ]\n    outputs: List[CasadiOutput] = [\n        CasadiOutput(name=\"T_out\", unit=\"K\", description=\"Temperature of zone\")\n    ]\n\n\nclass PhysicalModel(CasadiModel):\n    config: PhysicalModelConfig\n\n    def setup_system(self):\n        # Define ode\n        self.T.ode = (\n            self.cp * self.mDot / self.C * (self.T_in - self.T) + self.load / self.C\n        )\n\n        # Define ae\n        self.T_out.alg = self.T  # math operation to get the symbolic variable\n\n        # Constraints: List[(lower bound, function, upper bound)]\n        self.constraints = [\n            # soft constraints\n            (0, self.T + self.T_slack, self.T_upper),\n        ]\n\n        # Objective function\n        objective = sum(\n            [",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.ann.training_nn:[0:86]\n==examples.one_room_mpc.ann.with_learned_cost.training_nn:[0:83]\nimport logging\nimport random\n\nimport agentlib as al\nimport matplotlib.pyplot as plt\n\nfrom agentlib.utils.multi_agent_system import LocalMASAgency\n\n\nimport model\n\nlogger = logging.getLogger(__name__)\n\n\nclass InputGeneratorConfig(al.ModelConfig):\n    outputs: al.ModelOutputs = [\n        al.ModelOutput(\n            name=\"mDot\",\n            value=0.0225,\n            lb=0,\n            ub=0.05,\n            unit=\"K\",\n            description=\"Air mass flow into zone\",\n        ),\n        # disturbances\n        al.ModelOutput(\n            name=\"load\",\n            value=150,\n            lb=150,\n            ub=150,\n            unit=\"W\",\n            description=\"Heat load into zone\",\n        ),\n        al.ModelOutput(\n            name=\"T_in\",\n            value=290.15,\n            lb=290.15,\n            ub=290.15,\n            unit=\"K\",\n            description=\"Inflow air temperature\",\n        ),\n    ]\n\n\nclass InputGenerator(al.Model):\n    config: InputGeneratorConfig\n\n    def do_step(self, *, t_start, t_sample=None):\n        for out in self.config.outputs:\n            value = random.random() * (out.ub - out.lb) + out.lb\n            self.set(out.name, value)\n\n    def initialize(self, **kwargs):\n        pass\n\n\ndef plot(results):\n    df = results[\"Simulator\"][\"simulator\"]\n    log = results[\"PID\"][\"AgentLogger\"]\n\n    fig, (ax_T_out, ax_mDot) = plt.subplots(2, 1, sharex=True)\n\n    (df[\"T\"] - 273.15).plot(ax=ax_T_out, label=\"Physical\", color=\"black\")\n    (log[\"T_set\"] - 273.15).plot(ax=ax_T_out, color=\"black\", linestyle=\"--\")\n\n    df[\"mDot\"].plot(ax=ax_mDot, label=\"mDot\", color=\"black\")\n    ax_T_out.set_ylabel(\"$T_{room}$ / \u00b0C\")\n    ax_mDot.set_ylabel(\"$\\dot{m}_{air}$ / kg/s\")\n    ax_mDot.set_xlabel(\"Simulation time / s\")\n\n    plt.show()\n\n\ndef configs(\n    training_time: float = 1000, plot_results: bool = False, step_size: float = 60\n):\n    trainer_config = {\n        \"id\": \"Trainer\",\n        \"modules\": [\n            {\n                \"step_size\": 300,\n                \"module_id\": \"trainer\",\n                \"type\": \"agentlib_mpc.ann_trainer\",",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.gpr.training_gpr:[0:81]\n==examples.one_room_mpc.linreg.training_linreg:[0:82]\nimport logging\nimport random\n\nimport agentlib as al\nimport matplotlib.pyplot as plt\n\nfrom agentlib.utils.multi_agent_system import LocalMASAgency\n\n\nimport model\n\nlogger = logging.getLogger(__name__)\n\n\nclass InputGeneratorConfig(al.ModelConfig):\n    outputs: al.ModelOutputs = [\n        al.ModelOutput(\n            name=\"mDot\",\n            value=0.0225,\n            lb=0,\n            ub=0.05,\n            unit=\"K\",\n            description=\"Air mass flow into zone\",\n        ),\n        # disturbances\n        al.ModelOutput(\n            name=\"load\",\n            value=150,\n            lb=150,\n            ub=150,\n            unit=\"W\",\n            description=\"Heat load into zone\",\n        ),\n        al.ModelOutput(\n            name=\"T_in\",\n            value=290.15,\n            lb=290.15,\n            ub=290.15,\n            unit=\"K\",\n            description=\"Inflow air temperature\",\n        ),\n    ]\n\n\nclass InputGenerator(al.Model):\n    config: InputGeneratorConfig\n\n    def do_step(self, *, t_start, t_sample=None):\n        for out in self.config.outputs:\n            value = random.random() * (out.ub - out.lb) + out.lb\n            self.set(out.name, value)\n\n    def initialize(self, **kwargs):\n        pass\n\n\ndef plot(results):\n    df = results[\"Simulator\"][\"simulator\"]\n    log = results[\"PID\"][\"AgentLogger\"]\n\n    fig, (ax_T_out, ax_mDot) = plt.subplots(2, 1, sharex=True)\n\n    (df[\"T\"] - 273.15).plot(ax=ax_T_out, label=\"Physical\", color=\"black\")\n    (log[\"T_set\"] - 273.15).plot(ax=ax_T_out, color=\"black\", linestyle=\"--\")\n\n    df[\"mDot\"].plot(ax=ax_mDot, label=\"mDot\", color=\"black\")\n    ax_T_out.set_ylabel(\"$T_{room}$ / \u00b0C\")\n    ax_mDot.set_ylabel(\"$\\dot{m}_{air}$ / kg/s\")\n    ax_mDot.set_xlabel(\"Simulation time / s\")\n\n    plt.show()\n\n\ndef configs(\n    training_time: float = 1000, plot_results: bool = False, step_size: float = 60\n):\n    trainer_config = {\n        \"id\": \"Trainer\",\n        \"modules\": [\n            {\n                \"step_size\": 300,\n                \"module_id\": \"trainer\",",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.linreg.model:[14:78]\n==examples.one_room_mpc.physical.with_change_control_penalty:[22:86]\n    inputs: List[CasadiInput] = [\n        # controls\n        CasadiInput(\n            name=\"mDot\", value=0.0225, unit=\"K\", description=\"Air mass flow into zone\"\n        ),\n        # disturbances\n        CasadiInput(\n            name=\"load\", value=150, unit=\"W\", description=\"Heat \" \"load into zone\"\n        ),\n        CasadiInput(\n            name=\"T_in\", value=290.15, unit=\"K\", description=\"Inflow air temperature\"\n        ),\n        # settings\n        CasadiInput(\n            name=\"T_upper\",\n            value=294.15,\n            unit=\"K\",\n            description=\"Upper boundary (soft) for T.\",\n        ),\n    ]\n\n    states: List[CasadiState] = [\n        # differential\n        CasadiState(\n            name=\"T\", value=293.15, unit=\"K\", description=\"Temperature of zone\"\n        ),\n        # algebraic\n        # slack variables\n        CasadiState(\n            name=\"T_slack\",\n            value=0,\n            unit=\"K\",\n            description=\"Slack variable of temperature of zone\",\n        ),\n    ]\n\n    parameters: List[CasadiParameter] = [\n        CasadiParameter(\n            name=\"cp\",\n            value=1000,\n            unit=\"J/kg*K\",\n            description=\"thermal capacity of the air\",\n        ),\n        CasadiParameter(\n            name=\"C\", value=100000, unit=\"J/K\", description=\"thermal capacity of zone\"\n        ),\n        CasadiParameter(\n            name=\"s_T\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for T in constraint function\",\n        ),\n        CasadiParameter(\n            name=\"r_mDot\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for mDot in objective function\",\n        ),\n    ]\n    outputs: List[CasadiOutput] = [\n        CasadiOutput(name=\"T_out\", unit=\"K\", description=\"Temperature of zone\")\n    ]\n\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.physical.mixed_integer.mixed_integer_mpc:[162:220]\n==examples.one_room_mpc.physical.mixed_integer.mixed_integer_mpc_cia:[160:218]\n                \"save_results\": True,\n            },\n            \"time_step\": 300,\n            \"prediction_horizon\": 10,\n            \"parameters\": [\n                {\"name\": \"s_T\", \"value\": 3},\n                {\"name\": \"r_cooling\", \"value\": 1 / 3},\n                {\"name\": \"cooler_mod_limit\", \"value\": 250},\n            ],\n            \"inputs\": [\n                {\"name\": \"load\", \"value\": 150},\n                {\"name\": \"T_upper\", \"value\": ub},\n                {\"name\": \"T_in\", \"value\": 290.15},\n            ],\n            \"controls\": [\n                {\"name\": \"cooling_power\", \"value\": 250, \"ub\": 500, \"lb\": 0},\n            ],\n            \"binary_controls\": [\n                {\"name\": \"cooler_on\", \"value\": 0, \"ub\": 1, \"lb\": 0},\n            ],\n            \"states\": [{\"name\": \"T\", \"value\": 298.16, \"ub\": 303.15, \"lb\": 288.15}],\n        },\n    ],\n}\nAGENT_SIM = {\n    \"id\": \"SimAgent\",\n    \"modules\": [\n        {\"module_id\": \"Ag1Com\", \"type\": \"local_broadcast\"},\n        {\n            \"module_id\": \"room\",\n            \"type\": \"simulator\",\n            \"model\": {\n                \"type\": {\"file\": __file__, \"class_name\": \"MyCasadiModel\"},\n                \"states\": [{\"name\": \"T\", \"value\": 298.16}],\n            },\n            \"t_sample\": 10,\n            \"update_inputs_on_callback\": False,\n            \"outputs\": [\n                {\"name\": \"T_out\", \"value\": 298, \"alias\": \"T\"},\n            ],\n            \"inputs\": [\n                {\"name\": \"cooling_power\", \"value\": 200, \"alias\": \"cooling_power\"},\n            ],\n        },\n    ],\n}\n\n\ndef run_example(with_plots=True, log_level=logging.INFO, until=10000):\n    # Change the working directly so that relative paths work\n    os.chdir(Path(__file__).parent)\n\n    # Set the log-level\n    logging.basicConfig(level=log_level)\n    mas = LocalMASAgency(\n        agent_configs=[AGENT_MPC, AGENT_SIM], env=ENV_CONFIG, variable_logging=True\n    )\n    mas.run(until=until)",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.ann.model:[18:78]\n==examples.one_room_mpc.physical.simple_mpc:[34:94]\n        ),\n        # disturbances\n        CasadiInput(\n            name=\"load\", value=150, unit=\"W\", description=\"Heat load into zone\"\n        ),\n        CasadiInput(\n            name=\"T_in\", value=290.15, unit=\"K\", description=\"Inflow air temperature\"\n        ),\n        # settings\n        CasadiInput(\n            name=\"T_upper\",\n            value=294.15,\n            unit=\"K\",\n            description=\"Upper boundary (soft) for T.\",\n        ),\n    ]\n\n    states: List[CasadiState] = [\n        # differential\n        CasadiState(\n            name=\"T\", value=293.15, unit=\"K\", description=\"Temperature of zone\"\n        ),\n        # algebraic\n        # slack variables\n        CasadiState(\n            name=\"T_slack\",\n            value=0,\n            unit=\"K\",\n            description=\"Slack variable of temperature of zone\",\n        ),\n    ]\n\n    parameters: List[CasadiParameter] = [\n        CasadiParameter(\n            name=\"cp\",\n            value=1000,\n            unit=\"J/kg*K\",\n            description=\"thermal capacity of the air\",\n        ),\n        CasadiParameter(\n            name=\"C\", value=100000, unit=\"J/K\", description=\"thermal capacity of zone\"\n        ),\n        CasadiParameter(\n            name=\"s_T\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for T in constraint function\",\n        ),\n        CasadiParameter(\n            name=\"r_mDot\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for mDot in objective function\",\n        ),\n    ]\n    outputs: List[CasadiOutput] = [\n        CasadiOutput(name=\"T_out\", unit=\"K\", description=\"Temperature of zone\")\n    ]\n\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.gpr.model:[18:78]\n==examples.one_room_mpc.physical.simple_mpc_multiple_shooting:[34:94]\n        ),\n        # disturbances\n        CasadiInput(\n            name=\"load\", value=150, unit=\"W\", description=\"Heat load into zone\"\n        ),\n        CasadiInput(\n            name=\"T_in\", value=290.15, unit=\"K\", description=\"Inflow air temperature\"\n        ),\n        # settings\n        CasadiInput(\n            name=\"T_upper\",\n            value=294.15,\n            unit=\"K\",\n            description=\"Upper boundary (soft) for T.\",\n        ),\n    ]\n\n    states: List[CasadiState] = [\n        # differential\n        CasadiState(\n            name=\"T\", value=293.15, unit=\"K\", description=\"Temperature of zone\"\n        ),\n        # algebraic\n        # slack variables\n        CasadiState(\n            name=\"T_slack\",\n            value=0,\n            unit=\"K\",\n            description=\"Slack variable of temperature of zone\",\n        ),\n    ]\n\n    parameters: List[CasadiParameter] = [\n        CasadiParameter(\n            name=\"cp\",\n            value=1000,\n            unit=\"J/kg*K\",\n            description=\"thermal capacity of the air\",\n        ),\n        CasadiParameter(\n            name=\"C\", value=100000, unit=\"J/K\", description=\"thermal capacity of zone\"\n        ),\n        CasadiParameter(\n            name=\"s_T\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for T in constraint function\",\n        ),\n        CasadiParameter(\n            name=\"r_mDot\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for mDot in objective function\",\n        ),\n    ]\n    outputs: List[CasadiOutput] = [\n        CasadiOutput(name=\"T_out\", unit=\"K\", description=\"Temperature of zone\")\n    ]\n\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.gpr.simple_mpc_gpr:[40:99]\n==examples.one_room_mpc.linreg.simple_mpc_linreg:[40:100]\n                },\n                \"time_step\": 300,\n                \"prediction_horizon\": 15,\n                \"parameters\": [\n                    {\"name\": \"s_T\", \"value\": 3},\n                    {\"name\": \"r_mDot\", \"value\": 1},\n                ],\n                \"inputs\": [\n                    {\"name\": \"T_in\", \"value\": 290.15},\n                    {\"name\": \"load\", \"value\": 150},\n                    {\"name\": \"T_upper\", \"value\": ub},\n                ],\n                \"controls\": [{\"name\": \"mDot\", \"value\": 0.02, \"ub\": 0.05, \"lb\": 0}],\n                \"states\": [{\"name\": \"T\", \"value\": 298.16, \"ub\": 303.15, \"lb\": 288.15}],\n            },\n        ],\n    }\n    agent_sim = {\n        \"id\": \"SimAgent\",\n        \"modules\": [\n            {\"module_id\": \"Ag1Com\", \"type\": \"local_broadcast\"},\n            {\n                \"module_id\": \"room\",\n                \"type\": \"simulator\",\n                \"model\": {\n                    \"type\": {\n                        \"file\": \"model.py\",\n                        \"class_name\": \"PhysicalModel\",\n                    },\n                    \"states\": [{\"name\": \"T\", \"value\": 298.16}],\n                },\n                \"t_sample\": 10,\n                \"save_results\": True,\n                \"update_inputs_on_callback\": False,\n                \"outputs\": [\n                    {\"name\": \"T_out\", \"value\": 298, \"alias\": \"T\"},\n                ],\n                \"inputs\": [\n                    {\"name\": \"mDot\", \"value\": 0.02, \"alias\": \"mDot\"},\n                ],\n            },\n        ],\n    }\n    return [agent_mpc, agent_sim]\n\n\ndef run_example(with_plots=True, log_level=logging.INFO, until=8000):\n    # Change the working directory so that relative paths work\n    script_dir = os.path.abspath(os.path.dirname(__file__))\n    os.chdir(script_dir)\n\n    # Add the script directory to Python path for imports\n    if script_dir not in sys.path:\n        sys.path.insert(0, script_dir)\n    logging.basicConfig(level=log_level)\n\n    # gets the subdirectory of anns with the highest number, i.e. the longest training\n    # time\n    try:",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==agentlib_mpc.optimization_backends.casadi_.admm:[33:89]\n==agentlib_mpc.optimization_backends.casadi_.casadi_admm_ml:[114:168]\n        coup_names = [c.name for c in var_ref.couplings]\n        exchange_names = [c.name for c in var_ref.exchange]\n        pure_outs = [\n            m for m in model.outputs if m.name not in coup_names + exchange_names\n        ]\n        self.outputs = OptimizationVariable.declare(\n            denotation=\"y\",\n            variables=pure_outs,\n            ref_list=var_ref.outputs,\n        )\n\n        self.local_couplings = OptimizationVariable.declare(\n            denotation=\"local_couplings\",\n            variables=[model.get(name) for name in coup_names],\n            ref_list=coup_names,\n        )\n        couplings_global = [coup.mean for coup in var_ref.couplings]\n        self.global_couplings = OptimizationParameter.declare(\n            denotation=\"global_couplings\",\n            variables=[CasadiInput(name=coup) for coup in couplings_global],\n            ref_list=couplings_global,\n        )\n\n        multipliers = [coup.multiplier for coup in var_ref.couplings]\n        self.multipliers = OptimizationParameter.declare(\n            denotation=\"multipliers\",\n            variables=[CasadiInput(name=coup) for coup in multipliers],\n            ref_list=multipliers,\n        )\n\n        self.local_exchange = OptimizationVariable.declare(\n            denotation=\"local_exchange\",\n            variables=[model.get(name) for name in exchange_names],\n            ref_list=exchange_names,\n        )\n        couplings_mean_diff = [coup.mean_diff for coup in var_ref.exchange]\n        self.exchange_diff = OptimizationParameter.declare(\n            denotation=\"average_diff\",\n            variables=[CasadiInput(name=coup) for coup in couplings_mean_diff],\n            ref_list=couplings_mean_diff,\n        )\n\n        multipliers = [coup.multiplier for coup in var_ref.exchange]\n        self.exchange_multipliers = OptimizationParameter.declare(\n            denotation=\"exchange_multipliers\",\n            variables=[CasadiInput(name=coup) for coup in multipliers],\n            ref_list=multipliers,\n        )\n\n        self.penalty_factor = OptimizationParameter.declare(\n            denotation=\"rho\",\n            variables=[CasadiParameter(name=\"penalty_factor\")],\n            ref_list=[\"penalty_factor\"],\n        )\n\n        # add admm terms to objective function",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.ann.simple_mpc_nn:[38:94]\n==examples.one_room_mpc.linreg.simple_mpc_linreg:[40:99]\n                },\n                \"time_step\": 300,\n                \"prediction_horizon\": 15,\n                \"parameters\": [\n                    {\"name\": \"s_T\", \"value\": 3},\n                    {\"name\": \"r_mDot\", \"value\": 1},\n                ],\n                \"inputs\": [\n                    {\"name\": \"T_in\", \"value\": 290.15},\n                    {\"name\": \"load\", \"value\": 150},\n                    {\"name\": \"T_upper\", \"value\": ub},\n                ],\n                \"controls\": [{\"name\": \"mDot\", \"value\": 0.02, \"ub\": 0.05, \"lb\": 0}],\n                \"states\": [{\"name\": \"T\", \"value\": 298.16, \"ub\": 303.15, \"lb\": 288.15}],\n            },\n        ],\n    }\n    agent_sim = {\n        \"id\": \"SimAgent\",\n        \"modules\": [\n            {\"module_id\": \"Ag1Com\", \"type\": \"local_broadcast\"},\n            {\n                \"module_id\": \"room\",\n                \"type\": \"simulator\",\n                \"model\": {\n                    \"type\": {\n                        \"file\": \"model.py\",\n                        \"class_name\": \"PhysicalModel\",\n                    },\n                    \"states\": [{\"name\": \"T\", \"value\": 298.16}],\n                },\n                \"t_sample\": 10,\n                \"save_results\": True,\n                \"update_inputs_on_callback\": False,\n                \"outputs\": [\n                    {\"name\": \"T_out\", \"value\": 298, \"alias\": \"T\"},\n                ],\n                \"inputs\": [\n                    {\"name\": \"mDot\", \"value\": 0.02, \"alias\": \"mDot\"},\n                ],\n            },\n        ],\n    }\n    return [agent_mpc, agent_sim]\n\n\ndef run_example(with_plots=True, log_level=logging.INFO, until=8000):\n    # Change the working directory so that relative paths work\n    script_dir = os.path.abspath(os.path.dirname(__file__))\n    os.chdir(script_dir)\n\n    # Add the script directory to Python path for imports\n    if script_dir not in sys.path:\n        sys.path.insert(0, script_dir)\n\n    logging.basicConfig(level=log_level)\n\n    # gets the subdirectory of anns with the highest number, i.e. the longest training\n    # time",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.ann.model:[22:78]\n==examples.one_room_mpc.gpr.model:[116:172]\n        ),\n        CasadiInput(\n            name=\"T_in\", value=290.15, unit=\"K\", description=\"Inflow air temperature\"\n        ),\n        # settings\n        CasadiInput(\n            name=\"T_upper\",\n            value=294.15,\n            unit=\"K\",\n            description=\"Upper boundary (soft) for T.\",\n        ),\n    ]\n\n    states: List[CasadiState] = [\n        # differential\n        CasadiState(\n            name=\"T\", value=293.15, unit=\"K\", description=\"Temperature of zone\"\n        ),\n        # algebraic\n        # slack variables\n        CasadiState(\n            name=\"T_slack\",\n            value=0,\n            unit=\"K\",\n            description=\"Slack variable of temperature of zone\",\n        ),\n    ]\n\n    parameters: List[CasadiParameter] = [\n        CasadiParameter(\n            name=\"cp\",\n            value=1000,\n            unit=\"J/kg*K\",\n            description=\"thermal capacity of the air\",\n        ),\n        CasadiParameter(\n            name=\"C\", value=100000, unit=\"J/K\", description=\"thermal capacity of zone\"\n        ),\n        CasadiParameter(\n            name=\"s_T\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for T in constraint function\",\n        ),\n        CasadiParameter(\n            name=\"r_mDot\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for mDot in objective function\",\n        ),\n    ]\n    outputs: List[CasadiOutput] = [\n        CasadiOutput(name=\"T_out\", unit=\"K\", description=\"Temperature of zone\")\n    ]\n\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.ann.with_learned_cost.training_nn:[142:195]\n==examples.one_room_mpc.linreg.training_linreg:[133:186]\n            },\n            {\n                \"module_id\": \"input_generator\",\n                \"type\": \"simulator\",\n                \"t_sample\": step_size * 10,\n                \"model\": {\"type\": {\"file\": __file__, \"class_name\": \"InputGenerator\"}},\n                \"outputs\": [\n                    # {\"name\": \"mDot\"},\n                    {\"name\": \"load\", \"ub\": 150, \"lb\": 150},\n                    {\"name\": \"T_in\"},\n                ],\n            },\n            {\"type\": \"local\", \"subscriptions\": [\"PID\"]},\n        ],\n    }\n\n    pid_controller = {\n        \"id\": \"PID\",\n        \"modules\": [\n            {\n                \"module_id\": \"pid\",\n                \"type\": \"pid\",\n                \"setpoint\": {\n                    \"name\": \"setpoint\",\n                    \"value\": 273.15 + 22,\n                    \"alias\": \"T_set\",\n                },\n                \"Kp\": 0.01,\n                \"Ti\": 1,\n                \"input\": {\"name\": \"u\", \"value\": 0, \"alias\": \"T\"},\n                \"output\": {\"name\": \"y\", \"value\": 0, \"alias\": \"mDot\", \"shared\": \"True\"},\n                \"lb\": 0,\n                \"ub\": 0.05,\n                \"reverse\": True,\n            },\n            {\n                \"module_id\": \"set_points\",\n                \"type\": \"agentlib_mpc.set_point_generator\",\n                \"interval\": 60 * 10,\n                \"target_variable\": {\"name\": \"T_set\", \"alias\": \"T_set\"},\n            },\n            {\"type\": \"AgentLogger\", \"values_only\": True, \"t_sample\": 10},\n            {\"type\": \"local\", \"subscriptions\": [\"Simulator\"]},\n        ],\n    }\n    return [simulator_config, trainer_config, pid_controller]\n\n\ndef main(training_time: float = 1000, plot_results=False, step_size: float = 300):\n    env_config = {\"rt\": False, \"t_sample\": 60}\n    logging.basicConfig(level=logging.INFO)\n    mas = LocalMASAgency(\n        agent_configs=configs(",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.gpr.model:[22:78]\n==examples.one_room_mpc.physical.with_change_control_penalty:[30:86]\n        ),\n        CasadiInput(\n            name=\"T_in\", value=290.15, unit=\"K\", description=\"Inflow air temperature\"\n        ),\n        # settings\n        CasadiInput(\n            name=\"T_upper\",\n            value=294.15,\n            unit=\"K\",\n            description=\"Upper boundary (soft) for T.\",\n        ),\n    ]\n\n    states: List[CasadiState] = [\n        # differential\n        CasadiState(\n            name=\"T\", value=293.15, unit=\"K\", description=\"Temperature of zone\"\n        ),\n        # algebraic\n        # slack variables\n        CasadiState(\n            name=\"T_slack\",\n            value=0,\n            unit=\"K\",\n            description=\"Slack variable of temperature of zone\",\n        ),\n    ]\n\n    parameters: List[CasadiParameter] = [\n        CasadiParameter(\n            name=\"cp\",\n            value=1000,\n            unit=\"J/kg*K\",\n            description=\"thermal capacity of the air\",\n        ),\n        CasadiParameter(\n            name=\"C\", value=100000, unit=\"J/K\", description=\"thermal capacity of zone\"\n        ),\n        CasadiParameter(\n            name=\"s_T\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for T in constraint function\",\n        ),\n        CasadiParameter(\n            name=\"r_mDot\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for mDot in objective function\",\n        ),\n    ]\n    outputs: List[CasadiOutput] = [\n        CasadiOutput(name=\"T_out\", unit=\"K\", description=\"Temperature of zone\")\n    ]\n\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.linreg.model:[116:172]\n==examples.one_room_mpc.physical.simple_mpc:[38:94]\n        ),\n        CasadiInput(\n            name=\"T_in\", value=290.15, unit=\"K\", description=\"Inflow air temperature\"\n        ),\n        # settings\n        CasadiInput(\n            name=\"T_upper\",\n            value=294.15,\n            unit=\"K\",\n            description=\"Upper boundary (soft) for T.\",\n        ),\n    ]\n\n    states: List[CasadiState] = [\n        # differential\n        CasadiState(\n            name=\"T\", value=293.15, unit=\"K\", description=\"Temperature of zone\"\n        ),\n        # algebraic\n        # slack variables\n        CasadiState(\n            name=\"T_slack\",\n            value=0,\n            unit=\"K\",\n            description=\"Slack variable of temperature of zone\",\n        ),\n    ]\n\n    parameters: List[CasadiParameter] = [\n        CasadiParameter(\n            name=\"cp\",\n            value=1000,\n            unit=\"J/kg*K\",\n            description=\"thermal capacity of the air\",\n        ),\n        CasadiParameter(\n            name=\"C\", value=100000, unit=\"J/K\", description=\"thermal capacity of zone\"\n        ),\n        CasadiParameter(\n            name=\"s_T\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for T in constraint function\",\n        ),\n        CasadiParameter(\n            name=\"r_mDot\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for mDot in objective function\",\n        ),\n    ]\n    outputs: List[CasadiOutput] = [\n        CasadiOutput(name=\"T_out\", unit=\"K\", description=\"Temperature of zone\")\n    ]\n\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.linreg.model:[22:78]\n==examples.one_room_mpc.physical.simple_mpc_multiple_shooting:[38:94]\n        ),\n        CasadiInput(\n            name=\"T_in\", value=290.15, unit=\"K\", description=\"Inflow air temperature\"\n        ),\n        # settings\n        CasadiInput(\n            name=\"T_upper\",\n            value=294.15,\n            unit=\"K\",\n            description=\"Upper boundary (soft) for T.\",\n        ),\n    ]\n\n    states: List[CasadiState] = [\n        # differential\n        CasadiState(\n            name=\"T\", value=293.15, unit=\"K\", description=\"Temperature of zone\"\n        ),\n        # algebraic\n        # slack variables\n        CasadiState(\n            name=\"T_slack\",\n            value=0,\n            unit=\"K\",\n            description=\"Slack variable of temperature of zone\",\n        ),\n    ]\n\n    parameters: List[CasadiParameter] = [\n        CasadiParameter(\n            name=\"cp\",\n            value=1000,\n            unit=\"J/kg*K\",\n            description=\"thermal capacity of the air\",\n        ),\n        CasadiParameter(\n            name=\"C\", value=100000, unit=\"J/K\", description=\"thermal capacity of zone\"\n        ),\n        CasadiParameter(\n            name=\"s_T\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for T in constraint function\",\n        ),\n        CasadiParameter(\n            name=\"r_mDot\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for mDot in objective function\",\n        ),\n    ]\n    outputs: List[CasadiOutput] = [\n        CasadiOutput(name=\"T_out\", unit=\"K\", description=\"Temperature of zone\")\n    ]\n\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.gpr.model:[18:72]\n==examples.one_room_mpc.physical.simple_mpc_time_dependent_obj:[35:89]\n        ),\n        # disturbances\n        CasadiInput(\n            name=\"load\", value=150, unit=\"W\", description=\"Heat load into zone\"\n        ),\n        CasadiInput(\n            name=\"T_in\", value=290.15, unit=\"K\", description=\"Inflow air temperature\"\n        ),\n        # settings\n        CasadiInput(\n            name=\"T_upper\",\n            value=294.15,\n            unit=\"K\",\n            description=\"Upper boundary (soft) for T.\",\n        ),\n    ]\n\n    states: List[CasadiState] = [\n        # differential\n        CasadiState(\n            name=\"T\", value=293.15, unit=\"K\", description=\"Temperature of zone\"\n        ),\n        # algebraic\n        # slack variables\n        CasadiState(\n            name=\"T_slack\",\n            value=0,\n            unit=\"K\",\n            description=\"Slack variable of temperature of zone\",\n        ),\n    ]\n\n    parameters: List[CasadiParameter] = [\n        CasadiParameter(\n            name=\"cp\",\n            value=1000,\n            unit=\"J/kg*K\",\n            description=\"thermal capacity of the air\",\n        ),\n        CasadiParameter(\n            name=\"C\", value=100000, unit=\"J/K\", description=\"thermal capacity of zone\"\n        ),\n        CasadiParameter(\n            name=\"s_T\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for T in constraint function\",\n        ),\n        CasadiParameter(\n            name=\"r_mDot\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for mDot in objective function\",\n        ),",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.physical.simple_mpc_multiple_shooting:[211:269]\n==examples.one_room_mpc.physical.simple_mpc_time_dependent_obj:[233:291]\n    except Exception:\n        stats = None\n    results = mas.get_results(cleanup=False)\n    mpc_results = results[\"myMPCAgent\"][\"myMPC\"]\n    sim_res = results[\"SimAgent\"][\"room\"]\n\n    if with_dashboard:\n        show_dashboard(mpc_results, stats)\n\n    if with_plots:\n        plot(mpc_results, sim_res, until)\n\n    return results\n\n\ndef plot(mpc_results: pd.DataFrame, sim_res: pd.DataFrame, until: float):\n    import matplotlib.pyplot as plt\n    from agentlib_mpc.utils.plotting.mpc import plot_mpc\n\n    fig, ax = plt.subplots(2, 1, sharex=True)\n    t_sim = sim_res[\"T_out\"]\n    t_sample = t_sim.index[1] - t_sim.index[0]\n    aie_kh = (t_sim - ub).abs().sum() * t_sample / 3600\n    energy_cost_kWh = (\n        (sim_res[\"mDot\"] * (sim_res[\"T_out\"] - sim_res[\"T_in\"])).sum()\n        * t_sample\n        * 1\n        / 3600\n    )  # cp is 1\n    print(f\"Absoulute integral error: {aie_kh} Kh.\")\n    print(f\"Cooling energy used: {energy_cost_kWh} kWh.\")\n\n    plot_mpc(\n        series=mpc_results[\"variable\"][\"T\"] - 273.15,\n        ax=ax[0],\n        plot_actual_values=True,\n        plot_predictions=True,\n    )\n    ax[0].axhline(ub - 273.15, color=\"grey\", linestyle=\"--\", label=\"upper boundary\")\n    plot_mpc(\n        series=mpc_results[\"variable\"][\"mDot\"],\n        ax=ax[1],\n        plot_actual_values=True,\n        plot_predictions=True,\n    )\n\n    ax[1].legend()\n    ax[0].legend()\n    ax[0].set_ylabel(\"$T_{room}$ / \u00b0C\")\n    ax[1].set_ylabel(\"$\\dot{m}_{air}$ / kg/s\")\n    ax[1].set_xlabel(\"simulation time / s\")\n    ax[1].set_ylim([0, 0.06])\n    ax[1].set_xlim([0, until])\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    run_example(",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.ann.model:[116:168]\n==examples.one_room_mpc.physical.simple_mpc_multiple_shooting:[38:90]\n        ),\n        CasadiInput(\n            name=\"T_in\", value=290.15, unit=\"K\", description=\"Inflow air temperature\"\n        ),\n        # settings\n        CasadiInput(\n            name=\"T_upper\",\n            value=294.15,\n            unit=\"K\",\n            description=\"Upper boundary (soft) for T.\",\n        ),\n    ]\n\n    states: List[CasadiState] = [\n        # differential\n        CasadiState(\n            name=\"T\", value=293.15, unit=\"K\", description=\"Temperature of zone\"\n        ),\n        # algebraic\n        # slack variables\n        CasadiState(\n            name=\"T_slack\",\n            value=0,\n            unit=\"K\",\n            description=\"Slack variable of temperature of zone\",\n        ),\n    ]\n\n    parameters: List[CasadiParameter] = [\n        CasadiParameter(\n            name=\"cp\",\n            value=1000,\n            unit=\"J/kg*K\",\n            description=\"thermal capacity of the air\",\n        ),\n        CasadiParameter(\n            name=\"C\", value=100000, unit=\"J/K\", description=\"thermal capacity of zone\"\n        ),\n        CasadiParameter(\n            name=\"s_T\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for T in constraint function\",\n        ),\n        CasadiParameter(\n            name=\"r_mDot\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for mDot in objective function\",\n        ),\n    ]\n    outputs: List[CasadiOutput] = [",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.ann.with_learned_cost.simple_mpc_nn:[38:86]\n==examples.one_room_mpc.linreg.simple_mpc_linreg:[40:88]\n                },\n                \"time_step\": 300,\n                \"prediction_horizon\": 15,\n                \"parameters\": [\n                    {\"name\": \"s_T\", \"value\": 3},\n                    {\"name\": \"r_mDot\", \"value\": 1},\n                ],\n                \"inputs\": [\n                    {\"name\": \"T_in\", \"value\": 290.15},\n                    {\"name\": \"load\", \"value\": 150},\n                    {\"name\": \"T_upper\", \"value\": ub},\n                ],\n                \"controls\": [{\"name\": \"mDot\", \"value\": 0.02, \"ub\": 0.05, \"lb\": 0}],\n                \"states\": [{\"name\": \"T\", \"value\": 298.16, \"ub\": 303.15, \"lb\": 288.15}],\n            },\n        ],\n    }\n    agent_sim = {\n        \"id\": \"SimAgent\",\n        \"modules\": [\n            {\"module_id\": \"Ag1Com\", \"type\": \"local_broadcast\"},\n            {\n                \"module_id\": \"room\",\n                \"type\": \"simulator\",\n                \"model\": {\n                    \"type\": {\n                        \"file\": \"model.py\",\n                        \"class_name\": \"PhysicalModel\",\n                    },\n                    \"states\": [{\"name\": \"T\", \"value\": 298.16}],\n                },\n                \"t_sample\": 10,\n                \"save_results\": True,\n                \"update_inputs_on_callback\": False,\n                \"outputs\": [\n                    {\"name\": \"T_out\", \"value\": 298, \"alias\": \"T\"},\n                ],\n                \"inputs\": [\n                    {\"name\": \"mDot\", \"value\": 0.02, \"alias\": \"mDot\"},\n                ],\n            },\n        ],\n    }\n    return [agent_mpc, agent_sim]\n\n\ndef run_example(with_plots=True, log_level=logging.INFO, until=8000):\n    # Change the working directly so that relative paths work",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.physical.simple_mpc_time_dependent_obj:[39:89]\n==examples.one_room_mpc.physical.with_change_control_penalty:[30:80]\n        ),\n        CasadiInput(\n            name=\"T_in\", value=290.15, unit=\"K\", description=\"Inflow air temperature\"\n        ),\n        # settings\n        CasadiInput(\n            name=\"T_upper\",\n            value=294.15,\n            unit=\"K\",\n            description=\"Upper boundary (soft) for T.\",\n        ),\n    ]\n\n    states: List[CasadiState] = [\n        # differential\n        CasadiState(\n            name=\"T\", value=293.15, unit=\"K\", description=\"Temperature of zone\"\n        ),\n        # algebraic\n        # slack variables\n        CasadiState(\n            name=\"T_slack\",\n            value=0,\n            unit=\"K\",\n            description=\"Slack variable of temperature of zone\",\n        ),\n    ]\n\n    parameters: List[CasadiParameter] = [\n        CasadiParameter(\n            name=\"cp\",\n            value=1000,\n            unit=\"J/kg*K\",\n            description=\"thermal capacity of the air\",\n        ),\n        CasadiParameter(\n            name=\"C\", value=100000, unit=\"J/K\", description=\"thermal capacity of zone\"\n        ),\n        CasadiParameter(\n            name=\"s_T\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for T in constraint function\",\n        ),\n        CasadiParameter(\n            name=\"r_mDot\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for mDot in objective function\",\n        ),",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.gpr.simple_mpc_gpr:[114:161]\n==examples.one_room_mpc.linreg.simple_mpc_linreg:[115:162]\n    )\n    mas.run(until=until)\n    results = mas.get_results()\n    if with_plots:\n        mpc_results = results[\"myMPCAgent\"][\"myMPC\"]\n        sim_res = results[\"SimAgent\"][\"room\"]\n        fig, ax = plt.subplots(2, 1, sharex=True)\n        t_sim = sim_res[\"T_out\"]\n        t_sample = t_sim.index[1] - t_sim.index[0]\n        aie_kh = (t_sim - ub).abs().sum() * t_sample / 3600\n        energy_cost_kWh = (\n            (sim_res[\"mDot\"] * (sim_res[\"T_out\"] - sim_res[\"T_in\"])).sum()\n            * t_sample\n            * 1\n            / 3600\n        )  # cp is 1\n        print(f\"Absoulute integral error: {aie_kh} Kh.\")\n        print(f\"Cooling energy used: {energy_cost_kWh} kWh.\")\n        temperature = mpc_results[\"variable\"][\"T\"] - 273.15\n        plot_mpc(\n            series=temperature,\n            ax=ax[0],\n            plot_actual_values=True,\n            plot_predictions=True,\n        )\n        ax[0].axhline(ub - 273.15, color=\"grey\", linestyle=\"--\", label=\"upper boundary\")\n        plot_mpc(\n            series=mpc_results[\"variable\"][\"mDot\"],\n            ax=ax[1],\n            plot_actual_values=True,\n            plot_predictions=True,\n        )\n\n        ax[1].legend()\n        ax[0].legend()\n        ax[0].set_ylabel(\"$T_{room}$ / \u00b0C\")\n        ax[1].set_ylabel(\"$\\dot{m}_{air}$ / kg/s\")\n        ax[1].set_xlabel(\"simulation time / s\")\n        ax[1].set_ylim([0, 0.06])\n        ax[1].set_xlim([0, until])\n        plt.show()\n\n    return results\n\n\nif __name__ == \"__main__\":\n    run_example(with_plots=True, until=3600)",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.linreg.model:[18:67]\n==examples.one_room_mpc.physical.mixed_integer.mixed_integer_mpc_cia:[43:92]\n        ),\n        # disturbances\n        CasadiInput(\n            name=\"load\", value=150, unit=\"W\", description=\"Heat \" \"load into zone\"\n        ),\n        CasadiInput(\n            name=\"T_in\", value=290.15, unit=\"K\", description=\"Inflow air temperature\"\n        ),\n        # settings\n        CasadiInput(\n            name=\"T_upper\",\n            value=294.15,\n            unit=\"K\",\n            description=\"Upper boundary (soft) for T.\",\n        ),\n    ]\n\n    states: List[CasadiState] = [\n        # differential\n        CasadiState(\n            name=\"T\", value=293.15, unit=\"K\", description=\"Temperature of zone\"\n        ),\n        # algebraic\n        # slack variables\n        CasadiState(\n            name=\"T_slack\",\n            value=0,\n            unit=\"K\",\n            description=\"Slack variable of temperature of zone\",\n        ),\n    ]\n\n    parameters: List[CasadiParameter] = [\n        CasadiParameter(\n            name=\"cp\",\n            value=1000,\n            unit=\"J/kg*K\",\n            description=\"thermal capacity of the air\",\n        ),\n        CasadiParameter(\n            name=\"C\", value=100000, unit=\"J/K\", description=\"thermal capacity of zone\"\n        ),\n        CasadiParameter(\n            name=\"s_T\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for T in constraint function\",\n        ),\n        CasadiParameter(",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.physical.mixed_integer.mixed_integer_mpc:[44:93]\n==examples.one_room_mpc.physical.with_change_control_penalty:[26:75]\n        ),\n        # disturbances\n        CasadiInput(\n            name=\"load\", value=150, unit=\"W\", description=\"Heat \" \"load into zone\"\n        ),\n        CasadiInput(\n            name=\"T_in\", value=290.15, unit=\"K\", description=\"Inflow air temperature\"\n        ),\n        # settings\n        CasadiInput(\n            name=\"T_upper\",\n            value=294.15,\n            unit=\"K\",\n            description=\"Upper boundary (soft) for T.\",\n        ),\n    ]\n\n    states: List[CasadiState] = [\n        # differential\n        CasadiState(\n            name=\"T\", value=293.15, unit=\"K\", description=\"Temperature of zone\"\n        ),\n        # algebraic\n        # slack variables\n        CasadiState(\n            name=\"T_slack\",\n            value=0,\n            unit=\"K\",\n            description=\"Slack variable of temperature of zone\",\n        ),\n    ]\n\n    parameters: List[CasadiParameter] = [\n        CasadiParameter(\n            name=\"cp\",\n            value=1000,\n            unit=\"J/kg*K\",\n            description=\"thermal capacity of the air\",\n        ),\n        CasadiParameter(\n            name=\"C\", value=100000, unit=\"J/K\", description=\"thermal capacity of zone\"\n        ),\n        CasadiParameter(\n            name=\"s_T\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for T in constraint function\",\n        ),\n        CasadiParameter(",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.ann.model:[136:190]\n==examples.one_room_mpc.ann.with_learned_cost.model:[139:193]\n        CasadiState(\n            name=\"T_slack\",\n            value=0,\n            unit=\"K\",\n            description=\"Slack variable of temperature of zone\",\n        ),\n    ]\n\n    parameters: List[CasadiParameter] = [\n        CasadiParameter(\n            name=\"cp\",\n            value=1000,\n            unit=\"J/kg*K\",\n            description=\"thermal capacity of the air\",\n        ),\n        CasadiParameter(\n            name=\"C\", value=100000, unit=\"J/K\", description=\"thermal capacity of zone\"\n        ),\n        CasadiParameter(\n            name=\"s_T\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for T in constraint function\",\n        ),\n        CasadiParameter(\n            name=\"r_mDot\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for mDot in objective function\",\n        ),\n    ]\n    outputs: List[CasadiOutput] = [\n        CasadiOutput(name=\"T_out\", unit=\"K\", description=\"Temperature of zone\"),\n    ]\n\n\nclass DataDrivenModel(CasadiMLModel):\n    config: DataDrivenModelConfig\n\n    def setup_system(self):\n        # ode\n\n        # Define ae\n        self.T_out.alg = self.T  # math operation to get the symbolic variable\n\n        # Constraints: List[(lower bound, function, upper bound)]\n        self.constraints = [\n            # soft constraints\n            (0, self.T + self.T_slack, self.T_upper),\n        ]\n\n        # Objective function\n        objective = sum(\n            [",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==agentlib_mpc.optimization_backends.casadi_.basic:[46:90]\n==agentlib_mpc.optimization_backends.casadi_.casadi_ml:[39:81]\n        self.states = OptimizationVariable.declare(\n            denotation=\"state\",\n            variables=model.get_states(var_ref.states),\n            ref_list=var_ref.states,\n            assert_complete=True,\n        )\n        self.controls = OptimizationVariable.declare(\n            denotation=\"control\",\n            variables=model.get_inputs(var_ref.controls),\n            ref_list=var_ref.controls,\n            assert_complete=True,\n        )\n        self.algebraics = OptimizationVariable.declare(\n            denotation=\"z\",\n            variables=model.auxiliaries,\n            ref_list=[],\n        )\n        self.outputs = OptimizationVariable.declare(\n            denotation=\"y\",\n            variables=model.outputs,\n            ref_list=var_ref.outputs,\n        )\n\n        # define parameters\n        self.non_controlled_inputs = OptimizationParameter.declare(\n            denotation=\"d\",\n            variables=model.get_inputs(var_ref.inputs),\n            ref_list=var_ref.inputs,\n            assert_complete=True,\n        )\n        self.model_parameters = OptimizationParameter.declare(\n            denotation=\"parameter\",\n            variables=model.parameters,\n            ref_list=var_ref.parameters,\n        )\n        self.initial_state = OptimizationParameter.declare(\n            denotation=\"initial_state\",  # append the 0 as a convention to get initial guess\n            variables=model.get_states(var_ref.states),\n            ref_list=var_ref.states,\n            use_in_stage_function=False,\n            assert_complete=True,\n        )\n\n        # dynamics",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.ann.with_learned_cost.training_nn:[142:183]\n==examples.one_room_mpc.gpr.training_gpr:[139:180]\n            },\n            {\n                \"module_id\": \"input_generator\",\n                \"type\": \"simulator\",\n                \"t_sample\": step_size * 10,\n                \"model\": {\"type\": {\"file\": __file__, \"class_name\": \"InputGenerator\"}},\n                \"outputs\": [\n                    # {\"name\": \"mDot\"},\n                    {\"name\": \"load\", \"ub\": 150, \"lb\": 150},\n                    {\"name\": \"T_in\"},\n                ],\n            },\n            {\"type\": \"local\", \"subscriptions\": [\"PID\"]},\n        ],\n    }\n\n    pid_controller = {\n        \"id\": \"PID\",\n        \"modules\": [\n            {\n                \"module_id\": \"pid\",\n                \"type\": \"pid\",\n                \"setpoint\": {\n                    \"name\": \"setpoint\",\n                    \"value\": 273.15 + 22,\n                    \"alias\": \"T_set\",\n                },\n                \"Kp\": 0.01,\n                \"Ti\": 1,\n                \"input\": {\"name\": \"u\", \"value\": 0, \"alias\": \"T\"},\n                \"output\": {\"name\": \"y\", \"value\": 0, \"alias\": \"mDot\", \"shared\": \"True\"},\n                \"lb\": 0,\n                \"ub\": 0.05,\n                \"reverse\": True,\n            },\n            {\n                \"module_id\": \"set_points\",\n                \"type\": \"agentlib_mpc.set_point_generator\",\n                \"interval\": 60 * 10,\n                \"target_variable\": {\"name\": \"T_set\", \"alias\": \"T_set\"},\n            },",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.physical.mixed_integer.mixed_integer_mpc_cia:[47:92]\n==examples.one_room_mpc.physical.simple_mpc_multiple_shooting:[38:83]\n        ),\n        CasadiInput(\n            name=\"T_in\", value=290.15, unit=\"K\", description=\"Inflow air temperature\"\n        ),\n        # settings\n        CasadiInput(\n            name=\"T_upper\",\n            value=294.15,\n            unit=\"K\",\n            description=\"Upper boundary (soft) for T.\",\n        ),\n    ]\n\n    states: List[CasadiState] = [\n        # differential\n        CasadiState(\n            name=\"T\", value=293.15, unit=\"K\", description=\"Temperature of zone\"\n        ),\n        # algebraic\n        # slack variables\n        CasadiState(\n            name=\"T_slack\",\n            value=0,\n            unit=\"K\",\n            description=\"Slack variable of temperature of zone\",\n        ),\n    ]\n\n    parameters: List[CasadiParameter] = [\n        CasadiParameter(\n            name=\"cp\",\n            value=1000,\n            unit=\"J/kg*K\",\n            description=\"thermal capacity of the air\",\n        ),\n        CasadiParameter(\n            name=\"C\", value=100000, unit=\"J/K\", description=\"thermal capacity of zone\"\n        ),\n        CasadiParameter(\n            name=\"s_T\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for T in constraint function\",\n        ),\n        CasadiParameter(",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.physical.mixed_integer.mixed_integer_mpc:[48:93]\n==examples.one_room_mpc.physical.simple_mpc_time_dependent_obj:[39:84]\n        ),\n        CasadiInput(\n            name=\"T_in\", value=290.15, unit=\"K\", description=\"Inflow air temperature\"\n        ),\n        # settings\n        CasadiInput(\n            name=\"T_upper\",\n            value=294.15,\n            unit=\"K\",\n            description=\"Upper boundary (soft) for T.\",\n        ),\n    ]\n\n    states: List[CasadiState] = [\n        # differential\n        CasadiState(\n            name=\"T\", value=293.15, unit=\"K\", description=\"Temperature of zone\"\n        ),\n        # algebraic\n        # slack variables\n        CasadiState(\n            name=\"T_slack\",\n            value=0,\n            unit=\"K\",\n            description=\"Slack variable of temperature of zone\",\n        ),\n    ]\n\n    parameters: List[CasadiParameter] = [\n        CasadiParameter(\n            name=\"cp\",\n            value=1000,\n            unit=\"J/kg*K\",\n            description=\"thermal capacity of the air\",\n        ),\n        CasadiParameter(\n            name=\"C\", value=100000, unit=\"J/K\", description=\"thermal capacity of zone\"\n        ),\n        CasadiParameter(\n            name=\"s_T\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for T in constraint function\",\n        ),\n        CasadiParameter(",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.ann.with_learned_cost.model:[0:48]\n==examples.one_room_mpc.linreg.model:[0:48]\nfrom typing import List\n\nfrom agentlib_mpc.models.casadi_model import (\n    CasadiModelConfig,\n    CasadiInput,\n    CasadiState,\n    CasadiParameter,\n    CasadiOutput,\n    CasadiModel,\n)\nfrom agentlib_mpc.models.casadi_ml_model import CasadiMLModel, CasadiMLModelConfig\n\n\nclass PhysicalModelConfig(CasadiModelConfig):\n    inputs: List[CasadiInput] = [\n        # controls\n        CasadiInput(\n            name=\"mDot\", value=0.0225, unit=\"K\", description=\"Air mass flow into zone\"\n        ),\n        # disturbances\n        CasadiInput(\n            name=\"load\", value=150, unit=\"W\", description=\"Heat \" \"load into zone\"\n        ),\n        CasadiInput(\n            name=\"T_in\", value=290.15, unit=\"K\", description=\"Inflow air temperature\"\n        ),\n        # settings\n        CasadiInput(\n            name=\"T_upper\",\n            value=294.15,\n            unit=\"K\",\n            description=\"Upper boundary (soft) for T.\",\n        ),\n    ]\n\n    states: List[CasadiState] = [\n        # differential\n        CasadiState(\n            name=\"T\", value=293.15, unit=\"K\", description=\"Temperature of zone\"\n        ),\n        # algebraic\n        # slack variables\n        CasadiState(\n            name=\"T_slack\",\n            value=0,\n            unit=\"K\",\n            description=\"Slack variable of temperature of zone\",\n        ),",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==agentlib_mpc.optimization_backends.casadi_.casadi_admm_ml:[446:497]\n==agentlib_mpc.optimization_backends.casadi_.casadi_ml:[296:347]\n                    all_input_variables[l_name] = new_lag_var\n\n                    # add the mx variable to its lag time and denotation\n                    lagged_inputs_j = lagged_inputs.setdefault(j, {})\n                    lv_mx = lagged_inputs_j.setdefault(q_name, ca.DM([]))\n                    lagged_inputs[j][q_name] = ca.vertcat(lv_mx, new_lag_var)\n\n                    # keep track of the variable names that were added\n                    lagged_input_names_j = lagged_input_names.setdefault(j, {})\n                    lv_names = lagged_input_names_j.setdefault(q_name, [])\n                    lv_names.append(v_name)\n\n        self._lagged_input_names = lagged_input_names\n        flat_lagged_inputs = {\n            f\"{den}_{i}\": mx\n            for i, subdict in lagged_inputs.items()\n            for den, mx in subdict.items()\n        }\n\n        all_outputs = system.sim_step(**all_input_variables)\n        state_output_it = (all_outputs[s_name] for s_name in system.states.full_names)\n        state_output = ca.vertcat(*state_output_it)\n\n        # aggregate outputs\n        outputs = [\n            state_output,\n            system.cost_function,\n            *constraints_func,\n            *constraints_lb,\n            *constraints_ub,\n        ]\n        output_denotations = [\n            \"next_states\",\n            \"cost_function\",\n            *constraint_denotations,\n            *constraint_lb_denotations,\n            *constraint_ub_denotations,\n        ]\n\n        # function describing system dynamics and cost function\n        self._stage_function = ca.Function(\n            \"f\",\n            inputs + list(flat_lagged_inputs.values()),\n            outputs,\n            # input handles to make kwarg use possible and to debug\n            input_denotations + list(flat_lagged_inputs),\n            # output handles to make kwarg use possible and to debug\n            output_denotations,\n        )\n\n    def _create_lag_structure_for_denotations(self, system: CasadiMLSystem):",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.ann.training_nn:[97:133]\n==examples.one_room_mpc.ann.with_learned_cost.training_nn:[95:131]\n                \"interpolations\": {\"mDot\": \"mean_over_interval\"},\n                \"layers\": [{32, \"sigmoid\"}],\n                \"train_share\": 0.6,\n                \"validation_share\": 0.2,\n                \"test_share\": 0.2,\n                \"retrain_delay\": training_time,\n                \"save_directory\": \"anns\",\n                \"use_values_for_incomplete_data\": True,\n                \"data_sources\": [\"results//simulation_data_14days.csv\"],\n                \"save_data\": True,\n                \"save_ml_model\": True,\n                \"save_plots\": True,\n                \"early_stopping\": {\"activate\": \"True\", \"patience\": 800},\n            },\n            {\"type\": \"local\", \"subscriptions\": [\"Simulator\", \"PID\"]},\n        ],\n    }\n\n    # sample rate is at least 1, and maximum 10\n    t_sample_sim = min(max(1, int(step_size) // 30), 10)\n    simulator_config = {\n        \"id\": \"Simulator\",\n        \"modules\": [\n            {\n                \"module_id\": \"simulator\",\n                \"type\": \"simulator\",\n                \"model\": {\n                    \"type\": {\n                        \"file\": model.__file__,\n                        \"class_name\": model.PhysicalModel.__name__,\n                    },\n                },\n                \"t_sample\": t_sample_sim,\n                \"save_results\": plot_results,\n                \"result_filename\": \"results//simulation_data.csv\",\n                \"result_causalities\": [\"local\", \"input\", \"output\"],",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.physical.simple_mpc_multiple_shooting:[168:210]\n==examples.one_room_mpc.physical.simple_mpc_time_dependent_obj:[190:232]\n            ],\n        },\n    ],\n}\nAGENT_SIM = {\n    \"id\": \"SimAgent\",\n    \"modules\": [\n        {\"module_id\": \"Ag1Com\", \"type\": \"local_broadcast\"},\n        {\n            \"module_id\": \"room\",\n            \"type\": \"simulator\",\n            \"model\": {\n                \"type\": {\"file\": __file__, \"class_name\": \"MyCasadiModel\"},\n                \"states\": [{\"name\": \"T\", \"value\": 298.16}],\n            },\n            \"t_sample\": 10,\n            \"update_inputs_on_callback\": False,\n            \"save_results\": True,\n            \"outputs\": [\n                {\"name\": \"T_out\", \"value\": 298, \"alias\": \"T\"},\n            ],\n            \"inputs\": [\n                {\"name\": \"mDot\", \"value\": 0.02, \"alias\": \"mDot\"},\n            ],\n        },\n    ],\n}\n\n\ndef run_example(\n    with_plots=True, log_level=logging.INFO, until=10000, with_dashboard=False\n):\n    # Change the working directly so that relative paths work\n    os.chdir(Path(__file__).parent)\n\n    # Set the log-level\n    logging.basicConfig(level=log_level)\n    mas = LocalMASAgency(\n        agent_configs=[AGENT_MPC, AGENT_SIM], env=ENV_CONFIG, variable_logging=False\n    )\n    mas.run(until=until)\n    try:",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.gpr.simple_mpc_gpr:[0:39]\n==examples.one_room_mpc.linreg.simple_mpc_linreg:[0:39]\nimport logging\nimport sys\nfrom pathlib import Path\nimport matplotlib.pyplot as plt\nimport os\n\nfrom agentlib.utils.multi_agent_system import LocalMASAgency\nfrom agentlib_mpc.utils.plotting.mpc import plot_mpc\n\nlogger = logging.getLogger(__name__)\n\n# script variables\nub = 295.15\n\nENV_CONFIG = {\"rt\": False, \"factor\": 0.01, \"t_sample\": 60}\n\n\ndef agent_configs(ml_model_path: str) -> list[dict]:\n    agent_mpc = {\n        \"id\": \"myMPCAgent\",\n        \"modules\": [\n            {\"module_id\": \"Ag1Com\", \"type\": \"local_broadcast\"},\n            {\n                \"module_id\": \"myMPC\",\n                \"type\": \"agentlib_mpc.mpc\",\n                \"optimization_backend\": {\n                    \"type\": \"casadi_ml\",\n                    \"model\": {\n                        \"type\": {\n                            \"file\": \"model.py\",\n                            \"class_name\": \"DataDrivenModel\",\n                        },\n                        \"ml_model_sources\": [ml_model_path],\n                    },\n                    \"discretization_options\": {\n                        \"method\": \"multiple_shooting\",\n                    },\n                    \"results_file\": \"results//opt.csv\",\n                    \"overwrite_result_file\": True,",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.ann.with_learned_cost.model:[139:171]\n==examples.one_room_mpc.physical.simple_mpc_multiple_shooting:[58:90]\n        CasadiState(\n            name=\"T_slack\",\n            value=0,\n            unit=\"K\",\n            description=\"Slack variable of temperature of zone\",\n        ),\n    ]\n\n    parameters: List[CasadiParameter] = [\n        CasadiParameter(\n            name=\"cp\",\n            value=1000,\n            unit=\"J/kg*K\",\n            description=\"thermal capacity of the air\",\n        ),\n        CasadiParameter(\n            name=\"C\", value=100000, unit=\"J/K\", description=\"thermal capacity of zone\"\n        ),\n        CasadiParameter(\n            name=\"s_T\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for T in constraint function\",\n        ),\n        CasadiParameter(\n            name=\"r_mDot\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for mDot in objective function\",\n        ),\n    ]\n    outputs: List[CasadiOutput] = [",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.three_zone_datadriven_admm.models.simulation_model:[70:100]\n==examples.three_zone_datadriven_admm.training_direct:[102:132]\n        ),\n        CasadiParameter(\n            name=\"c_BKA\",\n            value=500000,\n            unit=\"J/kg*K\",\n            description=\"thermal capacity of zone 0\",\n        ),\n        CasadiParameter(\n            name=\"cw\", value=518000, unit=\"J/kg*K\", description=\"W\u00e4rmekapazit\u00e4t Wand\"\n        ),\n        CasadiParameter(\n            name=\"cl\", value=1000, unit=\"J/kg*K\", description=\"W\u00e4rmekapazit\u00e4t Luft\"\n        ),\n        CasadiParameter(\n            name=\"hw\", value=0.17, unit=\"J/kg*K\", description=\"Leitf\u00e4higkeit Wand\"\n        ),\n        CasadiParameter(\n            name=\"hBKA\", value=2, unit=\"J/kg*K\", description=\"Leitf\u00e4higkeit BKA\"\n        ),\n        CasadiParameter(\n            name=\"hFenster\",\n            value=1.23,\n            unit=\"J/kg*K\",\n            description=\"Leitf\u00e4higkeit Fenster\",\n        ),\n        CasadiParameter(name=\"Aw\", value=13.85, unit=\"m2\", description=\"Fl\u00e4che Wand\"),\n        CasadiParameter(name=\"ABKA\", value=39.5, unit=\"m2\", description=\"Fl\u00e4che BKA\"),\n        CasadiParameter(\n            name=\"AFenster\", value=6.6, unit=\"m2\", description=\"Fl\u00e4che Fenster\"\n        ),",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==models.room_model:[39:76]\n==models.room_model:[54:90]\n        CasadiParameter(\n            name=\"cp\",\n            value=1000,\n            unit=\"J/kg*K\",\n            description=\"thermal capacity of the air\",\n        ),\n        CasadiParameter(\n            name=\"cZ\",\n            value=60000,\n            unit=\"J/kg*K\",\n            description=\"thermal capacity of zone\",\n        ),\n        CasadiParameter(\n            name=\"q_T\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for T in objective function\",\n        ),\n        CasadiParameter(\n            name=\"q_mDot\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for mDot in objective function\",\n        ),\n    ]\n\n\nclass CaCooledRoom(CasadiModel):\n    config: CaCooledRoomConfig\n\n    def setup_system(self):\n        # Define ode\n        self.T.ode = (\n            self.cp * self.mDot / self.cZ * (self.T_in - self.T) + self.d / self.cZ\n        )\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==agentlib_mpc.optimization_backends.casadi_.basic:[208:275]\n==agentlib_mpc.optimization_backends.casadi_.mhe:[231:298]\n        constraints_func = [c.function for c in constraints.values()]\n        constraints_lb = [c.lb for c in constraints.values()]\n        constraints_ub = [c.ub for c in constraints.values()]\n        constraint_denotations = list(constraints.keys())\n        constraint_lb_denotations = [LB_PREFIX + k for k in constraints]\n        constraint_ub_denotations = [UB_PREFIX + k for k in constraints]\n\n        # aggregate outputs\n        outputs = [\n            system.ode,\n            system.cost_function,\n            *constraints_func,\n            *constraints_lb,\n            *constraints_ub,\n        ]\n        output_denotations = [\n            \"ode\",\n            \"cost_function\",\n            *constraint_denotations,\n            *constraint_lb_denotations,\n            *constraint_ub_denotations,\n        ]\n\n        # function describing system dynamics and cost function\n        self._stage_function = ca.Function(\n            \"f\",\n            inputs,\n            outputs,\n            # input handles to make kwarg use possible and to debug\n            input_denotations,\n            # output handles to make kwarg use possible and to debug\n            output_denotations,\n        )\n\n    def initialize(self, system: BaseSystem, solver_factory: SolverFactory):\n        \"\"\"Initializes the trajectory optimization problem, creating all symbolic\n        variables of the OCP, the mapping function and the numerical solver.\"\"\"\n        self._construct_stage_function(system)\n        super().initialize(system=system, solver_factory=solver_factory)\n\n    def _collocation_inner_loop(\n        self,\n        state_at_beginning: ca.MX,\n        collocation: CollocationMatrices,\n        states: OptimizationVariable,\n        opt_vars: list[OptimizationVariable],\n        opt_pars: list[OptimizationParameter],\n        const: dict[OptimizationQuantity, ca.MX],\n    ) -> tuple[ca.MX, tuple]:\n        \"\"\"\n        Constructs the inner loop of a collocation discretization. Takes the\n\n        Args\n            collocation: The collocation matrices\n            state_at_beginning: The casadi MX instance representing the state at the\n                beginning of the collocation interval\n            states: The OptimizationVariable representing the states\n            opt_vars: The OptimizationVariables which should be defined at each\n                collocation point\n            par_vars: The OptimizationParameters which should be defined at each\n                collocation point\n            const: Variables or parameters to feed into the system function that are\n                constant over the inner loop. Value is the current MX to be used.\n\n        Returns:\n            state_k_end[MX]: state at the end of collocation interval\n        \"\"\"",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.ann.with_learned_cost.model:[139:169]\n==examples.one_room_mpc.physical.simple_mpc_time_dependent_obj:[59:89]\n        CasadiState(\n            name=\"T_slack\",\n            value=0,\n            unit=\"K\",\n            description=\"Slack variable of temperature of zone\",\n        ),\n    ]\n\n    parameters: List[CasadiParameter] = [\n        CasadiParameter(\n            name=\"cp\",\n            value=1000,\n            unit=\"J/kg*K\",\n            description=\"thermal capacity of the air\",\n        ),\n        CasadiParameter(\n            name=\"C\", value=100000, unit=\"J/K\", description=\"thermal capacity of zone\"\n        ),\n        CasadiParameter(\n            name=\"s_T\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for T in constraint function\",\n        ),\n        CasadiParameter(\n            name=\"r_mDot\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for mDot in objective function\",\n        ),",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.physical.mixed_integer.mixed_integer_mpc:[229:261]\n==examples.one_room_mpc.physical.mixed_integer.mixed_integer_mpc_cia:[229:262]\n        plot_mpc(\n            series=mpc_results[\"variable\"][\"T\"] - 273.15,\n            ax=ax[0],\n            plot_actual_values=True,\n            plot_predictions=True,\n        )\n        ax[0].axhline(ub - 273.15, color=\"grey\", linestyle=\"--\", label=\"upper boundary\")\n        plot_mpc(\n            series=mpc_results[\"variable\"][\"cooling_power\"],\n            ax=ax[1],\n            plot_actual_values=True,\n            plot_predictions=True,\n            step=True,\n        )\n        ax[1].axhline(250, color=\"grey\", linestyle=\"--\", label=\"modulation limit\")\n        # ax[1].plot(\n        #     results[\"myMPCAgent\"][\"AgentLogger\"][\"cooling_power\"], label=\"air mass flow\"\n        # )\n        plot_mpc(\n            series=mpc_results[\"variable\"][\"cooler_on\"],\n            ax=ax[2],\n            plot_actual_values=True,\n            plot_predictions=True,\n            step=True,\n        )\n        ax[0].set_ylabel(\"$T_{room}$ / \u00b0C\")\n        ax[1].set_ylabel(\"$\\dot{Q}_{cool}$ / W\")\n        ax[2].set_ylabel(\"Switch\")\n        ax[2].set_xlabel(\"simulation time / s\")\n        ax[2].set_yticks([0, 1])\n        ax[1].set_ylim([0, 510])\n        # results[\"myMPCAgent\"][\"AgentLogger\"][\"cooler_on\"].plot(ax=ax[2], color=\"black\", drawstyle=\"steps-post\", label=\"Switch\")\n        # ax[2].set_xlim([0, until])",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.ann.model:[142:172]\n==examples.one_room_mpc.ann.with_learned_cost.model:[49:79]\n    ]\n\n    parameters: List[CasadiParameter] = [\n        CasadiParameter(\n            name=\"cp\",\n            value=1000,\n            unit=\"J/kg*K\",\n            description=\"thermal capacity of the air\",\n        ),\n        CasadiParameter(\n            name=\"C\", value=100000, unit=\"J/K\", description=\"thermal capacity of zone\"\n        ),\n        CasadiParameter(\n            name=\"s_T\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for T in constraint function\",\n        ),\n        CasadiParameter(\n            name=\"r_mDot\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for mDot in objective function\",\n        ),\n    ]\n    outputs: List[CasadiOutput] = [\n        CasadiOutput(name=\"T_out\", unit=\"K\", description=\"Temperature of zone\"),\n    ]\n\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.ann.with_learned_cost.model:[14:48]\n==examples.one_room_mpc.physical.with_change_control_penalty:[22:56]\n    inputs: List[CasadiInput] = [\n        # controls\n        CasadiInput(\n            name=\"mDot\", value=0.0225, unit=\"K\", description=\"Air mass flow into zone\"\n        ),\n        # disturbances\n        CasadiInput(\n            name=\"load\", value=150, unit=\"W\", description=\"Heat \" \"load into zone\"\n        ),\n        CasadiInput(\n            name=\"T_in\", value=290.15, unit=\"K\", description=\"Inflow air temperature\"\n        ),\n        # settings\n        CasadiInput(\n            name=\"T_upper\",\n            value=294.15,\n            unit=\"K\",\n            description=\"Upper boundary (soft) for T.\",\n        ),\n    ]\n\n    states: List[CasadiState] = [\n        # differential\n        CasadiState(\n            name=\"T\", value=293.15, unit=\"K\", description=\"Temperature of zone\"\n        ),\n        # algebraic\n        # slack variables\n        CasadiState(\n            name=\"T_slack\",\n            value=0,\n            unit=\"K\",\n            description=\"Slack variable of temperature of zone\",\n        ),",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.ann.simple_mpc_nn:[141:171]\n==examples.one_room_mpc.ann.with_learned_cost.simple_mpc_nn:[114:144]\n        fig, ax = plt.subplots(2, 1, sharex=True)\n        temperature = mpc_results[\"variable\"][\"T\"] - 273.15\n        plot_mpc(\n            series=temperature,\n            ax=ax[0],\n            plot_actual_values=True,\n            plot_predictions=True,\n        )\n        ax[0].axhline(ub - 273.15, color=\"grey\", linestyle=\"--\", label=\"upper boundary\")\n        plot_mpc(\n            series=mpc_results[\"variable\"][\"mDot\"],\n            ax=ax[1],\n            plot_actual_values=True,\n            plot_predictions=True,\n        )\n\n        ax[1].legend()\n        ax[0].legend()\n        ax[0].set_ylabel(\"$T_{room}$ / \u00b0C\")\n        ax[1].set_ylabel(\"$\\dot{m}_{air}$ / kg/s\")\n        ax[1].set_xlabel(\"simulation time / s\")\n        ax[1].set_ylim([0, 0.06])\n        ax[1].set_xlim([0, until])\n        plt.show()\n\n    return results\n\n\nif __name__ == \"__main__\":\n    run_example(with_plots=True, until=3600)",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==agentlib_mpc.optimization_backends.casadi_.casadi_admm_ml:[248:286]\n==agentlib_mpc.optimization_backends.casadi_.casadi_ml:[125:163]\n        du_weights = self.add_opt_par(sys.r_del_u)\n\n        pre_grid_states = [ts * i for i in range(-sys.max_lag + 1, 1)]\n        inputs_lag = min(-2, -sys.max_lag)  # at least -2, to consider last control\n        pre_grid_inputs = [ts * i for i in range(inputs_lag + 1, 0)]\n        prediction_grid = [ts * i for i in range(0, n)]\n\n        # sort for debugging purposes\n        full_grid = sorted(\n            list(set(prediction_grid + pre_grid_inputs + pre_grid_states))\n        )\n\n        # dict[time, dict[denotation, ca.MX]]\n        mx_dict: dict[float, dict[str, ca.MX]] = {time: {} for time in full_grid}\n\n        # add past state variables\n        for time in pre_grid_states:\n            self.pred_time = time\n            x_past = self.add_opt_par(sys.initial_state)\n            # add past states as optimization variables with fixed values so they can\n            # be accessed by the first few steps, when there are lags\n            mx_dict[time][sys.states.name] = self.add_opt_var(\n                sys.states, lb=x_past, ub=x_past, guess=x_past\n            )\n            mx_dict[time][sys.initial_state.name] = x_past\n\n        # add past inputs\n        for time in pre_grid_inputs:\n            self.pred_time = time\n            d = sys.non_controlled_inputs\n            mx_dict[time][d.name] = self.add_opt_par(d)\n            u_past = self.add_opt_par(sys.last_control)\n            mx_dict[time][sys.controls.name] = self.add_opt_var(\n                sys.controls, lb=u_past, ub=u_past, guess=u_past\n            )\n            mx_dict[time][sys.last_control.name] = u_past\n\n        # add all variables over future grid",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.admm.models.ca_room_model:[13:41]\n==examples.admm.models.simulation_model:[14:42]\n        CasadiInput(\n            name=\"mDot_0\",\n            value=0.0225,\n            unit=\"K\",\n            description=\"Air mass flow into zone 0\",\n        ),\n        # disturbances\n        CasadiInput(\n            name=\"d_0\", value=150, unit=\"W\", description=\"Heat load into zone 0\"\n        ),\n        CasadiInput(\n            name=\"T_in\", value=290.15, unit=\"K\", description=\"Inflow air temperature\"\n        ),\n        # settings\n        CasadiInput(\n            name=\"T_0_set\",\n            value=294.15,\n            unit=\"K\",\n            description=\"Set point for T_0 in objective function\",\n        ),\n        CasadiInput(\n            name=\"T_0_upper\",\n            value=294.15,\n            unit=\"K\",\n            description=\"Upper boundary (soft) for T_0.\",\n        ),\n    ]\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.ann.with_learned_cost.simple_mpc_nn:[115:144]\n==examples.one_room_mpc.gpr.simple_mpc_gpr:[132:161]\n        temperature = mpc_results[\"variable\"][\"T\"] - 273.15\n        plot_mpc(\n            series=temperature,\n            ax=ax[0],\n            plot_actual_values=True,\n            plot_predictions=True,\n        )\n        ax[0].axhline(ub - 273.15, color=\"grey\", linestyle=\"--\", label=\"upper boundary\")\n        plot_mpc(\n            series=mpc_results[\"variable\"][\"mDot\"],\n            ax=ax[1],\n            plot_actual_values=True,\n            plot_predictions=True,\n        )\n\n        ax[1].legend()\n        ax[0].legend()\n        ax[0].set_ylabel(\"$T_{room}$ / \u00b0C\")\n        ax[1].set_ylabel(\"$\\dot{m}_{air}$ / kg/s\")\n        ax[1].set_xlabel(\"simulation time / s\")\n        ax[1].set_ylim([0, 0.06])\n        ax[1].set_xlim([0, until])\n        plt.show()\n\n    return results\n\n\nif __name__ == \"__main__\":\n    run_example(with_plots=True, until=3600)",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.ann.simple_mpc_nn:[142:171]\n==examples.one_room_mpc.linreg.simple_mpc_linreg:[133:162]\n        temperature = mpc_results[\"variable\"][\"T\"] - 273.15\n        plot_mpc(\n            series=temperature,\n            ax=ax[0],\n            plot_actual_values=True,\n            plot_predictions=True,\n        )\n        ax[0].axhline(ub - 273.15, color=\"grey\", linestyle=\"--\", label=\"upper boundary\")\n        plot_mpc(\n            series=mpc_results[\"variable\"][\"mDot\"],\n            ax=ax[1],\n            plot_actual_values=True,\n            plot_predictions=True,\n        )\n\n        ax[1].legend()\n        ax[0].legend()\n        ax[0].set_ylabel(\"$T_{room}$ / \u00b0C\")\n        ax[1].set_ylabel(\"$\\dot{m}_{air}$ / kg/s\")\n        ax[1].set_xlabel(\"simulation time / s\")\n        ax[1].set_ylim([0, 0.06])\n        ax[1].set_xlim([0, until])\n        plt.show()\n\n    return results\n\n\nif __name__ == \"__main__\":\n    run_example(with_plots=True, until=3600)",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.ann.with_learned_cost.model:[49:75]\n==examples.one_room_mpc.physical.simple_mpc_multiple_shooting:[64:90]\n    ]\n\n    parameters: List[CasadiParameter] = [\n        CasadiParameter(\n            name=\"cp\",\n            value=1000,\n            unit=\"J/kg*K\",\n            description=\"thermal capacity of the air\",\n        ),\n        CasadiParameter(\n            name=\"C\", value=100000, unit=\"J/K\", description=\"thermal capacity of zone\"\n        ),\n        CasadiParameter(\n            name=\"s_T\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for T in constraint function\",\n        ),\n        CasadiParameter(\n            name=\"r_mDot\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for mDot in objective function\",\n        ),\n    ]\n    outputs: List[CasadiOutput] = [",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==agentlib_mpc.optimization_backends.casadi_.basic:[344:392]\n==agentlib_mpc.optimization_backends.casadi_.mhe:[365:413]\n        d = self.options.collocation_order\n        polynomial = self.options.collocation_method\n\n        # Get collocation points\n        tau_root = np.append(0, ca.collocation_points(d, polynomial))\n\n        # Coefficients of the collocation equation\n        C = np.zeros((d + 1, d + 1))\n\n        # Coefficients of the continuity equation\n        D = np.zeros(d + 1)\n\n        # Coefficients of the quadrature function\n        B = np.zeros(d + 1)\n\n        # Construct polynomial basis\n        for j in range(d + 1):\n            # Construct Lagrange polynomials to get the polynomial basis at\n            # the collocation point\n            p = np.poly1d([1])\n            for r in range(d + 1):\n                if r != j:\n                    p *= np.poly1d([1, -tau_root[r]]) / (tau_root[j] - tau_root[r])\n\n            # Evaluate the polynomial at the final time to get the\n            # coefficients of the continuity equation\n            D[j] = p(1.0)\n\n            # Evaluate the time derivative of the polynomial at all collocation\n            # points to get the coefficients of the continuity equation\n            pder = np.polyder(p)\n            for r in range(d + 1):\n                C[j, r] = pder(tau_root[r])\n\n            # Evaluate the integral of the polynomial to get the coefficients\n            # of the quadrature function\n            pint = np.polyint(p)\n            B[j] = pint(1.0)\n\n        return CollocationMatrices(\n            order=d,\n            root=tau_root,\n            B=B,\n            C=C,\n            D=D,\n        )\n\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.admm.models.ca_room_model:[57:81]\n==examples.admm.models.simulation_model:[58:82]\n        CasadiParameter(\n            name=\"cp\",\n            value=1000,\n            unit=\"J/kg*K\",\n            description=\"thermal capacity of the air\",\n        ),\n        CasadiParameter(\n            name=\"c_0\",\n            value=100000,\n            unit=\"J/kg*K\",\n            description=\"thermal capacity of zone 0\",\n        ),\n        CasadiParameter(\n            name=\"q_T_0\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for T_0 in objective function\",\n        ),\n        CasadiParameter(\n            name=\"s_T_0\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for T_0 in constraint function\",\n        ),",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.ann.simple_mpc_nn:[7:37]\n==examples.one_room_mpc.linreg.simple_mpc_linreg:[9:39]\nlogger = logging.getLogger(__name__)\n\n# script variables\nub = 295.15\n\nENV_CONFIG = {\"rt\": False, \"factor\": 0.01, \"t_sample\": 60}\n\n\ndef agent_configs(ml_model_path: str) -> list[dict]:\n    agent_mpc = {\n        \"id\": \"myMPCAgent\",\n        \"modules\": [\n            {\"module_id\": \"Ag1Com\", \"type\": \"local_broadcast\"},\n            {\n                \"module_id\": \"myMPC\",\n                \"type\": \"agentlib_mpc.mpc\",\n                \"optimization_backend\": {\n                    \"type\": \"casadi_ml\",\n                    \"model\": {\n                        \"type\": {\n                            \"file\": \"model.py\",\n                            \"class_name\": \"DataDrivenModel\",\n                        },\n                        \"ml_model_sources\": [ml_model_path],\n                    },\n                    \"discretization_options\": {\n                        \"method\": \"multiple_shooting\",\n                    },\n                    \"results_file\": \"results//opt.csv\",\n                    \"overwrite_result_file\": True,",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.ann.with_learned_cost.model:[139:164]\n==examples.one_room_mpc.physical.mixed_integer.mixed_integer_mpc:[68:93]\n        CasadiState(\n            name=\"T_slack\",\n            value=0,\n            unit=\"K\",\n            description=\"Slack variable of temperature of zone\",\n        ),\n    ]\n\n    parameters: List[CasadiParameter] = [\n        CasadiParameter(\n            name=\"cp\",\n            value=1000,\n            unit=\"J/kg*K\",\n            description=\"thermal capacity of the air\",\n        ),\n        CasadiParameter(\n            name=\"C\", value=100000, unit=\"J/K\", description=\"thermal capacity of zone\"\n        ),\n        CasadiParameter(\n            name=\"s_T\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for T in constraint function\",\n        ),\n        CasadiParameter(",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.ann.with_learned_cost.model:[18:48]\n==examples.one_room_mpc.physical.mixed_integer.mixed_integer_mpc:[44:74]\n        ),\n        # disturbances\n        CasadiInput(\n            name=\"load\", value=150, unit=\"W\", description=\"Heat \" \"load into zone\"\n        ),\n        CasadiInput(\n            name=\"T_in\", value=290.15, unit=\"K\", description=\"Inflow air temperature\"\n        ),\n        # settings\n        CasadiInput(\n            name=\"T_upper\",\n            value=294.15,\n            unit=\"K\",\n            description=\"Upper boundary (soft) for T.\",\n        ),\n    ]\n\n    states: List[CasadiState] = [\n        # differential\n        CasadiState(\n            name=\"T\", value=293.15, unit=\"K\", description=\"Temperature of zone\"\n        ),\n        # algebraic\n        # slack variables\n        CasadiState(\n            name=\"T_slack\",\n            value=0,\n            unit=\"K\",\n            description=\"Slack variable of temperature of zone\",\n        ),",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.ann.with_learned_cost.model:[49:73]\n==examples.one_room_mpc.physical.simple_mpc_time_dependent_obj:[65:89]\n    ]\n\n    parameters: List[CasadiParameter] = [\n        CasadiParameter(\n            name=\"cp\",\n            value=1000,\n            unit=\"J/kg*K\",\n            description=\"thermal capacity of the air\",\n        ),\n        CasadiParameter(\n            name=\"C\", value=100000, unit=\"J/K\", description=\"thermal capacity of zone\"\n        ),\n        CasadiParameter(\n            name=\"s_T\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for T in constraint function\",\n        ),\n        CasadiParameter(\n            name=\"r_mDot\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for mDot in objective function\",\n        ),",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==agentlib_mpc.optimization_backends.casadi_.full:[78:115]\n==agentlib_mpc.optimization_backends.casadi_.minlp:[99:136]\n            xk_end, constraints = self._collocation_inner_loop(\n                collocation=collocation_matrices,\n                state_at_beginning=xk,\n                states=sys.states,\n                opt_vars=opt_vars_inside_inner,\n                opt_pars=opt_pars_inside_inner,\n                const=constant_over_inner,\n            )\n\n            # increment loop counter and time\n            self.k += 1\n            self.pred_time = ts * self.k\n\n            # New NLP variable for differential state at end of interval\n            xk = self.add_opt_var(sys.states)\n\n            # Add continuity constraint\n            self.add_constraint(xk - xk_end, gap_closing=True)\n\n            # add collocation constraints later for fatrop\n            for constraint in constraints:\n                self.add_constraint(*constraint)\n\n\nclass MultipleShooting(basic.MultipleShooting):\n    def _discretize(self, sys: CasadiMINLPSystem):\n        \"\"\"\n        Defines a multiple shooting discretization\n        \"\"\"\n        vars_dict = {sys.states.name: {}}\n        n = self.options.prediction_horizon\n        ts = self.options.time_step\n        opts = {\"t0\": 0, \"tf\": ts}\n        # Initial State\n        x0 = self.add_opt_par(sys.initial_state)\n        xk = self.add_opt_var(sys.states, lb=x0, ub=x0, guess=x0)\n        vars_dict[sys.states.name][0] = xk",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==agentlib_mpc.optimization_backends.casadi_.mhe:[484:518]\n==agentlib_mpc.utils.sampling:[109:143]\n        if (target_grid.shape == source_grid.shape) and all(target_grid == source_grid):\n            return list(values)\n        values = np.array(values)\n\n        # check requested portion of trajectory, whether the most recent value in the\n        # source grid is older than the first value in the MHE trajectory\n        if target_grid[0] >= source_grid[-1]:\n            # return the last value of the trajectory if requested sample\n            # starts out of range\n            logger.warning(\n                f\"Latest value of source grid %s is older than \"\n                f\"current time (%s. Returning latest value anyway.\",\n                source_grid[-1],\n                current,\n            )\n            return [values[-1]] * target_grid_length\n\n        # determine whether the target grid lies within the available source grid, and\n        # how many entries to extrapolate on either side\n        source_grid_oldest_time: float = source_grid[0]\n        source_grid_newest_time: float = source_grid[-1]\n        source_is_recent_enough: np.ndarray = target_grid < source_grid_newest_time\n        source_is_old_enough: np.ndarray = target_grid > source_grid_oldest_time\n        number_of_missing_old_entries: int = target_grid_length - np.count_nonzero(\n            source_is_old_enough\n        )\n        number_of_missing_new_entries: int = target_grid_length - np.count_nonzero(\n            source_is_recent_enough\n        )\n        # shorten target interpolation grid by extra points that go above or below\n        # available data range\n        target_grid = target_grid[source_is_recent_enough * source_is_old_enough]\n\n        # interpolate data to match new grid",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.three_zone_datadriven_admm.models.simulation_model:[143:167]\n==examples.three_zone_datadriven_admm.training_direct:[157:181]\n        self.T_CCA_0.ode = self.cp * self.mDot * (self.T_v - self.T_CCA_0) / (\n            self.c_BKA * self.ABKA\n        ) + self.hBKA / self.c_BKA * (self.T_air - self.T_CCA_0)\n        self.T_wall.ode = (\n            self.hw / self.cw * (self.T_air - self.T_wall)\n            + self.hw / self.cw * (self.T_amb - self.T_wall)\n            + self.Q_rad / self.cw\n        )\n        self.T_air.ode = (\n            self.hw * self.Aw / (self.cl * self.mRoom) * (self.T_wall - self.T_air)\n            + self.hBKA\n            * self.ABKA\n            / (self.cl * self.mRoom)\n            * (self.T_CCA_0 - self.T_air)\n            + self.d / (self.cl * self.mRoom)\n            + (self.T_ahu - self.T_air) * self.mDot_ahu / self.mRoom\n            + self.hFenster\n            * self.AFenster\n            / (self.cl * self.mRoom)\n            * (self.T_amb - self.T_air)\n            + self.Q_rad * self.AFenster / (self.cl * self.mRoom)\n        )\n\n        # Define ae",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.admm.admm_example_coordinator_multiprocessing:[38:75]\n==examples.admm.admm_example_multiprocessing:[40:78]\n    import matplotlib.pyplot as plt\n    from agentlib_mpc.utils.analysis import admm_at_time_step\n\n    res_sim = results[\"Simulation\"][\"simulator\"]\n    start_time = res_sim.index[0]\n    res_sim.index = res_sim.index - start_time\n    mpc_room_results = results[\"CooledRoom\"][\"admm_module\"]\n\n    room_res = admm_at_time_step(\n        data=mpc_room_results,\n        time_step=start_pred,\n        iteration=-1,\n        index_offset=start_time,\n    )\n\n    fig, ax = plt.subplots(2, 1)\n    ax[0].axhline(294.55, label=\"reference value\")\n    ax[0].plot(res_sim[\"T_0_out\"], label=\"temperature\")\n    ax[0].plot(room_res[\"variable\"][\"T_0\"], label=\"temperature prediction\")\n    ax[1].plot(res_sim[\"mDot_0\"], label=\"air mass flow\")\n    ax[1].plot(room_res[\"variable\"][\"mDot_0\"].dropna(), label=\"air flow prediction\")\n    ax[1].legend()\n    ax[0].legend()\n    plt.show()\n\n\ndef run_example(\n    until=3000,\n    with_plots=True,\n    start_pred=0,\n    log_level: int = logging.INFO,\n    cleanup=True,\n):\n    # Set the log-level\n    logging.basicConfig(level=log_level)\n\n    # Change the working directly so that relative paths work",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.linreg.simple_mpc_linreg:[136:162]\n==examples.one_room_mpc.physical.with_change_control_penalty:[201:227]\n            ax=ax[0],\n            plot_actual_values=True,\n            plot_predictions=True,\n        )\n        ax[0].axhline(ub - 273.15, color=\"grey\", linestyle=\"--\", label=\"upper boundary\")\n        plot_mpc(\n            series=mpc_results[\"variable\"][\"mDot\"],\n            ax=ax[1],\n            plot_actual_values=True,\n            plot_predictions=True,\n        )\n\n        ax[1].legend()\n        ax[0].legend()\n        ax[0].set_ylabel(\"$T_{room}$ / \u00b0C\")\n        ax[1].set_ylabel(\"$\\dot{m}_{air}$ / kg/s\")\n        ax[1].set_xlabel(\"simulation time / s\")\n        ax[1].set_ylim([0, 0.06])\n        ax[1].set_xlim([0, until])\n        plt.show()\n\n    return results\n\n\nif __name__ == \"__main__\":\n    run_example(with_plots=True, until=3600)",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==agentlib_mpc.optimization_backends.casadi_.casadi_admm_ml:[326:355]\n==agentlib_mpc.optimization_backends.casadi_.casadi_ml:[175:204]\n        self.pred_time = 0\n        for time in prediction_grid[1:]:\n            self.pred_time = time\n            mx_dict[time][sys.states.name] = self.add_opt_var(sys.states)\n        self.pred_time += ts\n        mx_dict[self.pred_time] = {sys.states.name: self.add_opt_var(sys.states)}\n\n        all_quantities = sys.all_system_quantities()\n        # add constraints and create the objective function for all stages\n        for time in prediction_grid:\n            stage_mx = mx_dict[time]\n\n            # add penalty on control change between intervals\n            u_prev = mx_dict[time - ts][sys.controls.name]\n            uk = stage_mx[sys.controls.name]\n            self.objective_function += ts * ca.dot(du_weights, (u_prev - uk) ** 2)\n\n            # get stage arguments from current time step\n            stage_arguments = {\n                # variables\n                sys.states.name: stage_mx[sys.states.name],\n                sys.algebraics.name: stage_mx[sys.algebraics.name],\n                sys.outputs.name: stage_mx[sys.outputs.name],\n                # parameters\n                sys.controls.name: stage_mx[sys.controls.name],\n                sys.non_controlled_inputs.name: stage_mx[\n                    sys.non_controlled_inputs.name\n                ],\n                sys.model_parameters.name: const_par,",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.ann.with_learned_cost.training_nn:[108:131]\n==examples.one_room_mpc.linreg.training_linreg:[103:126]\n            },\n            {\"type\": \"local\", \"subscriptions\": [\"Simulator\", \"PID\"]},\n        ],\n    }\n\n    # sample rate is at least 1, and maximum 10\n    t_sample_sim = min(max(1, int(step_size) // 30), 10)\n    simulator_config = {\n        \"id\": \"Simulator\",\n        \"modules\": [\n            {\n                \"module_id\": \"simulator\",\n                \"type\": \"simulator\",\n                \"model\": {\n                    \"type\": {\n                        \"file\": model.__file__,\n                        \"class_name\": model.PhysicalModel.__name__,\n                    },\n                },\n                \"t_sample\": t_sample_sim,\n                \"save_results\": plot_results,\n                \"result_filename\": \"results//simulation_data.csv\",\n                \"result_causalities\": [\"local\", \"input\", \"output\"],",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.physical.mixed_integer.mixed_integer_mpc:[182:203]\n==examples.one_room_mpc.physical.with_change_control_penalty:[154:175]\n            \"states\": [{\"name\": \"T\", \"value\": 298.16, \"ub\": 303.15, \"lb\": 288.15}],\n        },\n    ],\n}\nAGENT_SIM = {\n    \"id\": \"SimAgent\",\n    \"modules\": [\n        {\"module_id\": \"Ag1Com\", \"type\": \"local_broadcast\"},\n        {\n            \"module_id\": \"room\",\n            \"type\": \"simulator\",\n            \"model\": {\n                \"type\": {\"file\": __file__, \"class_name\": \"MyCasadiModel\"},\n                \"states\": [{\"name\": \"T\", \"value\": 298.16}],\n            },\n            \"t_sample\": 10,\n            \"update_inputs_on_callback\": False,\n            \"outputs\": [\n                {\"name\": \"T_out\", \"value\": 298, \"alias\": \"T\"},\n            ],\n            \"inputs\": [",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.ann.with_learned_cost.model:[22:48]\n==examples.one_room_mpc.physical.simple_mpc_time_dependent_obj:[39:65]\n        ),\n        CasadiInput(\n            name=\"T_in\", value=290.15, unit=\"K\", description=\"Inflow air temperature\"\n        ),\n        # settings\n        CasadiInput(\n            name=\"T_upper\",\n            value=294.15,\n            unit=\"K\",\n            description=\"Upper boundary (soft) for T.\",\n        ),\n    ]\n\n    states: List[CasadiState] = [\n        # differential\n        CasadiState(\n            name=\"T\", value=293.15, unit=\"K\", description=\"Temperature of zone\"\n        ),\n        # algebraic\n        # slack variables\n        CasadiState(\n            name=\"T_slack\",\n            value=0,\n            unit=\"K\",\n            description=\"Slack variable of temperature of zone\",\n        ),",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.physical.simple_mpc_time_dependent_obj:[265:289]\n==examples.one_room_mpc.physical.with_change_control_penalty:[199:222]\n        plot_mpc(\n            series=mpc_results[\"variable\"][\"T\"] - 273.15,\n            ax=ax[0],\n            plot_actual_values=True,\n            plot_predictions=True,\n        )\n        ax[0].axhline(ub - 273.15, color=\"grey\", linestyle=\"--\", label=\"upper boundary\")\n        plot_mpc(\n            series=mpc_results[\"variable\"][\"mDot\"],\n            ax=ax[1],\n            plot_actual_values=True,\n            plot_predictions=True,\n        )\n\n        ax[1].legend()\n        ax[0].legend()\n        ax[0].set_ylabel(\"$T_{room}$ / \u00b0C\")\n        ax[1].set_ylabel(\"$\\dot{m}_{air}$ / kg/s\")\n        ax[1].set_xlabel(\"simulation time / s\")\n        ax[1].set_ylim([0, 0.06])\n        ax[1].set_xlim([0, until])\n        plt.show()\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==models.room_model:[13:36]\n==models.room_model:[6:29]\n        CasadiInput(\n            name=\"mDot\",\n            value=0.0225,\n            unit=\"kg/s\",\n            description=\"Air mass flow into zone\",\n        ),\n        # disturbances\n        CasadiInput(name=\"d\", value=150, unit=\"W\", description=\"Heat load into zone\"),\n        CasadiInput(\n            name=\"T_in\", value=290.15, unit=\"K\", description=\"Inflow air temperature\"\n        ),\n        # settings\n        CasadiInput(\n            name=\"T_set\",\n            value=294.15,\n            unit=\"K\",\n            description=\"Set point for T in objective function\",\n        ),\n        CasadiInput(\n            name=\"T_upper\", value=294.15, unit=\"K\", description=\"Upper boundary for T.\"\n        ),\n    ]\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==agentlib_mpc.optimization_backends.casadi_.casadi_admm_ml:[363:405]\n==agentlib_mpc.optimization_backends.casadi_.casadi_ml:[205:235]\n            }\n\n            # collect stage arguments for lagged variables\n            for lag, denotation_dict in self._lagged_input_names.items():\n                for denotation, var_names in denotation_dict.items():\n                    l_name = name_with_lag(denotation, lag)\n                    mx_list = []\n                    for v_name in var_names:\n                        index = all_quantities[denotation].full_names.index(v_name)\n                        mx_list.append(mx_dict[time - lag * ts][denotation][index])\n                    stage_arguments[l_name] = ca.vertcat(*mx_list)\n\n            # evaluate a stage, add path constraints, multiple shooting constraints\n            # and add to the objective function\n            stage_result = self._stage_function(**stage_arguments)\n            self.add_constraint(\n                stage_result[\"model_constraints\"],\n                lb=stage_result[\"lb_model_constraints\"],\n                ub=stage_result[\"ub_model_constraints\"],\n            )\n            self.add_constraint(\n                stage_result[\"next_states\"] - mx_dict[time + ts][sys.states.name]\n            )\n            self.objective_function += stage_result[\"cost_function\"] * ts\n\n    def _construct_stage_function(self, system: CasadiADMMNNSystem):\n        \"\"\"\n        Combine information from the model and the var_ref to create CasADi\n        functions which describe the system dynamics and constraints at each\n        stage of the optimization problem. Sets the stage function. It has\n        all mpc variables as inputs, sorted by denotation (declared in\n        self.declare_quantities) and outputs ode, cost function and 3 outputs\n        per constraint (constraint, lb_constraint, ub_constraint).\n\n        In the basic case, it has the form:\n        CasadiFunction: ['x', 'z', 'u', 'y', 'd', 'p'] ->\n            ['ode', 'cost_function', 'model_constraints',\n            'ub_model_constraints', 'lb_model_constraints']\n\n        Args:\n            system\n        \"\"\"",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==agentlib_mpc.optimization_backends.casadi_.basic:[495:519]\n==agentlib_mpc.optimization_backends.casadi_.casadi_ml:[256:280]\n        constraints = {\"model_constraints\": system.model_constraints}\n\n        inputs = [\n            q.full_symbolic\n            for q in all_system_quantities.values()\n            if q.use_in_stage_function\n        ]\n        inputs.append(system.time)\n        input_denotations = [\n            q.name\n            for denotation, q in all_system_quantities.items()\n            if q.use_in_stage_function\n        ]\n        input_denotations.append(\"__time\")\n\n        # aggregate constraints\n        constraints_func = [c.function for c in constraints.values()]\n        constraints_lb = [c.lb for c in constraints.values()]\n        constraints_ub = [c.ub for c in constraints.values()]\n        constraint_denotations = list(constraints.keys())\n        constraint_lb_denotations = [LB_PREFIX + k for k in constraints]\n        constraint_ub_denotations = [UB_PREFIX + k for k in constraints]\n\n        # aggregate outputs",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.ann.simple_mpc_nn:[145:166]\n==examples.one_room_mpc.physical.simple_mpc:[245:267]\n        ax=ax[0],\n        plot_actual_values=True,\n        plot_predictions=True,\n    )\n    ax[0].axhline(ub - 273.15, color=\"grey\", linestyle=\"--\", label=\"upper boundary\")\n    plot_mpc(\n        series=mpc_results[\"variable\"][\"mDot\"],\n        ax=ax[1],\n        plot_actual_values=True,\n        plot_predictions=True,\n    )\n\n    ax[1].legend()\n    ax[0].legend()\n    ax[0].set_ylabel(\"$T_{room}$ / \u00b0C\")\n    ax[1].set_ylabel(\"$\\dot{m}_{air}$ / kg/s\")\n    ax[1].set_xlabel(\"simulation time / s\")\n    ax[1].set_ylim([0, 0.06])\n    ax[1].set_xlim([0, until])\n    plt.show()\n\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.gpr.simple_mpc_gpr:[135:156]\n==examples.one_room_mpc.physical.simple_mpc_multiple_shooting:[245:267]\n        ax=ax[0],\n        plot_actual_values=True,\n        plot_predictions=True,\n    )\n    ax[0].axhline(ub - 273.15, color=\"grey\", linestyle=\"--\", label=\"upper boundary\")\n    plot_mpc(\n        series=mpc_results[\"variable\"][\"mDot\"],\n        ax=ax[1],\n        plot_actual_values=True,\n        plot_predictions=True,\n    )\n\n    ax[1].legend()\n    ax[0].legend()\n    ax[0].set_ylabel(\"$T_{room}$ / \u00b0C\")\n    ax[1].set_ylabel(\"$\\dot{m}_{air}$ / kg/s\")\n    ax[1].set_xlabel(\"simulation time / s\")\n    ax[1].set_ylim([0, 0.06])\n    ax[1].set_xlim([0, until])\n    plt.show()\n\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.linreg.simple_mpc_linreg:[136:157]\n==examples.one_room_mpc.physical.simple_mpc_time_dependent_obj:[267:289]\n        ax=ax[0],\n        plot_actual_values=True,\n        plot_predictions=True,\n    )\n    ax[0].axhline(ub - 273.15, color=\"grey\", linestyle=\"--\", label=\"upper boundary\")\n    plot_mpc(\n        series=mpc_results[\"variable\"][\"mDot\"],\n        ax=ax[1],\n        plot_actual_values=True,\n        plot_predictions=True,\n    )\n\n    ax[1].legend()\n    ax[0].legend()\n    ax[0].set_ylabel(\"$T_{room}$ / \u00b0C\")\n    ax[1].set_ylabel(\"$\\dot{m}_{air}$ / kg/s\")\n    ax[1].set_xlabel(\"simulation time / s\")\n    ax[1].set_ylim([0, 0.06])\n    ax[1].set_xlim([0, until])\n    plt.show()\n\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==agentlib_mpc.optimization_backends.casadi_.basic:[276:307]\n==agentlib_mpc.optimization_backends.casadi_.mhe:[298:331]\n        constants = {var.name: mx for var, mx in const.items()}\n\n        # remember time at start of collocation loop\n        start_time = self.pred_time\n\n        # shorthands\n        ts = self.options.time_step\n\n        # State variables at collocation points\n        state_collocation = []\n        opt_vars_collocation = []\n        opt_pars_collocation = []\n\n        # add variables at collocation points\n        for j in range(collocation.order):  # d is collocation order\n            # set time\n            self.pred_time = start_time + collocation.root[j + 1] * ts\n\n            # differential state\n            state_kj = self.add_opt_var(states, post_den=f\"_{j}\")\n            state_collocation.append(state_kj)\n\n            opt_vars_collocation.append({})\n            for opt_var in opt_vars:\n                var_kj = self.add_opt_var(opt_var, post_den=f\"_{j}\")\n                opt_vars_collocation[-1].update({opt_var.name: var_kj})\n\n            opt_pars_collocation.append({})\n            for opt_par in opt_pars:\n                par_kj = self.add_opt_par(opt_par, post_den=f\"_{j}\")\n                opt_pars_collocation[-1].update({opt_par.name: par_kj})\n\n        # Loop over collocation points",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.ann.with_learned_cost.model:[49:68]\n==examples.one_room_mpc.physical.mixed_integer.mixed_integer_mpc:[74:93]\n    ]\n\n    parameters: List[CasadiParameter] = [\n        CasadiParameter(\n            name=\"cp\",\n            value=1000,\n            unit=\"J/kg*K\",\n            description=\"thermal capacity of the air\",\n        ),\n        CasadiParameter(\n            name=\"C\", value=100000, unit=\"J/K\", description=\"thermal capacity of zone\"\n        ),\n        CasadiParameter(\n            name=\"s_T\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for T in constraint function\",\n        ),\n        CasadiParameter(",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==agentlib_mpc.optimization_backends.casadi_.casadi_admm_ml:[406:428]\n==agentlib_mpc.optimization_backends.casadi_.mhe:[217:239]\n        constraints = {\"model_constraints\": system.model_constraints}\n\n        inputs = [\n            q.full_symbolic\n            for q in all_system_quantities.values()\n            if q.use_in_stage_function\n        ]\n        input_denotations = [\n            q.name\n            for denotation, q in all_system_quantities.items()\n            if q.use_in_stage_function\n        ]\n\n        # aggregate constraints\n        constraints_func = [c.function for c in constraints.values()]\n        constraints_lb = [c.lb for c in constraints.values()]\n        constraints_ub = [c.ub for c in constraints.values()]\n        constraint_denotations = list(constraints.keys())\n        constraint_lb_denotations = [LB_PREFIX + k for k in constraints]\n        constraint_ub_denotations = [UB_PREFIX + k for k in constraints]\n\n        # aggregate outputs",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.ann.model:[0:21]\n==examples.one_room_mpc.ann.with_learned_cost.model:[0:21]\nfrom typing import List\n\nfrom agentlib_mpc.models.casadi_model import (\n    CasadiModelConfig,\n    CasadiInput,\n    CasadiState,\n    CasadiParameter,\n    CasadiOutput,\n    CasadiModel,\n)\nfrom agentlib_mpc.models.casadi_ml_model import CasadiMLModel, CasadiMLModelConfig\n\n\nclass PhysicalModelConfig(CasadiModelConfig):\n    inputs: List[CasadiInput] = [\n        # controls\n        CasadiInput(\n            name=\"mDot\", value=0.0225, unit=\"K\", description=\"Air mass flow into zone\"\n        ),\n        # disturbances\n        CasadiInput(",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.ann.with_learned_cost.simple_mpc_nn:[1:25]\n==examples.one_room_mpc.linreg.simple_mpc_linreg:[2:26]\nfrom pathlib import Path\nimport matplotlib.pyplot as plt\nimport os\n\nfrom agentlib.utils.multi_agent_system import LocalMASAgency\nfrom agentlib_mpc.utils.plotting.mpc import plot_mpc\n\nlogger = logging.getLogger(__name__)\n\n# script variables\nub = 295.15\n\nENV_CONFIG = {\"rt\": False, \"factor\": 0.01, \"t_sample\": 60}\n\n\ndef agent_configs(ann_path: str) -> list[dict]:\n    agent_mpc = {\n        \"id\": \"myMPCAgent\",\n        \"modules\": [\n            {\"module_id\": \"Ag1Com\", \"type\": \"local_broadcast\"},\n            {\n                \"module_id\": \"myMPC\",\n                \"type\": \"agentlib_mpc.mpc\",\n                \"optimization_backend\": {",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.gpr.model:[0:21]\n==examples.one_room_mpc.linreg.model:[0:21]\nfrom typing import List\n\nfrom agentlib_mpc.models.casadi_model import (\n    CasadiModelConfig,\n    CasadiInput,\n    CasadiState,\n    CasadiParameter,\n    CasadiOutput,\n    CasadiModel,\n)\nfrom agentlib_mpc.models.casadi_ml_model import CasadiMLModel, CasadiMLModelConfig\n\n\nclass PhysicalModelConfig(CasadiModelConfig):\n    inputs: List[CasadiInput] = [\n        # controls\n        CasadiInput(\n            name=\"mDot\", value=0.0225, unit=\"K\", description=\"Air mass flow into zone\"\n        ),\n        # disturbances\n        CasadiInput(",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.physical.mixed_integer.mixed_integer_mpc_cia:[181:197]\n==examples.one_room_mpc.physical.simple_mpc:[169:185]\n        },\n    ],\n}\nAGENT_SIM = {\n    \"id\": \"SimAgent\",\n    \"modules\": [\n        {\"module_id\": \"Ag1Com\", \"type\": \"local_broadcast\"},\n        {\n            \"module_id\": \"room\",\n            \"type\": \"simulator\",\n            \"model\": {\n                \"type\": {\"file\": __file__, \"class_name\": \"MyCasadiModel\"},\n                \"states\": [{\"name\": \"T\", \"value\": 298.16}],\n            },\n            \"t_sample\": 10,\n            \"update_inputs_on_callback\": False,",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.physical.mixed_integer.mixed_integer_mpc:[183:199]\n==examples.one_room_mpc.physical.simple_mpc_multiple_shooting:[169:185]\n        },\n    ],\n}\nAGENT_SIM = {\n    \"id\": \"SimAgent\",\n    \"modules\": [\n        {\"module_id\": \"Ag1Com\", \"type\": \"local_broadcast\"},\n        {\n            \"module_id\": \"room\",\n            \"type\": \"simulator\",\n            \"model\": {\n                \"type\": {\"file\": __file__, \"class_name\": \"MyCasadiModel\"},\n                \"states\": [{\"name\": \"T\", \"value\": 298.16}],\n            },\n            \"t_sample\": 10,\n            \"update_inputs_on_callback\": False,",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.physical.simple_mpc_time_dependent_obj:[191:207]\n==examples.one_room_mpc.physical.with_change_control_penalty:[155:171]\n        },\n    ],\n}\nAGENT_SIM = {\n    \"id\": \"SimAgent\",\n    \"modules\": [\n        {\"module_id\": \"Ag1Com\", \"type\": \"local_broadcast\"},\n        {\n            \"module_id\": \"room\",\n            \"type\": \"simulator\",\n            \"model\": {\n                \"type\": {\"file\": __file__, \"class_name\": \"MyCasadiModel\"},\n                \"states\": [{\"name\": \"T\", \"value\": 298.16}],\n            },\n            \"t_sample\": 10,\n            \"update_inputs_on_callback\": False,",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==agentlib_mpc.optimization_backends.casadi_.admm:[157:182]\n==agentlib_mpc.optimization_backends.casadi_.minlp:[98:123]\n            }\n            xk_end, constraints = self._collocation_inner_loop(\n                collocation=collocation_matrices,\n                state_at_beginning=xk,\n                states=sys.states,\n                opt_vars=opt_vars_inside_inner,\n                opt_pars=opt_pars_inside_inner,\n                const=constant_over_inner,\n            )\n\n            # increment loop counter and time\n            self.k += 1\n            self.pred_time = ts * self.k\n\n            # New NLP variables at end of interval\n            xk = self.add_opt_var(sys.states)\n\n            # Add continuity constraint\n            self.add_constraint(xk - xk_end, gap_closing=True)\n\n            # add collocation constraints later for fatrop\n            for constraint in constraints:\n                self.add_constraint(*constraint)\n\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.three_zone_datadriven_admm.models.Room_model:[61:76]\n==examples.three_zone_datadriven_admm.models.simulation_model:[103:118]\n        CasadiParameter(\n            name=\"q_T\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for T in objective function\",\n        ),\n        CasadiParameter(\n            name=\"s_T\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for T in objective function\",\n        ),\n    ]\n    outputs: List[CasadiOutput] = [\n        CasadiOutput(",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.physical.simple_mpc_multiple_shooting:[75:90]\n==examples.one_room_mpc.physical.simple_mpc_with_time_variant_inputs:[196:211]\n        ),\n        CasadiParameter(\n            name=\"s_T\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for T in constraint function\",\n        ),\n        CasadiParameter(\n            name=\"r_mDot\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for mDot in objective function\",\n        ),\n    ]\n    outputs: List[CasadiOutput] = [",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.ann.with_learned_cost.model:[118:137]\n==examples.one_room_mpc.physical.simple_mpc_time_dependent_obj:[39:59]\n        ),\n        CasadiInput(\n            name=\"T_in\", value=290.15, unit=\"K\", description=\"Inflow air temperature\"\n        ),\n        # settings\n        CasadiInput(\n            name=\"T_upper\",\n            value=294.15,\n            unit=\"K\",\n            description=\"Upper boundary (soft) for T.\",\n        ),\n    ]\n\n    states: List[CasadiState] = [\n        # differential\n        CasadiState(\n            name=\"T\", value=293.15, unit=\"K\", description=\"Temperature of zone\"\n        ),\n        # algebraic",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==agentlib_mpc.optimization_backends.casadi_.admm:[86:106]\n==agentlib_mpc.optimization_backends.casadi_.casadi_admm_ml:[181:202]\n        )\n\n        # add admm terms to objective function\n        admm_objective = 0\n        rho = self.penalty_factor.full_symbolic[0]\n        for i in range(len(var_ref.couplings)):\n            admm_in = self.global_couplings.full_symbolic[i]\n            admm_out = self.local_couplings.full_symbolic[i]\n            admm_lam = self.multipliers.full_symbolic[i]\n            admm_objective += admm_lam * admm_out + rho / 2 * (admm_in - admm_out) ** 2\n\n        for i in range(len(var_ref.exchange)):\n            admm_in = self.exchange_diff.full_symbolic[i]\n            admm_out = self.local_exchange.full_symbolic[i]\n            admm_lam = self.exchange_multipliers.full_symbolic[i]\n            admm_objective += admm_lam * admm_out + rho / 2 * (admm_in - admm_out) ** 2\n\n        self.cost_function += admm_objective\n\n    @property\n    def variables(self) -> list[OptimizationVariable]:",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==agentlib_mpc.optimization_backends.casadi_.admm:[158:182]\n==agentlib_mpc.optimization_backends.casadi_.full:[78:102]\n            xk_end, constraints = self._collocation_inner_loop(\n                collocation=collocation_matrices,\n                state_at_beginning=xk,\n                states=sys.states,\n                opt_vars=opt_vars_inside_inner,\n                opt_pars=opt_pars_inside_inner,\n                const=constant_over_inner,\n            )\n\n            # increment loop counter and time\n            self.k += 1\n            self.pred_time = ts * self.k\n\n            # New NLP variable for differential state at end of interval\n            xk = self.add_opt_var(sys.states)\n\n            # Add continuity constraint\n            self.add_constraint(xk - xk_end, gap_closing=True)\n\n            # add collocation constraints later for fatrop\n            for constraint in constraints:\n                self.add_constraint(*constraint)\n\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==agentlib_mpc.optimization_backends.casadi_.admm:[309:325]\n==agentlib_mpc.optimization_backends.casadi_.basic:[458:492]\n            sys.non_controlled_inputs.full_symbolic,\n            sys.model_parameters.full_symbolic,\n            sys.algebraics.full_symbolic,\n            sys.outputs.full_symbolic,\n        )\n        integrator_ode = {\"x\": x, \"p\": p, \"ode\": ode}\n\n        if integrator == Integrators.euler:\n            xk_end = x + ode * opts[\"tf\"]\n            opt_integrator = ca.Function(\n                \"system\", [x, p], [xk_end], [\"x0\", \"p\"], [\"xf\"]\n            )\n        else:  # rk, cvodes\n            opt_integrator = ca.integrator(\"system\", integrator, integrator_ode, opts)\n\n        return opt_integrator\n\n    def _construct_stage_function(self, system: BaseSystem):\n        \"\"\"\n        Combine information from the model and the var_ref to create CasADi\n        functions which describe the system dynamics and constraints at each\n        stage of the optimization problem. Sets the stage function. It has\n        all mpc variables as inputs, sorted by denotation (declared in\n        self.declare_quantities) and outputs ode, cost function and 3 outputs\n        per constraint (constraint, lb_constraint, ub_constraint).\n\n        In the basic case, it has the form:\n        CasadiFunction: ['x', 'z', 'u', 'y', 'd', 'p'] ->\n            ['ode', 'cost_function', 'model_constraints',\n            'ub_model_constraints', 'lb_model_constraints']\n\n        Args:\n            system\n        \"\"\"",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.three_zone_datadriven_admm.three_zone_util:[9:25]\n==examples.three_zone_datadriven_admm.training_direct:[20:35]\n        contents = f.readlines()\n    contents = [x.strip() for x in contents]\n    contents = contents[32:]\n\n    res_dict = {}\n    title = contents[0].split()\n    contents = contents[2:]\n    for i in range(len(title)):\n        current_list = []\n        for j in range(1, len(contents)):\n            current_content = contents[j].split()\n            current_list.append(float(current_content[i]))\n        res_dict.update({title[i]: current_list})\n\n    weather = pd.DataFrame(res_dict)\n    weather = weather.iloc[23:]",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.admm.admm_example_coordinator:[63:91]\n==examples.admm.admm_example_local:[52:80]\n    ax[1].legend()\n    ax[0].legend()\n    plt.show()\n\n\ndef run_example(\n    until=3000,\n    with_plots=True,\n    start_pred=0,\n    log_level=logging.INFO,\n    cleanup=True,\n    testing: bool = False,\n):\n    # Set the log-level\n    logging.basicConfig(level=log_level)\n\n    # Change the working directly so that relative paths work\n    os.chdir(os.path.abspath(os.path.dirname(__file__)))\n\n    conf_dicts = []\n    for conf in agent_configs:\n        with open(conf) as f:\n            conf_dict = json.load(f)\n        modules = conf_dict[\"modules\"]\n        for i, mod in enumerate(modules):\n            if isinstance(mod, str):\n                with open(mod) as f:\n                    mod = json.load(f)",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.physical.mixed_integer.mixed_integer_mpc:[204:225]\n==examples.one_room_mpc.physical.with_change_control_penalty:[176:197]\n            ],\n        },\n    ],\n}\n\n\ndef run_example(with_plots=True, log_level=logging.INFO, until=10000):\n    # Change the working directly so that relative paths work\n    os.chdir(Path(__file__).parent)\n\n    # Set the log-level\n    logging.basicConfig(level=log_level)\n    mas = LocalMASAgency(\n        agent_configs=[AGENT_MPC, AGENT_SIM], env=ENV_CONFIG, variable_logging=True\n    )\n    mas.run(until=until)\n    results = mas.get_results()\n    if with_plots:\n        import matplotlib.pyplot as plt\n        from agentlib_mpc.utils.plotting.mpc import plot_mpc\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.ann.model:[83:106]\n==examples.one_room_mpc.physical.simple_mpc_multiple_shooting:[99:123]\n        self.T.ode = (\n            self.cp * self.mDot / self.C * (self.T_in - self.T) + self.load / self.C\n        )\n\n        # Define ae\n        self.T_out.alg = self.T  # math operation to get the symbolic variable\n\n        # Constraints: List[(lower bound, function, upper bound)]\n        self.constraints = [\n            # soft constraints\n            (0, self.T + self.T_slack, self.T_upper),\n        ]\n\n        # Objective function\n        objective = sum(\n            [\n                self.r_mDot * self.mDot,\n                self.s_T * self.T_slack**2,\n            ]\n        )\n        return objective\n\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==agentlib_mpc.optimization_backends.casadi_.full:[151:168]\n==agentlib_mpc.optimization_backends.casadi_.minlp:[164:180]\n            )\n            xk_end = fk[\"xf\"]\n            self.k += 1\n            self.pred_time = ts * self.k\n            xk = self.add_opt_var(sys.states)\n            vars_dict[sys.states.name][self.k] = xk\n            self.add_constraint(xk - xk_end, gap_closing=True)\n\n            # add model constraints last due to fatrop\n            self.add_constraint(\n                stage[\"model_constraints\"],\n                lb=stage[\"lb_model_constraints\"],\n                ub=stage[\"ub_model_constraints\"],\n            )\n            self.objective_function += stage[\"cost_function\"] * ts\n\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.three_zone_datadriven_admm.models.simulation_model:[103:116]\n==examples.three_zone_datadriven_admm.training_direct:[133:146]\n        CasadiParameter(\n            name=\"q_T\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for T in objective function\",\n        ),\n        CasadiParameter(\n            name=\"s_T\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for T in objective function\",\n        ),\n    ]",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.gpr.training_gpr:[189:204]\n==examples.one_room_mpc.linreg.training_linreg:[183:198]\n    logging.basicConfig(level=logging.INFO)\n    mas = LocalMASAgency(\n        agent_configs=configs(\n            training_time=training_time, plot_results=plot_results, step_size=step_size\n        ),\n        env=env_config,\n        variable_logging=False,\n    )\n    mas.run(until=training_time + 100)\n    if plot_results:\n        results = mas.get_results(cleanup=True)\n        plot(results)\n\n\nif __name__ == \"__main__\":",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.gpr.training_gpr:[88:102]\n==examples.one_room_mpc.linreg.training_linreg:[83:97]\n                \"inputs\": [\n                    {\"name\": \"mDot\", \"value\": 0.0225, \"source\": \"PID\"},\n                    {\"name\": \"load\", \"value\": 30, \"source\": \"Simulator\"},\n                    {\"name\": \"T_in\", \"value\": 290.15},\n                ],\n                \"outputs\": [{\"name\": \"T\", \"value\": 273.15 + 22}],\n                # the lags here are not needed, but we have them to validate the code\n                \"lags\": {\"load\": 2, \"T\": 2, \"mDot\": 3},\n                \"output_types\": {\"T\": \"difference\"},\n                \"interpolations\": {\"mDot\": \"mean_over_interval\"},\n                \"train_share\": 0.6,\n                \"validation_share\": 0.2,\n                \"test_share\": 0.2,\n                \"retrain_delay\": training_time,",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.physical.simple_mpc_with_time_variant_inputs:[60:74]\n==examples.three_zone_datadriven_admm.custom_modules.predictor:[36:51]\n        ),\n    ]\n\n    parameters: al.AgentVariables = [\n        # prediction times\n        al.AgentVariable(\n            name=\"sampling_time\", value=10, description=\"Sampling time for prediction.\"\n        ),\n        al.AgentVariable(\n            name=\"prediction_length\",\n            value=10,\n            description=\"Number of sampling points for prediction.\",\n        ),\n        al.AgentVariable(\n            name=\"update_interval\",",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.admm.models.simulation_model:[51:65]\n==examples.one_room_mpc.physical.simple_mpc_with_time_variant_inputs:[173:186]\n            value=0,\n            unit=\"K\",\n            description=\"Slack variable of temperature of zone 0\",\n        ),\n    ]\n    parameters: List[CasadiParameter] = [\n        CasadiParameter(\n            name=\"cp\",\n            value=1000,\n            unit=\"J/kg*K\",\n            description=\"thermal capacity of the air\",\n        ),\n        CasadiParameter(",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.gpr.simple_mpc_gpr:[40:53]\n==examples.one_room_mpc.physical.simple_mpc:[145:158]\n                },\n                \"time_step\": 300,\n                \"prediction_horizon\": 15,\n                \"parameters\": [\n                    {\"name\": \"s_T\", \"value\": 3},\n                    {\"name\": \"r_mDot\", \"value\": 1},\n                ],\n                \"inputs\": [\n                    {\"name\": \"T_in\", \"value\": 290.15},\n                    {\"name\": \"load\", \"value\": 150},\n                    {\"name\": \"T_upper\", \"value\": ub},\n                ],\n                \"controls\": [{\"name\": \"mDot\", \"value\": 0.02, \"ub\": 0.05, \"lb\": 0}],",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.Estimators.mhe_example:[113:126]\n==examples.one_room_mpc.physical.simple_mpc_multiple_shooting:[76:89]\n        CasadiParameter(\n            name=\"s_T\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for T in constraint function\",\n        ),\n        CasadiParameter(\n            name=\"r_mDot\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for mDot in objective function\",\n        ),\n    ]",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.linreg.simple_mpc_linreg:[40:53]\n==examples.one_room_mpc.physical.simple_mpc_multiple_shooting:[145:158]\n            },\n            \"time_step\": 300,\n            \"prediction_horizon\": 15,\n            \"parameters\": [\n                {\"name\": \"s_T\", \"value\": 3},\n                {\"name\": \"r_mDot\", \"value\": 1},\n            ],\n            \"inputs\": [\n                {\"name\": \"T_in\", \"value\": 290.15},\n                {\"name\": \"load\", \"value\": 150},\n                {\"name\": \"T_upper\", \"value\": ub},\n            ],\n            \"controls\": [{\"name\": \"mDot\", \"value\": 0.02, \"ub\": 0.05, \"lb\": 0}],",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.physical.simple_mpc_time_dependent_obj:[76:89]\n==examples.one_room_mpc.physical.simple_mpc_with_time_variant_inputs:[196:209]\n        ),\n        CasadiParameter(\n            name=\"s_T\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for T in constraint function\",\n        ),\n        CasadiParameter(\n            name=\"r_mDot\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for mDot in objective function\",\n        ),",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.physical.simple_mpc_multiple_shooting:[120:136]\n==examples.one_room_mpc.physical.simple_mpc_time_dependent_obj:[139:155]\n        return objective\n\n\nENV_CONFIG = {\"rt\": False, \"factor\": 0.01, \"t_sample\": 60}\n\nAGENT_MPC = {\n    \"id\": \"myMPCAgent\",\n    \"modules\": [\n        {\"module_id\": \"Ag1Com\", \"type\": \"local_broadcast\"},\n        {\n            \"module_id\": \"myMPC\",\n            \"type\": \"agentlib_mpc.mpc\",\n            \"optimization_backend\": {\n                \"type\": \"casadi\",\n                \"model\": {\"type\": {\"file\": __file__, \"class_name\": \"MyCasadiModel\"}},\n                \"discretization_options\": {",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==admm_4rooms_main:[54:75]\n==admm_4rooms_main_coord:[52:73]\n        fig, ax = plt.subplots(2, 1)\n        ax[1].set_ylim([0, 0.05])\n        ax[0].axhline(296, label=\"reference value\")\n\n        for i in range(1, 5):\n            sim_res = results[\"Simulation\"][f\"room_{i}\"]\n            ax[0].plot(sim_res[\"T_out\"], label=f\"temperature_{i}\")\n            ax[1].plot(sim_res[\"mDot\"], label=f\"mDot_{i}\")\n\n        # ax[1].plot(res_sim[\"mDot\"], label=\"air mass flow\")\n        # ax[1].legend()\n        # ax[0].legend()\n        plt.show()\n\n    return results\n\n\nif __name__ == \"__main__\":\n    run_example(\n        with_plots=True,\n        until=1800,",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==agentlib_mpc.optimization_backends.casadi_.casadi_ml:[83:95]\n==agentlib_mpc.optimization_backends.casadi_.full:[25:38]\n            variables=model.get_inputs(var_ref.controls),\n            ref_list=var_ref.controls,\n            use_in_stage_function=False,\n            assert_complete=True,\n        )\n        self.r_del_u = OptimizationParameter.declare(\n            denotation=\"r_del_u\",\n            variables=[CasadiParameter(name=r_del_u) for r_del_u in var_ref.r_del_u],\n            ref_list=var_ref.r_del_u,\n            use_in_stage_function=False,\n            assert_complete=True,\n        )",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==agentlib_mpc.optimization_backends.casadi_.basic:[192:205]\n==agentlib_mpc.optimization_backends.casadi_.casadi_ml:[256:269]\n        constraints = {\"model_constraints\": system.model_constraints}\n\n        inputs = [\n            q.full_symbolic\n            for q in all_system_quantities.values()\n            if q.use_in_stage_function\n        ]\n        inputs.append(system.time)\n        input_denotations = [\n            q.name\n            for denotation, q in all_system_quantities.items()\n            if q.use_in_stage_function\n        ]",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.gpr.simple_mpc_gpr:[120:132]\n==examples.one_room_mpc.physical.simple_mpc_multiple_shooting:[230:243]\n    fig, ax = plt.subplots(2, 1, sharex=True)\n    t_sim = sim_res[\"T_out\"]\n    t_sample = t_sim.index[1] - t_sim.index[0]\n    aie_kh = (t_sim - ub).abs().sum() * t_sample / 3600\n    energy_cost_kWh = (\n        (sim_res[\"mDot\"] * (sim_res[\"T_out\"] - sim_res[\"T_in\"])).sum()\n        * t_sample\n        * 1\n        / 3600\n    )  # cp is 1\n    print(f\"Absoulute integral error: {aie_kh} Kh.\")\n    print(f\"Cooling energy used: {energy_cost_kWh} kWh.\")\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.Estimators.mhe_example:[260:272]\n==examples.one_room_mpc.physical.simple_mpc_time_dependent_obj:[190:202]\n                ],\n            },\n        ],\n    }\n    AGENT_SIM = {\n        \"id\": \"SimAgent\",\n        \"modules\": [\n            {\"module_id\": \"Ag1Com\", \"type\": \"local_broadcast\"},\n            {\n                \"module_id\": \"room\",\n                \"type\": \"simulator\",\n                \"model\": {",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.Estimators.mhe_example:[113:125]\n==examples.one_room_mpc.physical.simple_mpc_time_dependent_obj:[77:89]\n        CasadiParameter(\n            name=\"s_T\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for T in constraint function\",\n        ),\n        CasadiParameter(\n            name=\"r_mDot\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for mDot in objective function\",\n        ),",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.linreg.simple_mpc_linreg:[121:133]\n==examples.one_room_mpc.physical.simple_mpc_time_dependent_obj:[252:265]\n        fig, ax = plt.subplots(2, 1, sharex=True)\n        t_sim = sim_res[\"T_out\"]\n        t_sample = t_sim.index[1] - t_sim.index[0]\n        aie_kh = (t_sim - ub).abs().sum() * t_sample / 3600\n        energy_cost_kWh = (\n            (sim_res[\"mDot\"] * (sim_res[\"T_out\"] - sim_res[\"T_in\"])).sum()\n            * t_sample\n            * 1\n            / 3600\n        )  # cp is 1\n        print(f\"Absoulute integral error: {aie_kh} Kh.\")\n        print(f\"Cooling energy used: {energy_cost_kWh} kWh.\")",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.physical.simple_mpc_time_dependent_obj:[208:228]\n==examples.one_room_mpc.physical.with_change_control_penalty:[171:189]\n            \"outputs\": [\n                {\"name\": \"T_out\", \"value\": 298, \"alias\": \"T\"},\n            ],\n            \"inputs\": [\n                {\"name\": \"mDot\", \"value\": 0.02, \"alias\": \"mDot\"},\n            ],\n        },\n    ],\n}\n\n\ndef run_example(\n    with_plots=True, log_level=logging.INFO, until=10000, with_dashboard=False\n):\n    # Change the working directly so that relative paths work\n    os.chdir(Path(__file__).parent)\n\n    # Set the log-level\n    logging.basicConfig(level=log_level)\n    mas = LocalMASAgency(",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.physical.simple_mpc_time_dependent_obj:[139:154]\n==examples.one_room_mpc.physical.with_change_control_penalty:[112:127]\n        return objective\n\n\nENV_CONFIG = {\"rt\": False, \"factor\": 0.01, \"t_sample\": 60}\n\nAGENT_MPC = {\n    \"id\": \"myMPCAgent\",\n    \"modules\": [\n        {\"module_id\": \"Ag1Com\", \"type\": \"local_broadcast\"},\n        {\n            \"module_id\": \"myMPC\",\n            \"type\": \"agentlib_mpc.mpc\",\n            \"optimization_backend\": {\n                \"type\": \"casadi\",\n                \"model\": {\"type\": {\"file\": __file__, \"class_name\": \"MyCasadiModel\"}},",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==agentlib_mpc.optimization_backends.casadi_.casadi_admm_ml:[202:224]\n==agentlib_mpc.optimization_backends.casadi_.core.system:[57:76]\n        return [\n            var\n            for var in self.__dict__.values()\n            if isinstance(var, OptimizationVariable)\n        ]\n\n    @property\n    def parameters(self) -> list[OptimizationParameter]:\n        return [\n            var\n            for var in self.__dict__.values()\n            if isinstance(var, OptimizationParameter)\n        ]\n\n    @property\n    def quantities(self) -> list[Union[OptimizationParameter, OptimizationVariable]]:\n        return self.variables + self.parameters\n\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==agentlib_mpc.optimization_backends.casadi_.basic:[310:324]\n==agentlib_mpc.optimization_backends.casadi_.mhe:[331:345]\n        state_k_end = collocation.D[0] * state_at_beginning\n        for j in range(1, collocation.order + 1):\n            # Expression for the state derivative at the collocation point\n            xp = collocation.C[0, j] * state_at_beginning\n            for r in range(collocation.order):\n                xp = xp + collocation.C[r + 1, j] * state_collocation[r]\n\n            stage = self._stage_function(\n                **{states.name: state_collocation[j - 1]},\n                **opt_pars_collocation[j - 1],\n                **opt_vars_collocation[j - 1],\n                **constants,\n            )\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==agentlib_mpc.optimization_backends.casadi_.basic:[397:411]\n==agentlib_mpc.optimization_backends.casadi_.minlp:[128:142]\n        vars_dict = {sys.states.name: {}}\n        n = self.options.prediction_horizon\n        ts = self.options.time_step\n        opts = {\"t0\": 0, \"tf\": ts}\n        # Initial State\n        x0 = self.add_opt_par(sys.initial_state)\n        xk = self.add_opt_var(sys.states, lb=x0, ub=x0, guess=x0)\n        vars_dict[sys.states.name][0] = xk\n        const_par = self.add_opt_par(sys.model_parameters)\n        # ODE is used here because the algebraics can be calculated with the stage function\n        opt_integrator = self._create_ode(sys, opts, integrator=self.options.integrator)\n        # initiate states\n        while self.k < n:\n            uk = self.add_opt_var(sys.controls)",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==agentlib_mpc.optimization_backends.casadi_.mhe:[458:471]\n==agentlib_mpc.utils.sampling:[75:88]\n        target_grid_length = len(grid)\n        if isinstance(trajectory, (float, int)):\n            # return constant trajectory for scalars\n            return [trajectory] * target_grid_length\n        if isinstance(trajectory, list):\n            # return lists of matching length without timestamps\n            if len(trajectory) == target_grid_length:\n                return trajectory\n            raise ValueError(\n                f\"Passed list with length {len(trajectory)} \"\n                f\"does not match target ({target_grid_length}).\"\n            )\n        if isinstance(trajectory, pd.Series):",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.ann.simple_mpc_nn:[7:24]\n==examples.one_room_mpc.ann.with_learned_cost.simple_mpc_nn:[8:25]\nlogger = logging.getLogger(__name__)\n\n# script variables\nub = 295.15\n\nENV_CONFIG = {\"rt\": False, \"factor\": 0.01, \"t_sample\": 60}\n\n\ndef agent_configs(ann_path: str) -> list[dict]:\n    agent_mpc = {\n        \"id\": \"myMPCAgent\",\n        \"modules\": [\n            {\"module_id\": \"Ag1Com\", \"type\": \"local_broadcast\"},\n            {\n                \"module_id\": \"myMPC\",\n                \"type\": \"agentlib_mpc.mpc\",\n                \"optimization_backend\": {",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.Estimators.mhe_example:[261:272]\n==examples.one_room_mpc.physical.with_change_control_penalty:[155:166]\n            },\n        ],\n    }\n    AGENT_SIM = {\n        \"id\": \"SimAgent\",\n        \"modules\": [\n            {\"module_id\": \"Ag1Com\", \"type\": \"local_broadcast\"},\n            {\n                \"module_id\": \"room\",\n                \"type\": \"simulator\",\n                \"model\": {",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.ann.model:[179:196]\n==examples.one_room_mpc.physical.with_change_control_penalty:[96:115]\n        self.T_out.alg = self.T  # math operation to get the symbolic variable\n\n        # Constraints: List[(lower bound, function, upper bound)]\n        self.constraints = [\n            # soft constraints\n            (0, self.T + self.T_slack, self.T_upper),\n        ]\n\n        # Objective function\n        objective = sum(\n            [\n                self.r_mDot * self.mDot,\n                self.s_T * self.T_slack**2,\n            ]\n        )\n\n        return objective\n\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.physical.mixed_integer.mixed_integer_mpc:[7:25]\n==examples.one_room_mpc.physical.with_change_control_penalty:[4:21]\nfrom agentlib_mpc.models.casadi_model import (\n    CasadiModel,\n    CasadiInput,\n    CasadiState,\n    CasadiParameter,\n    CasadiOutput,\n    CasadiModelConfig,\n)\nfrom agentlib.utils.multi_agent_system import LocalMASAgency\n\n\nlogger = logging.getLogger(__name__)\n\n# script variables\nub = 295.15\n\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.physical.simple_mpc_with_time_variant_inputs:[190:201]\n==examples.three_zone_datadriven_admm.models.simulation_model:[102:113]\n        ),\n        CasadiParameter(\n            name=\"q_T\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for T in objective function\",\n        ),\n        CasadiParameter(\n            name=\"s_T\",\n            value=1,\n            unit=\"-\",",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.gpr.model:[179:196]\n==examples.one_room_mpc.physical.simple_mpc:[104:123]\n        self.T_out.alg = self.T  # math operation to get the symbolic variable\n\n        # Constraints: List[(lower bound, function, upper bound)]\n        self.constraints = [\n            # soft constraints\n            (0, self.T + self.T_slack, self.T_upper),\n        ]\n\n        # Objective function\n        objective = sum(\n            [\n                self.r_mDot * self.mDot,\n                self.s_T * self.T_slack**2,\n            ]\n        )\n\n        return objective",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.physical.mixed_integer.mixed_integer_mpc_cia:[132:147]\n==examples.one_room_mpc.physical.simple_mpc:[116:131]\n                self.s_T * self.T_slack**2,\n            ]\n        )\n\n        return objective\n\n\nENV_CONFIG = {\"rt\": False, \"factor\": 0.01, \"t_sample\": 60}\n\nAGENT_MPC = {\n    \"id\": \"myMPCAgent\",\n    \"modules\": [\n        {\"module_id\": \"Ag1Com\", \"type\": \"local_broadcast\"},\n        {\n            \"module_id\": \"myMPC\",",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.linreg.model:[179:196]\n==examples.one_room_mpc.physical.simple_mpc_multiple_shooting:[104:123]\n        self.T_out.alg = self.T  # math operation to get the symbolic variable\n\n        # Constraints: List[(lower bound, function, upper bound)]\n        self.constraints = [\n            # soft constraints\n            (0, self.T + self.T_slack, self.T_upper),\n        ]\n\n        # Objective function\n        objective = sum(\n            [\n                self.r_mDot * self.mDot,\n                self.s_T * self.T_slack**2,\n            ]\n        )\n\n        return objective\n\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.physical.mixed_integer.mixed_integer_mpc:[133:148]\n==examples.one_room_mpc.physical.simple_mpc_multiple_shooting:[116:131]\n                self.s_T * self.T_slack**2,\n            ]\n        )\n\n        return objective\n\n\nENV_CONFIG = {\"rt\": False, \"factor\": 0.01, \"t_sample\": 60}\n\nAGENT_MPC = {\n    \"id\": \"myMPCAgent\",\n    \"modules\": [\n        {\"module_id\": \"Ag1Com\", \"type\": \"local_broadcast\"},\n        {\n            \"module_id\": \"myMPC\",",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.ann.simple_mpc_nn:[129:141]\n==examples.one_room_mpc.physical.simple_mpc_time_dependent_obj:[253:265]\n        t_sim = sim_res[\"T_out\"]\n        t_sample = t_sim.index[1] - t_sim.index[0]\n        aie_kh = (t_sim - ub).abs().sum() * t_sample / 3600\n        energy_cost_kWh = (\n            (sim_res[\"mDot\"] * (sim_res[\"T_out\"] - sim_res[\"T_in\"])).sum()\n            * t_sample\n            * 1\n            / 3600\n        )  # cp is 1\n        print(f\"Absoulute integral error: {aie_kh} Kh.\")\n        print(f\"Cooling energy used: {energy_cost_kWh} kWh.\")\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.admm.models.ca_room_model:[0:14]\n==models.room_model:[0:14]\nfrom agentlib_mpc.models.casadi_model import (\n    CasadiModel,\n    CasadiInput,\n    CasadiState,\n    CasadiParameter,\n    CasadiOutput,\n    CasadiModelConfig,\n)\n\n\nclass CaCooledRoomConfig(CasadiModelConfig):\n    inputs: list[CasadiInput] = [\n        # couplings\n        CasadiInput(",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==agentlib_mpc.optimization_backends.casadi_.basic:[15:27]\n==agentlib_mpc.optimization_backends.casadi_.mhe:[18:30]\nfrom agentlib_mpc.optimization_backends.casadi_.core.casadi_backend import CasADiBackend\nfrom agentlib_mpc.optimization_backends.casadi_.core.VariableGroup import (\n    OptimizationQuantity,\n    OptimizationVariable,\n    OptimizationParameter,\n)\nfrom agentlib_mpc.optimization_backends.casadi_.core.discretization import (\n    Discretization,\n)\nfrom agentlib_mpc.optimization_backends.casadi_.core.system import System\n\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==agentlib_mpc.optimization_backends.casadi_.basic:[411:424]\n==agentlib_mpc.optimization_backends.casadi_.full:[129:143]\n            dk = self.add_opt_par(sys.non_controlled_inputs)\n            zk = self.add_opt_var(sys.algebraics)\n            yk = self.add_opt_var(sys.outputs)\n            # get stage\n            stage_arguments = {\n                # variables\n                sys.states.name: xk,\n                sys.algebraics.name: zk,\n                sys.outputs.name: yk,\n                # parameters\n                sys.controls.name: uk,\n                sys.non_controlled_inputs.name: dk,\n                sys.model_parameters.name: const_par,",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==agentlib_mpc.optimization_backends.backend:[70:82]\n==agentlib_mpc.optimization_backends.casadi_.minlp_cia:[47:59]\n                except FileNotFoundError:\n                    pass\n            else:\n                if os.path.isfile(info.data[\"results_file\"]):\n                    raise FileExistsError(\n                        f\"Results file {res_file} already exists and will not be \"\n                        f\"overwritten automatically. Set 'overwrite_result_file' to \"\n                        f\"True to enable automatic overwrite it.\"\n                    )\n        return overwrite_result_file\n\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.three_zone_datadriven_admm.models.AHU:[22:34]\n==examples.three_zone_datadriven_admm.models.CCA:[13:25]\n    ]\n\n    states: List[CasadiState] = []\n\n    parameters: List[CasadiParameter] = [\n        CasadiParameter(\n            name=\"r_T_v\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for mDot in objective function\",\n        ),\n        CasadiParameter(",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.admm.models.ca_room_model:[43:56]\n==examples.admm.models.simulation_model:[44:57]\n        CasadiState(\n            name=f\"T_0\", value=293.15, unit=\"K\", description=\"Temperature of zone 0\"\n        ),\n        # algebraic\n        # slack variables\n        CasadiState(\n            name=f\"T_0_slack\",\n            value=0,\n            unit=\"K\",\n            description=\"Slack variable of temperature of zone 0\",\n        ),\n    ]\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.ann.with_learned_cost.training_nn:[198:210]\n==examples.one_room_mpc.linreg.training_linreg:[187:199]\n        ),\n        env=env_config,\n        variable_logging=False,\n    )\n    mas.run(until=training_time + 100)\n    if plot_results:\n        results = mas.get_results(cleanup=True)\n        plot(results)\n\n\nif __name__ == \"__main__\":\n    main(training_time=3600 * 24 * 0.9, plot_results=True, step_size=300)",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.linreg.simple_mpc_linreg:[73:83]\n==examples.one_room_mpc.physical.with_change_control_penalty:[170:184]\n            \"update_inputs_on_callback\": False,\n            \"outputs\": [\n                {\"name\": \"T_out\", \"value\": 298, \"alias\": \"T\"},\n            ],\n            \"inputs\": [\n                {\"name\": \"mDot\", \"value\": 0.02, \"alias\": \"mDot\"},\n            ],\n        },\n    ],\n}\n\n\ndef run_example(with_plots=True, log_level=logging.INFO, until=10000):\n    # Change the working directly so that relative paths work",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.physical.mixed_integer.mixed_integer_mpc_cia:[202:218]\n==examples.one_room_mpc.physical.with_change_control_penalty:[176:192]\n            ],\n        },\n    ],\n}\n\n\ndef run_example(with_plots=True, log_level=logging.INFO, until=10000):\n    # Change the working directly so that relative paths work\n    os.chdir(Path(__file__).parent)\n\n    # Set the log-level\n    logging.basicConfig(level=log_level)\n    mas = LocalMASAgency(\n        agent_configs=[AGENT_MPC, AGENT_SIM], env=ENV_CONFIG, variable_logging=True\n    )\n    mas.run(until=until)",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.physical.simple_mpc_with_time_variant_inputs:[191:201]\n==examples.three_zone_datadriven_admm.training_direct:[133:143]\n        CasadiParameter(\n            name=\"q_T\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for T in objective function\",\n        ),\n        CasadiParameter(\n            name=\"s_T\",\n            value=1,\n            unit=\"-\",",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.admm.models.simulation_model:[54:65]\n==examples.one_room_mpc.physical.simple_mpc:[63:74]\n        ),\n    ]\n\n    parameters: List[CasadiParameter] = [\n        CasadiParameter(\n            name=\"cp\",\n            value=1000,\n            unit=\"J/kg*K\",\n            description=\"thermal capacity of the air\",\n        ),\n        CasadiParameter(",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.Estimators.mhe_example:[163:180]\n==examples.one_room_mpc.physical.simple_mpc_multiple_shooting:[107:123]\n        self.constraints = [\n            # soft constraints\n            (0, self.T + self.T_slack, self.T_upper),\n        ]\n\n        # Objective function\n        objective = sum(\n            [\n                self.r_mDot * self.mDot,\n                self.s_T * self.T_slack**2,\n            ]\n        )\n\n        return objective\n\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.physical.simple_mpc_multiple_shooting:[63:74]\n==examples.one_room_mpc.physical.simple_mpc_with_time_variant_inputs:[176:186]\n        ),\n    ]\n\n    parameters: List[CasadiParameter] = [\n        CasadiParameter(\n            name=\"cp\",\n            value=1000,\n            unit=\"J/kg*K\",\n            description=\"thermal capacity of the air\",\n        ),\n        CasadiParameter(",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.physical.simple_mpc_time_dependent_obj:[42:55]\n==examples.one_room_mpc.physical.simple_mpc_with_time_variant_inputs:[157:168]\n        ),\n        CasadiInput(\n            name=\"T_upper\",\n            value=294.15,\n            unit=\"K\",\n            description=\"Upper boundary (soft) for T.\",\n        ),\n    ]\n    states: List[CasadiState] = [\n        # differential\n        CasadiState(",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.physical.simple_mpc_multiple_shooting:[91:113]\n==examples.one_room_mpc.physical.simple_mpc_time_dependent_obj:[99:123]\n    ]\n\n\nclass MyCasadiModel(CasadiModel):\n    config: MyCasadiModelConfig\n\n    def setup_system(self):\n        # Define ode\n\n\n        self.T.ode = (\n            self.cp * self.mDot / self.C * (self.T_in - self.T) + self.load / self.C\n        )\n\n        # Define ae\n        self.T_out.alg = self.T  # math operation to get the symbolic variable\n\n        # Constraints: List[(lower bound, function, upper bound)]\n        self.constraints = [\n            # soft constraints\n            (0, self.T + self.T_slack, self.T_upper),\n        ]\n\n        # Objective function",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.physical.simple_mpc_time_dependent_obj:[64:75]\n==models.room_model:[33:46]\n        ),\n        # algebraic\n        # slack variables\n    ]\n\n    parameters: List[CasadiParameter] = [\n        CasadiParameter(\n            name=\"cp\",\n            value=1000,\n            unit=\"J/kg*K\",\n            description=\"thermal capacity of the air\",\n        ),\n        CasadiParameter(",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.admm.models.ca_room_model:[53:64]\n==models.room_model:[50:61]\n        ),\n    ]\n\n    parameters: list[CasadiParameter] = [\n        CasadiParameter(\n            name=\"cp\",\n            value=1000,\n            unit=\"J/kg*K\",\n            description=\"thermal capacity of the air\",\n        ),\n        CasadiParameter(",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.physical.simple_mpc_with_time_variant_inputs:[148:159]\n==models.room_model:[21:32]\n        CasadiInput(\n            name=\"T_in\", value=290.15, unit=\"K\", description=\"Inflow air temperature\"\n        ),\n        # settings\n        CasadiInput(\n            name=\"T_set\",\n            value=294.15,\n            unit=\"K\",\n            description=\"Set point for T in objective function\",\n        ),\n        CasadiInput(",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==admm_4rooms_main:[15:25]\n==admm_4rooms_main_coord:[29:40]\n    conf_dicts = []\n    for conf in agent_configs:\n        with open(conf) as f:\n            conf_dict = json.load(f)\n        modules = conf_dict[\"modules\"]\n        for i, mod in enumerate(modules):\n            if isinstance(mod, str):\n                with open(mod) as f:\n                    mod = json.load(f)\n            if mod[\"type\"] == \"agentlib_mpc.admm_local\":",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==agentlib_mpc.modules.dmpc.admm.admm:[832:848]\n==agentlib_mpc.modules.mpc_full:[139:167]\n        for hist_var in self._lags_dict_seconds:\n            past_values = self.history[hist_var]\n            if not past_values:\n                # if the history of a variable is empty, fallback to the scalar value\n                continue\n\n            # create copy to not mess up scalar value of original variable in case\n            # fallback is needed\n            updated_var = variables[hist_var].copy(\n                update={\"value\": pd.Series(past_values)}\n            )\n            variables[hist_var] = updated_var\n\n        return {**variables, **self._internal_variables}\n\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==agentlib_mpc.optimization_backends.casadi_.casadi_admm_ml:[420:433]\n==agentlib_mpc.optimization_backends.casadi_.casadi_ml:[272:284]\n        constraints_func = [c.function for c in constraints.values()]\n        constraints_lb = [c.lb for c in constraints.values()]\n        constraints_ub = [c.ub for c in constraints.values()]\n        constraint_denotations = list(constraints.keys())\n        constraint_lb_denotations = [LB_PREFIX + k for k in constraints]\n        constraint_ub_denotations = [UB_PREFIX + k for k in constraints]\n\n        # create a dictionary which holds all the inputs for the sim step of the model\n        all_input_variables = {}\n        lagged_inputs: dict[int, dict[str, ca.MX]] = {}\n        # dict[lag, dict[denotation, list[var_name]]]\n        lagged_input_names: dict[int, dict[str, list[str]]] = {}",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==agentlib_mpc.optimization_backends.casadi_.basic:[189:199]\n==agentlib_mpc.optimization_backends.casadi_.mhe:[214:224]\n        all_system_quantities: dict[str, OptimizationQuantity] = {\n            var.name: var for var in system.quantities\n        }\n        constraints = {\"model_constraints\": system.model_constraints}\n\n        inputs = [\n            q.full_symbolic\n            for q in all_system_quantities.values()\n            if q.use_in_stage_function\n        ]",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==agentlib_mpc.optimization_backends.casadi_.admm:[157:168]\n==agentlib_mpc.optimization_backends.casadi_.basic:[148:159]\n            }\n            xk_end, constraints = self._collocation_inner_loop(\n                collocation=collocation_matrices,\n                state_at_beginning=xk,\n                states=sys.states,\n                opt_vars=opt_vars_inside_inner,\n                opt_pars=opt_pars_inside_inner,\n                const=constant_over_inner,\n            )\n\n            # increment loop counter and time",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==agentlib_mpc.optimization_backends.casadi_.basic:[434:444]\n==agentlib_mpc.optimization_backends.casadi_.full:[148:157]\n            fk = opt_integrator(\n                x0=xk,\n                p=ca.vertcat(uk, dk, const_par, zk, yk),\n            )\n            xk_end = fk[\"xf\"]\n            self.k += 1\n            self.pred_time = ts * self.k\n            xk = self.add_opt_var(sys.states)\n            vars_dict[sys.states.name][self.k] = xk",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.admm.admm_example_coordinator:[34:52]\n==examples.admm.admm_example_coordinator_multiprocessing:[29:42]\nagent_configs = [\n    \"configs//cooler_with_coordinator.json\",\n    \"configs//cooled_room_with_coordinator.json\",\n    \"configs//coordinator.json\",\n    \"configs//simulator.json\",\n]\n\n\ndef plot(results, start_pred: float):\n    import matplotlib.pyplot as plt\n    from agentlib_mpc.utils.analysis import admm_at_time_step\n\n    res_sim = results[\"Simulation\"][\"simulator\"]",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.ann.with_learned_cost.training_nn:[198:209]\n==examples.one_room_mpc.gpr.training_gpr:[193:204]\n        ),\n        env=env_config,\n        variable_logging=False,\n    )\n    mas.run(until=training_time + 100)\n    if plot_results:\n        results = mas.get_results(cleanup=True)\n        plot(results)\n\n\nif __name__ == \"__main__\":",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.ann.with_learned_cost.model:[102:137]\n==examples.one_room_mpc.linreg.model:[100:136]\n                self.s_T * self.T_slack**2,\n            ]\n        )\n        return objective\n\n\nclass DataDrivenModelConfig(CasadiMLModelConfig, PhysicalModelConfig):\n    # use the same variables as physical,  have some attributes only the ANN Config has\n    inputs: List[CasadiInput] = [\n        # controls\n        CasadiInput(\n            name=\"mDot\", value=0.0225, unit=\"K\", description=\"Air mass flow into zone\"\n        ),\n        # disturbances\n        CasadiInput(\n            name=\"load\", value=10, unit=\"W\", description=\"Heat \" \"load into zone\"\n        ),\n        CasadiInput(\n            name=\"T_in\", value=290.15, unit=\"K\", description=\"Inflow air temperature\"\n        ),\n        # settings\n        CasadiInput(\n            name=\"T_upper\",\n            value=294.15,\n            unit=\"K\",\n            description=\"Upper boundary (soft) for T.\",\n        ),\n    ]\n\n    states: List[CasadiState] = [\n        # differential\n        CasadiState(\n            name=\"T\", value=293.15, unit=\"K\", description=\"Temperature of zone\"\n        ),\n        # algebraic",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.ann.model:[100:168]\n==examples.one_room_mpc.linreg.model:[100:168]\n                self.s_T * self.T_slack**2,\n            ]\n        )\n        return objective\n\n\nclass DataDrivenModelConfig(CasadiMLModelConfig, PhysicalModelConfig):\n    # use the same variables as physical,  have some attributes only the ANN Config has\n    inputs: List[CasadiInput] = [\n        # controls\n        CasadiInput(\n            name=\"mDot\", value=0.0225, unit=\"K\", description=\"Air mass flow into zone\"\n        ),\n        # disturbances\n        CasadiInput(\n            name=\"load\", value=10, unit=\"W\", description=\"Heat \" \"load into zone\"\n        ),\n        CasadiInput(\n            name=\"T_in\", value=290.15, unit=\"K\", description=\"Inflow air temperature\"\n        ),\n        # settings\n        CasadiInput(\n            name=\"T_upper\",\n            value=294.15,\n            unit=\"K\",\n            description=\"Upper boundary (soft) for T.\",\n        ),\n    ]\n\n    states: List[CasadiState] = [\n        # differential\n        CasadiState(\n            name=\"T\", value=293.15, unit=\"K\", description=\"Temperature of zone\"\n        ),\n        # algebraic\n        # slack variables\n        CasadiState(\n            name=\"T_slack\",\n            value=0,\n            unit=\"K\",\n            description=\"Slack variable of temperature of zone\",\n        ),\n    ]\n\n    parameters: List[CasadiParameter] = [\n        CasadiParameter(\n            name=\"cp\",\n            value=1000,\n            unit=\"J/kg*K\",\n            description=\"thermal capacity of the air\",\n        ),\n        CasadiParameter(\n            name=\"C\", value=100000, unit=\"J/K\", description=\"thermal capacity of zone\"\n        ),\n        CasadiParameter(\n            name=\"s_T\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for T in constraint function\",\n        ),\n        CasadiParameter(\n            name=\"r_mDot\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for mDot in objective function\",\n        ),\n    ]\n    outputs: List[CasadiOutput] = [",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.ann.training_nn:[207:218]\n==examples.one_room_mpc.linreg.training_linreg:[187:198]\n        ),\n        env=env_config,\n        variable_logging=False,\n    )\n    mas.run(until=training_time + 100)\n    if plot_results:\n        results = mas.get_results(cleanup=True)\n        plot(results)\n\n\nif __name__ == \"__main__\":",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.ann.training_nn:[88:98]\n==examples.one_room_mpc.linreg.training_linreg:[83:93]\n                \"inputs\": [\n                    {\"name\": \"mDot\", \"value\": 0.0225, \"source\": \"PID\"},\n                    {\"name\": \"load\", \"value\": 30, \"source\": \"Simulator\"},\n                    {\"name\": \"T_in\", \"value\": 290.15},\n                ],\n                \"outputs\": [{\"name\": \"T\", \"value\": 273.15 + 22}],\n                # the lags here are not needed, but we have them to validate the code\n                \"lags\": {\"load\": 2, \"T\": 2, \"mDot\": 3},\n                \"output_types\": {\"T\": \"difference\"},\n                \"interpolations\": {\"mDot\": \"mean_over_interval\"},",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.gpr.model:[83:99]\n==examples.one_room_mpc.physical.simple_mpc:[99:115]\n        self.T.ode = (\n            self.cp * self.mDot / self.C * (self.T_in - self.T) + self.load / self.C\n        )\n\n        # Define ae\n        self.T_out.alg = self.T  # math operation to get the symbolic variable\n\n        # Constraints: List[(lower bound, function, upper bound)]\n        self.constraints = [\n            # soft constraints\n            (0, self.T + self.T_slack, self.T_upper),\n        ]\n\n        # Objective function\n        objective = sum(\n            [",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.physical.mixed_integer.mixed_integer_mpc_cia:[7:17]\n==examples.one_room_mpc.physical.simple_mpc:[7:17]\nfrom agentlib_mpc.models.casadi_model import (\n    CasadiModel,\n    CasadiInput,\n    CasadiState,\n    CasadiParameter,\n    CasadiOutput,\n    CasadiModelConfig,\n)\nfrom agentlib.utils.multi_agent_system import LocalMASAgency\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.linreg.model:[83:99]\n==examples.one_room_mpc.physical.simple_mpc_multiple_shooting:[99:115]\n        self.T.ode = (\n            self.cp * self.mDot / self.C * (self.T_in - self.T) + self.load / self.C\n        )\n\n        # Define ae\n        self.T_out.alg = self.T  # math operation to get the symbolic variable\n\n        # Constraints: List[(lower bound, function, upper bound)]\n        self.constraints = [\n            # soft constraints\n            (0, self.T + self.T_slack, self.T_upper),\n        ]\n\n        # Objective function\n        objective = sum(\n            [",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.physical.mixed_integer.mixed_integer_mpc:[7:18]\n==examples.one_room_mpc.physical.simple_mpc_multiple_shooting:[7:17]\nfrom agentlib_mpc.models.casadi_model import (\n    CasadiModel,\n    CasadiInput,\n    CasadiState,\n    CasadiParameter,\n    CasadiOutput,\n    CasadiModelConfig,\n)\nfrom agentlib.utils.multi_agent_system import LocalMASAgency\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.physical.simple_mpc_time_dependent_obj:[8:18]\n==examples.one_room_mpc.physical.with_change_control_penalty:[4:15]\nfrom agentlib_mpc.models.casadi_model import (\n    CasadiModel,\n    CasadiInput,\n    CasadiState,\n    CasadiParameter,\n    CasadiOutput,\n    CasadiModelConfig,\n)\nfrom agentlib.utils.multi_agent_system import LocalMASAgency\n\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.physical.simple_mpc_time_dependent_obj:[145:154]\n==examples.one_room_mpc.physical.simple_mpc_with_time_variant_inputs:[243:252]\n    \"id\": \"myMPCAgent\",\n    \"modules\": [\n        {\"module_id\": \"Ag1Com\", \"type\": \"local_broadcast\"},\n        {\n            \"module_id\": \"myMPC\",\n            \"type\": \"agentlib_mpc.mpc\",\n            \"optimization_backend\": {\n                \"type\": \"casadi\",\n                \"model\": {\"type\": {\"file\": __file__, \"class_name\": \"MyCasadiModel\"}},",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.physical.simple_mpc_multiple_shooting:[138:147]\n==examples.one_room_mpc.physical.simple_mpc_time_dependent_obj:[156:165]\n                },\n                \"solver\": {\n                    \"name\": \"fatrop\",\n                },\n                \"results_file\": \"results//mpc.csv\",\n                \"save_results\": True,\n                \"overwrite_result_file\": True,\n            },\n            \"time_step\": 300,",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.ann.with_learned_cost.model:[49:59]\n==models.room_model:[36:46]\n    ]\n\n    parameters: List[CasadiParameter] = [\n        CasadiParameter(\n            name=\"cp\",\n            value=1000,\n            unit=\"J/kg*K\",\n            description=\"thermal capacity of the air\",\n        ),\n        CasadiParameter(",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.output_ann.generate_training_data:[19:33]\n==examples.three_zone_datadriven_admm.training_direct:[543:557]\n    inputs = list(np.random.random((10000, 1)) * 100 - 50)\n    func = lambda x: 2 * x\n    outputs = [func(x) for x in inputs]\n    func2 = lambda x: x + 10\n    outputs2 = [func2(x) for x in inputs]\n    df = pd.DataFrame({\"inputs\": inputs, \"outputs\": outputs, \"outputs2\": outputs2})\n    return df\n\n    # df.to_csv(\"test_data.csv\")\n\n\ndef create_trainer():\n    ag_config = {\n        \"modules\": [],",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==admm_4rooms_main:[15:24]\n==examples.admm.admm_example_local:[71:80]\n    conf_dicts = []\n    for conf in agent_configs:\n        with open(conf) as f:\n            conf_dict = json.load(f)\n        modules = conf_dict[\"modules\"]\n        for i, mod in enumerate(modules):\n            if isinstance(mod, str):\n                with open(mod) as f:\n                    mod = json.load(f)",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==admm_4rooms_coord_main:[0:10]\n==admm_4rooms_main:[1:13]\nimport os\nimport logging\nfrom agentlib.utils.multi_agent_system import LocalMASAgency\n\nagent_configs = [\n    \"configs\\\\rlt_admm.json\",\n    \"configs\\\\room_1_admm.json\",\n    \"configs\\\\room_2_admm.json\",\n    \"configs\\\\room_3_admm.json\",\n    \"configs\\\\room_4_admm.json\",",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==admm_4rooms_main_coord:[29:39]\n==examples.admm.admm_example_multiprocessing:[80:89]\n    conf_dicts = []\n\n    for conf in agent_configs:\n        with open(conf) as f:\n            conf_dict = json.load(f)\n        modules = conf_dict[\"modules\"]\n        for i, mod in enumerate(modules):\n            if isinstance(mod, str):\n                with open(mod) as f:\n                    mod = json.load(f)",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==agentlib_mpc.modules.dmpc.admm.admm_coordinator:[60:68]\n==agentlib_mpc.modules.mpc:[46:54]\n    )\n    sampling_time: Optional[float] = Field(\n        default=None,  # seconds\n        description=\"Sampling interval for control steps. If None, will be the same as\"\n        \" time step. Does not affect the discretization of the MPC, \"\n        \"only the interval with which there will be optimization steps.\",\n        validate_default=True,\n    )",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==agentlib_mpc.modules.estimation.mhe:[322:332]\n==agentlib_mpc.modules.mpc:[402:412]\n        results = load_mpc(results_file)\n        stats = load_mpc_stats(results_file)\n        return results, stats\n\n    def cleanup_results(self):\n        results_file = self.optimization_backend.config.results_file\n        if not results_file:\n            return\n        os.remove(results_file)\n        os.remove(mpc_datamodels.stats_path(results_file))",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==agentlib_mpc.modules.minlp_mpc:[81:96]\n==agentlib_mpc.modules.mpc:[228:245]\n        )\n\n        # return dict should have model variables as keys, not mpc variables\n        unassigned_by_model_var = {\n            \"states\": unassigned_by_mpc_var[\"states\"],\n            \"inputs\": intersection_input,\n            \"outputs\": unassigned_by_mpc_var[\"outputs\"],\n            \"parameters\": unassigned_by_mpc_var[\"parameters\"],\n        }\n\n        return unassigned_by_model_var\n\n    def set_actuation(self, solution):\n        \"\"\"Takes the solution from optimization backend and sends the first\n        step to AgentVariables.\"\"\"",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==agentlib_mpc.modules.minlp_mpc:[65:77]\n==agentlib_mpc.modules.mpc:[214:226]\n            (\"inputs\", self.model.get_input_names(), \"Inputs\"),\n            (\"outputs\", self.model.get_output_names(), \"Outputs\"),\n            (\"parameters\", self.model.get_parameter_names(), \"Parameters\"),\n        ]\n\n        # perform validations and make a dictionary of unassigned variables\n        unassigned_by_mpc_var = {\n            key: self.assert_subset(self.var_ref.__dict__[key], names, message)\n            for key, names, message in args\n        }\n\n        # fix unassigned values for inputs",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==agentlib_mpc.optimization_backends.casadi_.admm:[114:128]\n==agentlib_mpc.optimization_backends.casadi_.full:[49:66]\n        collocation_matrices = self._collocation_polynomial()\n\n        # shorthands\n        n = self.options.prediction_horizon\n        ts = self.options.time_step\n\n        # Initial State\n        x0 = self.add_opt_par(sys.initial_state)\n        xk = self.add_opt_var(sys.states, lb=x0, ub=x0, guess=x0)\n        uk = self.add_opt_par(sys.last_control)\n\n        # Parameters that are constant over the horizon\n        const_par = self.add_opt_par(sys.model_parameters)\n        du_weights = self.add_opt_par(sys.r_del_u)\n\n        # Formulate the NLP\n        # loop over prediction horizon",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==agentlib_mpc.optimization_backends.casadi_.casadi_admm_ml:[439:458]\n==agentlib_mpc.optimization_backends.casadi_.casadi_ml:[357:376]\n                lag = system.lags_dict.get(v_name, 1)\n\n                # if lag exists, we have to create and organize new variables\n                for j in range(1, lag):\n                    # create an MX variable for this lag\n                    l_name = name_with_lag(v_name, j)\n                    new_lag_var = ca.MX.sym(l_name)\n                    all_input_variables[l_name] = new_lag_var\n\n                    # add the mx variable to its lag time and denotation\n                    lagged_inputs_j = lagged_inputs.setdefault(j, {})\n                    lv_mx = lagged_inputs_j.setdefault(q_name, ca.DM([]))\n                    lagged_inputs[j][q_name] = ca.vertcat(lv_mx, new_lag_var)\n\n                    # keep track of the variable names that were added\n                    lagged_input_names_j = lagged_input_names.setdefault(j, {})\n                    lv_names = lagged_input_names_j.setdefault(q_name, [])\n                    lv_names.append(v_name)\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==agentlib_mpc.optimization_backends.casadi_.casadi_admm_ml:[298:308]\n==agentlib_mpc.optimization_backends.casadi_.casadi_ml:[163:175]\n        for time in prediction_grid:\n            self.pred_time = time\n            mx_dict[time][sys.controls.name] = self.add_opt_var(sys.controls)\n            mx_dict[time][sys.non_controlled_inputs.name] = self.add_opt_par(\n                sys.non_controlled_inputs\n            )\n            mx_dict[time][sys.algebraics.name] = self.add_opt_var(sys.algebraics)\n            mx_dict[time][sys.outputs.name] = self.add_opt_var(sys.outputs)\n\n            # admm related quantities",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==agentlib_mpc.optimization_backends.casadi_.basic:[101:118]\n==agentlib_mpc.optimization_backends.casadi_.mhe:[125:135]\n@dataclasses.dataclass\nclass CollocationMatrices:\n    order: int\n    root: np.ndarray\n    B: np.ndarray\n    C: np.ndarray\n    D: np.ndarray\n\n\nclass DirectCollocation(Discretization):\n    def _discretize(self, sys: BaseSystem):\n        \"\"\"\n        Defines a direct collocation discretization.\n        # pylint: disable=invalid-name\n        \"\"\"\n\n        # setup the polynomial base",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==agentlib_mpc.optimization_backends.casadi_.basic:[411:422]\n==agentlib_mpc.optimization_backends.casadi_.minlp:[143:154]\n            dk = self.add_opt_par(sys.non_controlled_inputs)\n            zk = self.add_opt_var(sys.algebraics)\n            yk = self.add_opt_var(sys.outputs)\n            # get stage\n            stage_arguments = {\n                # variables\n                sys.states.name: xk,\n                sys.algebraics.name: zk,\n                sys.outputs.name: yk,\n                # parameters\n                sys.controls.name: uk,",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==agentlib_mpc.optimization_backends.casadi_.basic:[149:159]\n==agentlib_mpc.optimization_backends.casadi_.full:[78:88]\n            xk_end, constraints = self._collocation_inner_loop(\n                collocation=collocation_matrices,\n                state_at_beginning=xk,\n                states=sys.states,\n                opt_vars=opt_vars_inside_inner,\n                opt_pars=opt_pars_inside_inner,\n                const=constant_over_inner,\n            )\n\n            # increment loop counter and time",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.three_zone_datadriven_admm.models.AHU:[53:63]\n==examples.three_zone_datadriven_admm.models.CCA:[44:54]\n            value=293,\n            unit=\"K\",\n            description=\"Air mass flow out of cooler.\",\n        ),\n        CasadiOutput(name=\"W1\", value=200, unit=\"K\", description=\"Leistung\"),\n        CasadiOutput(name=\"W2\", value=200, unit=\"K\", description=\"Leistung\"),\n        CasadiOutput(name=\"W3\", value=200, unit=\"K\", description=\"Leistung\"),\n    ]\n\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.ann.training_nn:[187:203]\n==examples.one_room_mpc.gpr.training_gpr:[181:192]\n            {\"type\": \"local\", \"subscriptions\": [\"Simulator\"]},\n        ],\n    }\n    return [simulator_config, trainer_config, pid_controller]\n\n\ndef main(\n    training_time: float = 3600 * 24 * 0.2,\n    plot_results=False,\n    step_size: float = 300,\n    epochs: int = 1000,  # Add epochs parameter\n):\n    env_config = {\"rt\": False, \"t_sample\": 3600}\n    logging.basicConfig(level=logging.INFO)\n    mas = LocalMASAgency(\n        agent_configs=configs(",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.ann.simple_mpc_nn:[116:124]\n==examples.one_room_mpc.gpr.simple_mpc_gpr:[110:118]\n    mas = LocalMASAgency(\n        agent_configs=agent_configs(ml_model_path=str(ann_path)),\n        env=ENV_CONFIG,\n        variable_logging=False,\n    )\n    mas.run(until=until)\n    results = mas.get_results()\n    if with_plots:",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.linreg.model:[2:10]\n==examples.three_zone_datadriven_admm.training_direct:[6:14]\nfrom agentlib_mpc.models.casadi_model import (\n    CasadiModelConfig,\n    CasadiInput,\n    CasadiState,\n    CasadiParameter,\n    CasadiOutput,\n    CasadiModel,\n)",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.admm.models.ca_cooler_model:[0:10]\n==examples.one_room_mpc.physical.with_change_control_penalty:[4:12]\nfrom agentlib_mpc.models.casadi_model import (\n    CasadiModel,\n    CasadiInput,\n    CasadiState,\n    CasadiParameter,\n    CasadiOutput,\n    CasadiModelConfig,\n)\n\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.linreg.simple_mpc_linreg:[18:26]\n==examples.one_room_mpc.physical.simple_mpc_with_time_variant_inputs:[242:250]\nagent_mpc = {\n    \"id\": \"myMPCAgent\",\n    \"modules\": [\n        {\"module_id\": \"Ag1Com\", \"type\": \"local_broadcast\"},\n        {\n            \"module_id\": \"myMPC\",\n            \"type\": \"agentlib_mpc.mpc\",\n            \"optimization_backend\": {",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.physical.mixed_integer.mixed_integer_mpc:[85:93]\n==examples.one_room_mpc.physical.simple_mpc_with_time_variant_inputs:[196:204]\n        ),\n        CasadiParameter(\n            name=\"s_T\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for T in constraint function\",\n        ),\n        CasadiParameter(",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.admm.models.ca_room_model:[0:10]\n==examples.one_room_mpc.physical.simple_mpc:[7:15]\nfrom agentlib_mpc.models.casadi_model import (\n    CasadiModel,\n    CasadiInput,\n    CasadiState,\n    CasadiParameter,\n    CasadiOutput,\n    CasadiModelConfig,\n)\n\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.admm.models.simulation_model:[0:8]\n==examples.one_room_mpc.physical.simple_mpc_multiple_shooting:[7:15]\nfrom agentlib_mpc.models.casadi_model import (\n    CasadiModel,\n    CasadiInput,\n    CasadiState,\n    CasadiParameter,\n    CasadiOutput,\n    CasadiModelConfig,\n)",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.physical.mixed_integer.mixed_integer_mpc_cia:[229:237]\n==examples.one_room_mpc.physical.simple_mpc_multiple_shooting:[243:251]\n        plot_mpc(\n            series=mpc_results[\"variable\"][\"T\"] - 273.15,\n            ax=ax[0],\n            plot_actual_values=True,\n            plot_predictions=True,\n        )\n        ax[0].axhline(ub - 273.15, color=\"grey\", linestyle=\"--\", label=\"upper boundary\")\n        plot_mpc(",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.physical.simple_mpc_multiple_shooting:[145:153]\n==examples.one_room_mpc.physical.with_change_control_penalty:[140:148]\n            },\n            \"time_step\": 300,\n            \"prediction_horizon\": 15,\n            \"parameters\": [\n                {\"name\": \"s_T\", \"value\": 3},\n                {\"name\": \"r_mDot\", \"value\": 1},\n            ],\n            \"inputs\": [",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.physical.mixed_integer.mixed_integer_mpc:[229:237]\n==examples.one_room_mpc.physical.simple_mpc_time_dependent_obj:[265:273]\n        plot_mpc(\n            series=mpc_results[\"variable\"][\"T\"] - 273.15,\n            ax=ax[0],\n            plot_actual_values=True,\n            plot_predictions=True,\n        )\n        ax[0].axhline(ub - 273.15, color=\"grey\", linestyle=\"--\", label=\"upper boundary\")\n        plot_mpc(",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.physical.mixed_integer.mixed_integer_mpc:[137:148]\n==examples.one_room_mpc.physical.simple_mpc_time_dependent_obj:[139:150]\n        return objective\n\n\nENV_CONFIG = {\"rt\": False, \"factor\": 0.01, \"t_sample\": 60}\n\nAGENT_MPC = {\n    \"id\": \"myMPCAgent\",\n    \"modules\": [\n        {\"module_id\": \"Ag1Com\", \"type\": \"local_broadcast\"},\n        {\n            \"module_id\": \"myMPC\",",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.physical.simple_mpc_time_dependent_obj:[8:16]\n==examples.one_room_mpc.physical.simple_mpc_with_time_variant_inputs:[7:15]\nfrom agentlib_mpc.models.casadi_model import (\n    CasadiModel,\n    CasadiInput,\n    CasadiState,\n    CasadiParameter,\n    CasadiOutput,\n    CasadiModelConfig,\n)",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.physical.simple_mpc_multiple_shooting:[159:167]\n==examples.one_room_mpc.physical.simple_mpc_time_dependent_obj:[180:188]\n            \"states\": [\n                {\n                    \"name\": \"T\",\n                    \"value\": 298.16,\n                    \"ub\": 303.15,\n                    \"lb\": 288.15,\n                    \"alias\": \"T\",\n                    \"source\": \"SimAgent\",",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.three_zone_datadriven_admm.models.simulation_model:[102:110]\n==models.room_model:[50:58]\n        ),\n        CasadiParameter(\n            name=\"q_T\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for T in objective function\",\n        ),\n        CasadiParameter(",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.physical.simple_mpc_with_time_variant_inputs:[190:198]\n==models.room_model:[65:73]\n        ),\n        CasadiParameter(\n            name=\"q_T\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for T in objective function\",\n        ),\n        CasadiParameter(",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==models.rlt_model:[0:10]\n==models.room_model:[0:10]\nfrom agentlib_mpc.models.casadi_model import (\n    CasadiModel,\n    CasadiInput,\n    CasadiState,\n    CasadiParameter,\n    CasadiOutput,\n    CasadiModelConfig,\n)\n\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==agentlib_mpc.modules.minlp_mpc:[57:64]\n==agentlib_mpc.modules.mpc:[207:214]\n        args = [\n            (\n                \"states\",\n                self.model.get_state_names(),\n                \"Differential variables / States\",\n            ),\n            (\"controls\", self.model.get_input_names(), \"Controls\"),",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==agentlib_mpc.optimization_backends.casadi_.core.casadi_backend:[284:293]\n==agentlib_mpc.optimization_backends.casadi_.minlp_cia:[198:211]\n            results.write_columns(res_file)\n            results.write_stats_columns(stats_path(res_file))\n\n        df = results.df\n        df.index = list(map(lambda x: str((now, x)), df.index))\n        df.to_csv(res_file, mode=\"a\", header=False)\n\n        with open(stats_path(res_file), \"a\") as f:\n            f.writelines(results.stats_line(str(now)))\n\n    def rel_results_file_exists(self) -> bool:\n        \"\"\"Checks if the relaxed results file already exists, and if not, creates it with\n        headers.\"\"\"",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==agentlib_mpc.optimization_backends.casadi_.casadi_admm_ml:[405:413]\n==agentlib_mpc.optimization_backends.casadi_.casadi_ml:[255:263]\n        all_system_quantities = system.all_system_quantities()\n        constraints = {\"model_constraints\": system.model_constraints}\n\n        inputs = [\n            q.full_symbolic\n            for q in all_system_quantities.values()\n            if q.use_in_stage_function\n        ]",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==agentlib_mpc.optimization_backends.casadi_.basic:[528:537]\n==agentlib_mpc.optimization_backends.casadi_.casadi_admm_ml:[479:488]\n            \"cost_function\",\n            *constraint_denotations,\n            *constraint_lb_denotations,\n            *constraint_ub_denotations,\n        ]\n\n        # function describing system dynamics and cost function\n        self._stage_function = ca.Function(\n            \"f\",",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==agentlib_mpc.optimization_backends.casadi_.basic:[397:405]\n==agentlib_mpc.optimization_backends.casadi_.full:[107:115]\n        vars_dict = {sys.states.name: {}}\n        n = self.options.prediction_horizon\n        ts = self.options.time_step\n        opts = {\"t0\": 0, \"tf\": ts}\n        # Initial State\n        x0 = self.add_opt_par(sys.initial_state)\n        xk = self.add_opt_var(sys.states, lb=x0, ub=x0, guess=x0)\n        vars_dict[sys.states.name][0] = xk",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==agentlib_mpc.optimization_backends.casadi_.basic:[225:234]\n==agentlib_mpc.optimization_backends.casadi_.casadi_ml:[329:338]\n            \"cost_function\",\n            *constraint_denotations,\n            *constraint_lb_denotations,\n            *constraint_ub_denotations,\n        ]\n\n        # function describing system dynamics and cost function\n        self._stage_function = ca.Function(\n            \"f\",",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==agentlib_mpc.optimization_backends.casadi_.mhe:[532:542]\n==agentlib_mpc.utils.sampling:[145:159]\n    )\n\n    # extrapolate sequence with last available value if necessary\n    interpolated_trajectory = (\n        [values[0]] * number_of_missing_old_entries\n        + sequence_new\n        + [values[-1]] * number_of_missing_new_entries\n    )\n\n    return interpolated_trajectory\n\n\ndef pairwise(iterable: Iterable):\n    \"s -> (s0,s1), (s1,s2), (s2, s3), ...\"",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.three_zone_datadriven_admm.models.Room_model:[37:44]\n==examples.three_zone_datadriven_admm.models.simulation_model:[39:46]\n            unit=\"K\",\n            description=\"Set point for T in objective function\",\n        ),\n        CasadiInput(\n            name=\"T_upper\", value=301.15, unit=\"K\", description=\"Upper boundary for T.\"\n        ),\n        CasadiInput(",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.three_zone_datadriven_admm.models.AHU:[81:90]\n==examples.three_zone_datadriven_admm.models.CCA:[66:75]\n        self.constraints = [\n            # soft constraints\n        ]\n        # Objective function\n        objective = sum(\n            [\n                0.1\n                * 0.001\n                * self.r_T_v",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.three_zone_datadriven_admm.models.Room_model:[34:41]\n==examples.three_zone_datadriven_admm.training_direct:[64:71]\n        CasadiInput(\n            name=\"T_set\",\n            value=298.55,\n            unit=\"K\",\n            description=\"Set point for T in objective function\",\n        ),\n        CasadiInput(",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.three_zone_datadriven_admm.models.simulation_model:[62:69]\n==examples.three_zone_datadriven_admm.training_direct:[94:101]\n        ),\n    ]\n    parameters: List[CasadiParameter] = [\n        CasadiParameter(\n            name=\"cp\",\n            value=4200,\n            unit=\"J/kg*K\",",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.ann.with_learned_cost.model:[172:193]\n==examples.one_room_mpc.linreg.model:[169:190]\n    ]\n\n\nclass DataDrivenModel(CasadiMLModel):\n    config: DataDrivenModelConfig\n\n    def setup_system(self):\n        # ode\n\n        # Define ae\n        self.T_out.alg = self.T  # math operation to get the symbolic variable\n\n        # Constraints: List[(lower bound, function, upper bound)]\n        self.constraints = [\n            # soft constraints\n            (0, self.T + self.T_slack, self.T_upper),\n        ]\n\n        # Objective function\n        objective = sum(\n            [",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.ann.with_learned_cost.model:[76:90]\n==examples.one_room_mpc.linreg.model:[75:91]\n    ]\n\n\nclass PhysicalModel(CasadiModel):\n    config: PhysicalModelConfig\n\n    def setup_system(self):\n        # Define ode\n        self.T.ode = (\n            self.cp * self.mDot / self.C * (self.T_in - self.T) + self.load / self.C\n        )\n\n        # Define ae\n        self.T_out.alg = self.T  # math operation to get the symbolic variable",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.ann.model:[169:196]\n==examples.one_room_mpc.linreg.model:[169:196]\n    ]\n\n\nclass DataDrivenModel(CasadiMLModel):\n    config: DataDrivenModelConfig\n\n    def setup_system(self):\n        # ode\n\n        # Define ae\n        self.T_out.alg = self.T  # math operation to get the symbolic variable\n\n        # Constraints: List[(lower bound, function, upper bound)]\n        self.constraints = [\n            # soft constraints\n            (0, self.T + self.T_slack, self.T_upper),\n        ]\n\n        # Objective function\n        objective = sum(\n            [\n                self.r_mDot * self.mDot,\n                self.s_T * self.T_slack**2,\n            ]\n        )\n\n        return objective",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.Estimators.mhe_example:[113:120]\n==examples.one_room_mpc.physical.mixed_integer.mixed_integer_mpc:[86:93]\n        CasadiParameter(\n            name=\"s_T\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for T in constraint function\",\n        ),\n        CasadiParameter(",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.physical.mixed_integer.mixed_integer_mpc:[262:272]\n==examples.one_room_mpc.physical.mixed_integer.mixed_integer_mpc_cia:[262:272]\n        ax[1].legend()\n        ax[0].legend()\n        ax[2].legend()\n        plt.show()\n\n    return results\n\n\nif __name__ == \"__main__\":\n    run_example(with_plots=True, until=3600)",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.ann.with_learned_cost.simple_mpc_nn:[56:63]\n==examples.one_room_mpc.physical.with_change_control_penalty:[159:166]\n        \"id\": \"SimAgent\",\n        \"modules\": [\n            {\"module_id\": \"Ag1Com\", \"type\": \"local_broadcast\"},\n            {\n                \"module_id\": \"room\",\n                \"type\": \"simulator\",\n                \"model\": {",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.ann.with_learned_cost.simple_mpc_nn:[18:25]\n==examples.one_room_mpc.physical.with_change_control_penalty:[118:125]\n        \"id\": \"myMPCAgent\",\n        \"modules\": [\n            {\"module_id\": \"Ag1Com\", \"type\": \"local_broadcast\"},\n            {\n                \"module_id\": \"myMPC\",\n                \"type\": \"agentlib_mpc.mpc\",\n                \"optimization_backend\": {",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.ann.simple_mpc_nn:[120:128]\n==examples.one_room_mpc.physical.with_change_control_penalty:[190:198]\n    )\n    mas.run(until=until)\n    results = mas.get_results()\n    if with_plots:\n        import matplotlib.pyplot as plt\n        from agentlib_mpc.utils.plotting.mpc import plot_mpc\n\n        mpc_results = results[\"myMPCAgent\"][\"myMPC\"]",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.ann.simple_mpc_nn:[56:63]\n==examples.one_room_mpc.physical.simple_mpc:[173:180]\n    \"id\": \"SimAgent\",\n    \"modules\": [\n        {\"module_id\": \"Ag1Com\", \"type\": \"local_broadcast\"},\n        {\n            \"module_id\": \"room\",\n            \"type\": \"simulator\",\n            \"model\": {",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.ann.simple_mpc_nn:[17:24]\n==examples.one_room_mpc.physical.simple_mpc:[126:133]\n    \"id\": \"myMPCAgent\",\n    \"modules\": [\n        {\"module_id\": \"Ag1Com\", \"type\": \"local_broadcast\"},\n        {\n            \"module_id\": \"myMPC\",\n            \"type\": \"agentlib_mpc.mpc\",\n            \"optimization_backend\": {",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.gpr.simple_mpc_gpr:[58:65]\n==examples.one_room_mpc.physical.simple_mpc_multiple_shooting:[173:180]\n        \"id\": \"SimAgent\",\n        \"modules\": [\n            {\"module_id\": \"Ag1Com\", \"type\": \"local_broadcast\"},\n            {\n                \"module_id\": \"room\",\n                \"type\": \"simulator\",\n                \"model\": {",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.gpr.simple_mpc_gpr:[19:26]\n==examples.one_room_mpc.physical.simple_mpc_multiple_shooting:[126:133]\n    \"id\": \"myMPCAgent\",\n    \"modules\": [\n        {\"module_id\": \"Ag1Com\", \"type\": \"local_broadcast\"},\n        {\n            \"module_id\": \"myMPC\",\n            \"type\": \"agentlib_mpc.mpc\",\n            \"optimization_backend\": {",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.Estimators.mhe_example:[61:68]\n==examples.one_room_mpc.physical.simple_mpc_time_dependent_obj:[59:67]\n        CasadiState(\n            name=\"T_slack\",\n            value=0,\n            unit=\"K\",\n            description=\"Slack variable of temperature of zone\",\n        ),\n    ]\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.Estimators.mhe_example:[27:34]\n==examples.one_room_mpc.physical.simple_mpc_time_dependent_obj:[37:45]\n        CasadiInput(\n            name=\"load\", value=150, unit=\"W\", description=\"Heat load into zone\"\n        ),\n        CasadiInput(\n            name=\"T_in\", value=290.15, unit=\"K\", description=\"Inflow air temperature\"\n        ),\n        # settings\n        CasadiInput(",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.linreg.simple_mpc_linreg:[58:65]\n==examples.one_room_mpc.physical.simple_mpc_time_dependent_obj:[195:202]\n    \"id\": \"SimAgent\",\n    \"modules\": [\n        {\"module_id\": \"Ag1Com\", \"type\": \"local_broadcast\"},\n        {\n            \"module_id\": \"room\",\n            \"type\": \"simulator\",\n            \"model\": {",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.linreg.simple_mpc_linreg:[19:26]\n==examples.one_room_mpc.physical.simple_mpc_time_dependent_obj:[145:152]\n    \"id\": \"myMPCAgent\",\n    \"modules\": [\n        {\"module_id\": \"Ag1Com\", \"type\": \"local_broadcast\"},\n        {\n            \"module_id\": \"myMPC\",\n            \"type\": \"agentlib_mpc.mpc\",\n            \"optimization_backend\": {",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.linreg.model:[83:97]\n==examples.one_room_mpc.physical.simple_mpc_time_dependent_obj:[109:123]\n        self.T.ode = (\n            self.cp * self.mDot / self.C * (self.T_in - self.T) + self.load / self.C\n        )\n\n        # Define ae\n        self.T_out.alg = self.T  # math operation to get the symbolic variable\n\n        # Constraints: List[(lower bound, function, upper bound)]\n        self.constraints = [\n            # soft constraints\n            (0, self.T + self.T_slack, self.T_upper),\n        ]\n\n        # Objective function",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.physical.simple_mpc_multiple_shooting:[151:158]\n==examples.one_room_mpc.physical.simple_mpc_time_dependent_obj:[170:177]\n            ],\n            \"inputs\": [\n                {\"name\": \"T_in\", \"value\": 290.15},\n                {\"name\": \"load\", \"value\": 150},\n                {\"name\": \"T_upper\", \"value\": ub},\n            ],\n            \"controls\": [{\"name\": \"mDot\", \"value\": 0.02, \"ub\": 0.05, \"lb\": 0}],",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.three_zone_datadriven_admm.models.Room_model:[61:68]\n==models.room_model:[51:58]\n        CasadiParameter(\n            name=\"q_T\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for T in objective function\",\n        ),\n        CasadiParameter(",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.admm.models.ca_room_model:[57:64]\n==models.room_model:[39:46]\n        CasadiParameter(\n            name=\"cp\",\n            value=1000,\n            unit=\"J/kg*K\",\n            description=\"thermal capacity of the air\",\n        ),\n        CasadiParameter(",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.output_ann.generate_training_data:[47:54]\n==examples.three_zone_datadriven_admm.training_direct:[565:572]\n        \"train_share\": 0.6,\n        \"validation_share\": 0.2,\n        \"test_share\": 0.2,\n        \"retrain_delay\": 2,\n        \"save_directory\": \"anns\",\n        \"use_values_for_incomplete_data\": True,\n        \"save_data\": True,",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.three_zone_datadriven_admm.training_direct:[133:140]\n==models.room_model:[66:73]\n        CasadiParameter(\n            name=\"q_T\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for T in objective function\",\n        ),\n        CasadiParameter(",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.physical.simple_mpc_time_dependent_obj:[68:75]\n==models.room_model:[54:61]\n        CasadiParameter(\n            name=\"cp\",\n            value=1000,\n            unit=\"J/kg*K\",\n            description=\"thermal capacity of the air\",\n        ),\n        CasadiParameter(",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==models.room_model:[115:129]\n==models.room_model:[96:110]\n        ),\n    ]\n\n\nclass CaCooledRoomSim(CaCooledRoom):\n    config: CaCooledRoomSimConfig\n\n    def setup_system(self):\n        obj = super().setup_system()\n\n        # Define dae\n        self.T_out.alg = self.T\n\n        return obj",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==agentlib_mpc.modules.dmpc.coordinator:[6:13]\n==agentlib_mpc.modules.dmpc.employee:[4:11]\nfrom pydantic import Field\n\nfrom agentlib.core import (\n    BaseModule,\n    BaseModuleConfig,\n    AgentVariable,\n    Agent,",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==agentlib_mpc.modules.estimation.mhe:[212:222]\n==agentlib_mpc.modules.mpc_full:[113:121]\n            self.agent.data_broker.register_callback(\n                alias=var.alias,\n                source=var.source,\n                callback=self._callback_hist_vars,\n                name=var.name,\n            )\n\n        # registers callback which listens to alias/source of the state variable, but\n        # gets the name of the measured state as parameter, to correctly save it in the\n        # history",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==agentlib_mpc.modules.estimation.mhe:[143:149]\n==agentlib_mpc.modules.mpc:[161:167]\n        self.init_status = mpc_datamodels.InitStatus.during_update\n        opti_back = create_optimization_backend(\n            self.config.optimization_backend, self.agent.id\n        )\n        opti_back.register_logger(self.logger)\n        disc_opts = opti_back.config.discretization_options",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==agentlib_mpc.optimization_backends.casadi_.full:[81:89]\n==agentlib_mpc.optimization_backends.casadi_.mhe:[181:189]\n                states=sys.states,\n                opt_vars=opt_vars_inside_inner,\n                opt_pars=opt_pars_inside_inner,\n                const=constant_over_inner,\n            )\n\n            # increment loop counter and time\n            self.k += 1",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==agentlib_mpc.optimization_backends.casadi_.full:[41:58]\n==agentlib_mpc.optimization_backends.casadi_.minlp:[62:81]\nclass DirectCollocation(basic.DirectCollocation):\n    def _discretize(self, sys: CasadiMINLPSystem):\n        \"\"\"\n        Defines a direct collocation discretization.\n        # pylint: disable=invalid-name\n        \"\"\"\n\n        # setup the polynomial base\n        collocation_matrices = self._collocation_polynomial()\n\n        # shorthands\n        n = self.options.prediction_horizon\n        ts = self.options.time_step\n\n        # Initial State\n        x0 = self.add_opt_par(sys.initial_state)\n        xk = self.add_opt_var(sys.states, lb=x0, ub=x0, guess=x0)\n\n        # Parameters that are constant over the horizon",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==agentlib_mpc.optimization_backends.casadi_.casadi_ml:[256:263]\n==agentlib_mpc.optimization_backends.casadi_.mhe:[217:224]\n        constraints = {\"model_constraints\": system.model_constraints}\n\n        inputs = [\n            q.full_symbolic\n            for q in all_system_quantities.values()\n            if q.use_in_stage_function\n        ]",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==agentlib_mpc.optimization_backends.casadi_.basic:[521:527]\n==agentlib_mpc.optimization_backends.casadi_.casadi_admm_ml:[472:478]\n            system.cost_function,\n            *constraints_func,\n            *constraints_lb,\n            *constraints_ub,\n        ]\n        output_denotations = [",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==agentlib_mpc.optimization_backends.casadi_.basic:[511:519]\n==agentlib_mpc.optimization_backends.casadi_.casadi_admm_ml:[420:428]\n        constraints_func = [c.function for c in constraints.values()]\n        constraints_lb = [c.lb for c in constraints.values()]\n        constraints_ub = [c.ub for c in constraints.values()]\n        constraint_denotations = list(constraints.keys())\n        constraint_lb_denotations = [LB_PREFIX + k for k in constraints]\n        constraint_ub_denotations = [UB_PREFIX + k for k in constraints]\n\n        # create a dictionary which holds all the inputs for the sim step of the model",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==agentlib_mpc.optimization_backends.casadi_.basic:[192:199]\n==agentlib_mpc.optimization_backends.casadi_.casadi_admm_ml:[406:413]\n        constraints = {\"model_constraints\": system.model_constraints}\n\n        inputs = [\n            q.full_symbolic\n            for q in all_system_quantities.values()\n            if q.use_in_stage_function\n        ]",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==agentlib_mpc.optimization_backends.casadi_.basic:[5:11]\n==agentlib_mpc.optimization_backends.casadi_.mhe:[9:15]\nfrom agentlib_mpc.data_structures.casadi_utils import (\n    Constraint,\n    LB_PREFIX,\n    UB_PREFIX,\n    DiscretizationMethod,\n    SolverFactory,",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==agentlib_mpc.optimization_backends.casadi_.basic:[437:444]\n==agentlib_mpc.optimization_backends.casadi_.minlp:[164:171]\n            )\n            xk_end = fk[\"xf\"]\n            # calculate model constraint\n            self.k += 1\n            self.pred_time = ts * self.k\n            xk = self.add_opt_var(sys.states)\n            vars_dict[sys.states.name][self.k] = xk",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==agentlib_mpc.optimization_backends.casadi_.basic:[118:133]\n==agentlib_mpc.optimization_backends.casadi_.minlp:[70:85]\n        collocation_matrices = self._collocation_polynomial()\n\n        # shorthands\n        n = self.options.prediction_horizon\n        ts = self.options.time_step\n\n        # Initial State\n        x0 = self.add_opt_par(sys.initial_state)\n        xk = self.add_opt_var(sys.states, lb=x0, ub=x0, guess=x0)\n\n        # Parameters that are constant over the horizon\n        const_par = self.add_opt_par(sys.model_parameters)\n\n        # Formulate the NLP\n        # loop over prediction horizon",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==agentlib_mpc.optimization_backends.casadi_.admm:[300:308]\n==agentlib_mpc.optimization_backends.casadi_.basic:[449:458]\n        if sys.states.full_symbolic.shape[0] == 0:\n            return lambda *args, **kwargs: {\"xf\": ca.MX.sym(\"xk_end\", 0)}\n\n        ode = sys.ode\n        # create inputs\n        x = sys.states.full_symbolic\n        p = ca.vertcat(\n            sys.controls.full_symbolic,",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==agentlib_mpc.optimization_backends.casadi_.basic:[218:224]\n==agentlib_mpc.optimization_backends.casadi_.casadi_ml:[322:328]\n            system.cost_function,\n            *constraints_func,\n            *constraints_lb,\n            *constraints_ub,\n        ]\n        output_denotations = [",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==agentlib_mpc.optimization_backends.casadi_.basic:[208:216]\n==agentlib_mpc.optimization_backends.casadi_.casadi_ml:[272:280]\n        constraints_func = [c.function for c in constraints.values()]\n        constraints_lb = [c.lb for c in constraints.values()]\n        constraints_ub = [c.ub for c in constraints.values()]\n        constraint_denotations = list(constraints.keys())\n        constraint_lb_denotations = [LB_PREFIX + k for k in constraints]\n        constraint_ub_denotations = [UB_PREFIX + k for k in constraints]\n\n        # aggregate outputs",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==agentlib_mpc.optimization_backends.casadi_.basic:[92:98]\n==agentlib_mpc.optimization_backends.casadi_.casadi_ml:[95:101]\n        self.cost_function = model.cost_func\n        self.model_constraints = Constraint(\n            function=ca.vertcat(*[c.function for c in model.get_constraints()]),\n            lb=ca.vertcat(*[c.lb for c in model.get_constraints()]),\n            ub=ca.vertcat(*[c.ub for c in model.get_constraints()]),\n        )",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==agentlib_mpc.utils.plotting.admm_dashboard:[19:37]\n==agentlib_mpc.utils.plotting.interactive:[18:27]\nexcept ImportError as e:\n    raise OptionalDependencyError(\n        dependency_name=\"interactive\",\n        dependency_install=\"plotly, dash\",\n        used_object=\"interactive\",\n    ) from e\n\n\ndef load_agent_data(directory: str) -> Dict[str, pd.DataFrame]:\n    \"\"\"\n    Load MPC data for multiple agents from files containing 'admm' in their name.\n\n    Args:\n    directory (str): Directory path containing the data files.\n\n    Returns:\n    Dict[str, pd.DataFrame]: Dictionary with agent names as keys and their data as values.\n    \"\"\"",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==agentlib_mpc.optimization_backends.casadi_.mhe:[473:481]\n==agentlib_mpc.utils.sampling:[94:102]\n        else:\n            raise TypeError(\n                f\"Passed trajectory of type '{type(trajectory)}' \" f\"cannot be sampled.\"\n            )\n        target_grid = np.array(grid) + current\n\n        # expand scalar values\n        if len(source_grid) == 1:",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.three_zone_datadriven_admm.models.Room_model:[21:28]\n==examples.three_zone_datadriven_admm.models.simulation_model:[23:30]\n        CasadiInput(\n            name=\"mDot_ahu\",\n            value=0.025,\n            unit=\"K\",\n            description=\"air water mass flow into AHU\",\n        ),\n        # disturbances",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.Estimators.mhe_example:[224:230]\n==test_mpc:[129:135]\n                {\n                    \"module_id\": \"myMPC\",\n                    \"type\": \"agentlib_mpc.mpc\",\n                    \"optimization_backend\": {\n                        \"type\": \"casadi\",\n                        \"model\": {",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.admm.admm_example_coordinator:[113:121]\n==examples.admm.admm_example_coordinator_multiprocessing:[105:113]\n    if with_plots:\n        plot(results, start_pred=start_pred)\n    return results\n\n\nif __name__ == \"__main__\":\n    run_example(\n        with_plots=True,",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.admm.admm_example_coordinator:[52:60]\n==examples.admm.admm_example_local:[41:49]\n    mpc_room_results = results[\"CooledRoom\"][\"admm_module\"]\n\n    room_res = admm_at_time_step(\n        data=mpc_room_results, time_step=start_pred, iteration=-1\n    )\n\n    fig, ax = plt.subplots(2, 1)\n    ax[0].axhline(294.55, label=\"reference value\", ls=\"--\")",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.admm.admm_example_coordinator_multiprocessing:[99:106]\n==examples.admm.admm_example_multiprocessing:[101:108]\n        cleanup=cleanup,\n        log_level=log_level,\n    )\n    mas.run(until=until)\n    results = mas.get_results()\n\n    if with_plots:",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.Estimators.mhe_example:[61:67]\n==examples.one_room_mpc.ann.with_learned_cost.model:[42:48]\n        CasadiState(\n            name=\"T_slack\",\n            value=0,\n            unit=\"K\",\n            description=\"Slack variable of temperature of zone\",\n        ),",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.ann.training_nn:[200:206]\n==examples.one_room_mpc.ann.with_learned_cost.training_nn:[192:198]\n    logging.basicConfig(level=logging.INFO)\n    mas = LocalMASAgency(\n        agent_configs=configs(\n            training_time=training_time,\n            plot_results=plot_results,\n            step_size=step_size,",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.ann.training_nn:[87:93]\n==examples.one_room_mpc.ann.with_learned_cost.training_nn:[84:90]\n                \"batch_size\": 64,\n                \"inputs\": [\n                    {\"name\": \"mDot\", \"value\": 0.0225, \"source\": \"PID\"},\n                    {\"name\": \"load\", \"value\": 30, \"source\": \"Simulator\"},\n                    {\"name\": \"T_in\", \"value\": 290.15},\n                ],",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.gpr.simple_mpc_gpr:[135:141]\n==examples.one_room_mpc.physical.mixed_integer.mixed_integer_mpc_cia:[231:237]\n            ax=ax[0],\n            plot_actual_values=True,\n            plot_predictions=True,\n        )\n        ax[0].axhline(ub - 273.15, color=\"grey\", linestyle=\"--\", label=\"upper boundary\")\n        plot_mpc(",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.ann.simple_mpc_nn:[120:127]\n==examples.one_room_mpc.physical.mixed_integer.mixed_integer_mpc:[218:225]\n    )\n    mas.run(until=until)\n    results = mas.get_results()\n    if with_plots:\n        import matplotlib.pyplot as plt\n        from agentlib_mpc.utils.plotting.mpc import plot_mpc\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.linreg.simple_mpc_linreg:[136:142]\n==examples.one_room_mpc.physical.mixed_integer.mixed_integer_mpc:[231:237]\n            ax=ax[0],\n            plot_actual_values=True,\n            plot_predictions=True,\n        )\n        ax[0].axhline(ub - 273.15, color=\"grey\", linestyle=\"--\", label=\"upper boundary\")\n        plot_mpc(",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.physical.simple_mpc_with_time_variant_inputs:[50:59]\n==examples.three_zone_datadriven_admm.custom_modules.predictor:[12:21]\nclass PredictorModuleConfig(al.BaseModuleConfig):\n    \"\"\"Module that outputs a prediction of the heat load at a specified\n    interval.\"\"\"\n\n    outputs: al.AgentVariables = [\n        al.AgentVariable(\n            name=\"load_prediction\", type=\"pd.Series\", description=\"test_description\"\n        ),\n        al.AgentVariable(",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.physical.mixed_integer.mixed_integer_mpc:[151:157]\n==examples.one_room_mpc.physical.simple_mpc:[134:140]\n                \"model\": {\"type\": {\"file\": __file__, \"class_name\": \"MyCasadiModel\"}},\n                \"discretization_options\": {\n                    \"collocation_order\": 2,\n                    \"collocation_method\": \"legendre\",\n                },\n                \"solver\": {",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==admm_4rooms_coord_main:[25:32]\n==examples.three_zone_datadriven_admm.admm_3zone_sim:[67:74]\n    mas = LocalMASAgency(\n        agent_configs=agent_configs, env=env_config, variable_logging=False\n    )\n    mas.run(until=until)\n    results = mas.get_results(cleanup=cleanup)\n\n    if with_plots:",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.admm.models.ca_cooler_model:[36:43]\n==models.room_model:[43:49]\n    ]\n\n    outputs: list[CasadiOutput] = [\n        CasadiOutput(\n            name=\"mDot_out\",\n            value=0.0225,\n            unit=\"kg/s\",",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==admm_4rooms_coord_main:[27:35]\n==admm_4rooms_main:[46:54]\n    )\n    mas.run(until=until)\n    results = mas.get_results(cleanup=cleanup)\n\n    if with_plots:\n        import matplotlib.pyplot as plt\n        from agentlib_mpc.utils.analysis import admm_at_time_step\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==agentlib_mpc.modules.estimation.mhe:[135:143]\n==agentlib_mpc.modules.mpc:[272:277]\n        except (RuntimeError, ValueError) as err:\n            raise ConfigurationError(\n                f\"The optimization backend of Agent {self.source} could not \"\n                f\"finish its setup!\"\n            ) from err",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==agentlib_mpc.modules.minlp_mpc:[103:109]\n==agentlib_mpc.modules.mpc:[407:412]\n        results_file = self.optimization_backend.config.results_file\n        if not results_file:\n            return\n        os.remove(results_file)\n        os.remove(mpc_datamodels.stats_path(results_file))\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==agentlib_mpc.optimization_backends.casadi_.admm:[114:123]\n==agentlib_mpc.optimization_backends.casadi_.minlp:[70:81]\n        collocation_matrices = self._collocation_polynomial()\n\n        # shorthands\n        n = self.options.prediction_horizon\n        ts = self.options.time_step\n\n        # Initial State\n        x0 = self.add_opt_par(sys.initial_state)\n        xk = self.add_opt_var(sys.states, lb=x0, ub=x0, guess=x0)",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==agentlib_mpc.optimization_backends.casadi_.basic:[118:129]\n==agentlib_mpc.optimization_backends.casadi_.full:[49:58]\n        collocation_matrices = self._collocation_polynomial()\n\n        # shorthands\n        n = self.options.prediction_horizon\n        ts = self.options.time_step\n\n        # Initial State\n        x0 = self.add_opt_par(sys.initial_state)\n        xk = self.add_opt_var(sys.states, lb=x0, ub=x0, guess=x0)\n\n        # Parameters that are constant over the horizon",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==agentlib_mpc.optimization_backends.backend:[65:70]\n==agentlib_mpc.optimization_backends.casadi_.minlp_cia:[40:45]\n        if res_file and info.data[\"save_results\"]:\n            if overwrite_result_file:\n                try:\n                    os.remove(res_file)\n                    os.remove(mpc_datamodels.stats_path(res_file))",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==agentlib_mpc.utils.plotting.admm_dashboard:[13:18]\n==agentlib_mpc.utils.plotting.interactive:[13:18]\ntry:\n    import dash\n    from dash import html, dcc\n    from dash.dependencies import Input, Output, State\n    import plotly.graph_objects as go",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.three_zone_datadriven_admm.models.Room_model:[2:7]\n==examples.three_zone_datadriven_admm.models.simulation_model:[7:12]\nfrom agentlib_mpc.models.casadi_model import (\n    CasadiInput,\n    CasadiState,\n    CasadiParameter,\n    CasadiOutput,",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.linreg.model:[4:9]\n==examples.three_zone_datadriven_admm.models.simulation_model:[8:13]\n    CasadiInput,\n    CasadiState,\n    CasadiParameter,\n    CasadiOutput,\n    CasadiModel,",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.gpr.training_gpr:[103:108]\n==examples.one_room_mpc.linreg.training_linreg:[98:103]\n                \"use_values_for_incomplete_data\": True,\n                \"data_sources\": [\"results//simulation_data_14days.csv\"],\n                \"save_data\": True,\n                \"save_ml_model\": True,\n                \"save_plots\": True,",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.physical.mixed_integer.mixed_integer_mpc:[221:227]\n==examples.one_room_mpc.physical.mixed_integer.mixed_integer_mpc_cia:[219:228]\n    if with_plots:\n        # show_dashboard(results[\"myMPCAgent\"][\"myMPC\"])\n\n        import matplotlib.pyplot as plt\n        from agentlib_mpc.utils.plotting.mpc import plot_mpc\n\n        fig, ax = plt.subplots(3, 1, sharex=True)\n        mpc_results = results[\"myMPCAgent\"][\"myMPC\"]\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.physical.simple_mpc_with_time_variant_inputs:[104:113]\n==examples.three_zone_datadriven_admm.custom_modules.predictor:[126:134]\n        pass\n\n    def process(self):\n        \"\"\"Sets a new prediction at each time step.\"\"\"\n        self.env.process(self.send_comfort_trajectories())\n        while True:\n            ts = self.get(\"sampling_time\").value\n            n = self.get(\"prediction_length\").value",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.admm.models.ca_cooler_model:[30:35]\n==examples.one_room_mpc.physical.simple_mpc_time_dependent_obj:[83:88]\n        CasadiParameter(\n            name=\"r_mDot\",\n            value=1,\n            unit=\"-\",\n            description=\"Weight for mDot in objective function\",",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.physical.mixed_integer.mixed_integer_mpc:[0:7]\n==examples.one_room_mpc.physical.simple_mpc_time_dependent_obj:[0:6]\nimport logging\nimport os\nfrom pathlib import Path\nfrom typing import List\n\nimport casadi as ca\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.physical.simple_mpc_time_dependent_obj:[21:31]\n==examples.one_room_mpc.physical.with_change_control_penalty:[15:25]\nlogger = logging.getLogger(__name__)\n\n# script variables\nub = 295.15\n\n\nclass MyCasadiModelConfig(CasadiModelConfig):\n    inputs: List[CasadiInput] = [\n        # controls\n        CasadiInput(",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.one_room_mpc.physical.simple_mpc_time_dependent_obj:[27:33]\n==examples.one_room_mpc.physical.simple_mpc_with_time_variant_inputs:[137:143]\nclass MyCasadiModelConfig(CasadiModelConfig):\n    inputs: List[CasadiInput] = [\n        # controls\n        CasadiInput(\n            name=\"mDot\",\n            value=0.0225,",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==examples.admm.models.ca_cooler_model:[11:17]\n==models.room_model:[11:17]\n    inputs: list[CasadiInput] = [\n        # controls\n        CasadiInput(\n            name=\"mDot\",\n            value=0.0225,\n            unit=\"kg/s\",",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==admm_4rooms_main_coord:[66:73]\n==examples.admm.admm_example_coordinator:[115:122]\n    return results\n\n\nif __name__ == \"__main__\":\n    run_example(\n        with_plots=True,\n        until=1800,",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "fixtures.ann",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "tests/fixtures/ann.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==admm_4rooms_main:[0:8]\n==admm_4rooms_main_coord:[0:6]\nimport json\nimport os\nimport logging\nfrom agentlib.utils.multi_agent_system import LocalMASAgency\n\n\ndef configs() -> list[dict]:\n    agent_configs = [",
            "message-id": "R0801"
        }
    ],
    "stats": {
        "bad_names": {
            "argument": 2,
            "attr": 5,
            "klass": 0,
            "class_attribute": 0,
            "class_const": 13,
            "const": 9,
            "inlinevar": 0,
            "function": 4,
            "method": 2,
            "module": 7,
            "variable": 157,
            "typevar": 0,
            "typealias": 0
        },
        "by_module": {
            "admm_4rooms_main_coord": {
                "convention": 6,
                "error": 2,
                "fatal": 0,
                "info": 0,
                "refactor": 1,
                "statement": 37,
                "warning": 3
            },
            "admm_4rooms_main": {
                "convention": 8,
                "error": 2,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 40,
                "warning": 6
            },
            "models.rlt_model": {
                "convention": 2,
                "error": 0,
                "fatal": 1,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 1
            },
            "models.room_model": {
                "convention": 3,
                "error": 0,
                "fatal": 1,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 1
            },
            "examples.output_ann.generate_training_data": {
                "convention": 1,
                "error": 0,
                "fatal": 1,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "animate": {
                "convention": 4,
                "error": 2,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 29,
                "warning": 1
            },
            "admm_4rooms_coord_main": {
                "convention": 14,
                "error": 2,
                "fatal": 0,
                "info": 0,
                "refactor": 1,
                "statement": 53,
                "warning": 3
            },
            "examples.one_room_mpc.physical.simple_mpc_time_dependent_obj": {
                "convention": 5,
                "error": 0,
                "fatal": 1,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 1
            },
            "examples.one_room_mpc.physical.simple_mpc_multiple_shooting": {
                "convention": 4,
                "error": 0,
                "fatal": 1,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 1
            },
            "examples.one_room_mpc.physical.simple_mpc_with_clonemap": {
                "convention": 24,
                "error": 1,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 14,
                "warning": 1
            },
            "examples.one_room_mpc.physical.simple_mpc": {
                "convention": 1,
                "error": 0,
                "fatal": 1,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 1
            },
            "examples.one_room_mpc.physical.simple_mpc_with_time_variant_inputs": {
                "convention": 1,
                "error": 0,
                "fatal": 1,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "examples.one_room_mpc.physical.with_change_control_penalty": {
                "convention": 1,
                "error": 0,
                "fatal": 1,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 1
            },
            "examples.one_room_mpc.physical.mixed_integer.mixed_integer_mpc": {
                "convention": 2,
                "error": 0,
                "fatal": 1,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 1
            },
            "examples.one_room_mpc.physical.mixed_integer.mixed_integer_mpc_cia": {
                "convention": 2,
                "error": 0,
                "fatal": 1,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 1
            },
            "examples.one_room_mpc.linreg.training_linreg": {
                "convention": 20,
                "error": 3,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 44,
                "warning": 4
            },
            "examples.one_room_mpc.linreg.model": {
                "convention": 1,
                "error": 0,
                "fatal": 1,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "examples.one_room_mpc.linreg.simple_mpc_linreg": {
                "convention": 7,
                "error": 2,
                "fatal": 0,
                "info": 0,
                "refactor": 1,
                "statement": 54,
                "warning": 2
            },
            "examples.one_room_mpc.gpr.simple_mpc_gpr": {
                "convention": 7,
                "error": 2,
                "fatal": 0,
                "info": 0,
                "refactor": 1,
                "statement": 54,
                "warning": 2
            },
            "examples.one_room_mpc.gpr.training_gpr": {
                "convention": 10,
                "error": 3,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 44,
                "warning": 4
            },
            "examples.one_room_mpc.gpr.model": {
                "convention": 1,
                "error": 0,
                "fatal": 1,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "examples.one_room_mpc.ann.training_nn": {
                "convention": 10,
                "error": 3,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 44,
                "warning": 4
            },
            "examples.one_room_mpc.ann.simple_mpc_nn": {
                "convention": 9,
                "error": 2,
                "fatal": 0,
                "info": 0,
                "refactor": 1,
                "statement": 57,
                "warning": 2
            },
            "examples.one_room_mpc.ann.model": {
                "convention": 1,
                "error": 0,
                "fatal": 1,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "examples.one_room_mpc.ann.with_learned_cost.training_nn": {
                "convention": 10,
                "error": 3,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 44,
                "warning": 4
            },
            "examples.one_room_mpc.ann.with_learned_cost.simple_mpc_nn": {
                "convention": 6,
                "error": 2,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 44,
                "warning": 4
            },
            "examples.one_room_mpc.ann.with_learned_cost.plot_ann": {
                "convention": 7,
                "error": 7,
                "fatal": 0,
                "info": 0,
                "refactor": 1,
                "statement": 48,
                "warning": 2
            },
            "examples.one_room_mpc.ann.with_learned_cost.model": {
                "convention": 1,
                "error": 0,
                "fatal": 1,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "examples.admm.admm_example_multiprocessing": {
                "convention": 9,
                "error": 3,
                "fatal": 0,
                "info": 0,
                "refactor": 3,
                "statement": 54,
                "warning": 4
            },
            "examples.admm.admm_example_local": {
                "convention": 8,
                "error": 2,
                "fatal": 0,
                "info": 0,
                "refactor": 2,
                "statement": 48,
                "warning": 3
            },
            "examples.admm.admm_example_coordinator": {
                "convention": 7,
                "error": 3,
                "fatal": 0,
                "info": 0,
                "refactor": 2,
                "statement": 50,
                "warning": 7
            },
            "examples.admm.admm_example_coordinator_multiprocessing": {
                "convention": 7,
                "error": 3,
                "fatal": 0,
                "info": 0,
                "refactor": 1,
                "statement": 48,
                "warning": 4
            },
            "examples.admm.models.simulation_model": {
                "convention": 1,
                "error": 0,
                "fatal": 1,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "examples.admm.models.ca_room_model": {
                "convention": 3,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 12,
                "warning": 3
            },
            "examples.admm.models.ca_cooler_model": {
                "convention": 4,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 13,
                "warning": 0
            },
            "examples.Estimators.mhe_example": {
                "convention": 1,
                "error": 0,
                "fatal": 1,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 1
            },
            "examples.three_zone_datadriven_admm.admm_3zone_sim": {
                "convention": 6,
                "error": 1,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 32,
                "warning": 4
            },
            "examples.three_zone_datadriven_admm.plot_ADMM_anim": {
                "convention": 29,
                "error": 6,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 80,
                "warning": 4
            },
            "examples.three_zone_datadriven_admm.plot": {
                "convention": 24,
                "error": 3,
                "fatal": 0,
                "info": 0,
                "refactor": 2,
                "statement": 174,
                "warning": 12
            },
            "examples.three_zone_datadriven_admm.three_zone_util": {
                "convention": 3,
                "error": 2,
                "fatal": 0,
                "info": 0,
                "refactor": 4,
                "statement": 64,
                "warning": 3
            },
            "examples.three_zone_datadriven_admm.training_direct": {
                "convention": 7,
                "error": 0,
                "fatal": 1,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "examples.three_zone_datadriven_admm.plotting_agent": {
                "convention": 1,
                "error": 3,
                "fatal": 1,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "examples.three_zone_datadriven_admm.models.CCA": {
                "convention": 3,
                "error": 0,
                "fatal": 1,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 1
            },
            "examples.three_zone_datadriven_admm.models.simulation_model": {
                "convention": 1,
                "error": 0,
                "fatal": 1,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "examples.three_zone_datadriven_admm.models.Disturbances": {
                "convention": 15,
                "error": 3,
                "fatal": 0,
                "info": 0,
                "refactor": 1,
                "statement": 32,
                "warning": 1
            },
            "examples.three_zone_datadriven_admm.models.AHU": {
                "convention": 3,
                "error": 0,
                "fatal": 1,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 1
            },
            "examples.three_zone_datadriven_admm.models.Room_model": {
                "convention": 2,
                "error": 0,
                "fatal": 1,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "examples.three_zone_datadriven_admm.custom_modules.predictor": {
                "convention": 11,
                "error": 3,
                "fatal": 0,
                "info": 0,
                "refactor": 1,
                "statement": 82,
                "warning": 4
            },
            "agentlib_mpc.__init__": {
                "convention": 0,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 3,
                "warning": 0
            },
            "agentlib_mpc.models.casadi_predictor": {
                "convention": 1,
                "error": 3,
                "fatal": 1,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "agentlib_mpc.models.serialized_ml_model": {
                "convention": 11,
                "error": 6,
                "fatal": 1,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "agentlib_mpc.models.casadi_ml_model": {
                "convention": 1,
                "error": 0,
                "fatal": 1,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "agentlib_mpc.models.casadi_model": {
                "convention": 2,
                "error": 0,
                "fatal": 1,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "agentlib_mpc.models.__init__": {
                "convention": 26,
                "error": 1,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 2,
                "warning": 0
            },
            "agentlib_mpc.utils.sampling": {
                "convention": 1,
                "error": 0,
                "fatal": 1,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "agentlib_mpc.utils.analysis": {
                "convention": 1,
                "error": 0,
                "fatal": 1,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "agentlib_mpc.utils.__init__": {
                "convention": 0,
                "error": 0,
                "fatal": 1,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "agentlib_mpc.utils.plotting.interactive": {
                "convention": 1,
                "error": 1,
                "fatal": 1,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "agentlib_mpc.utils.plotting.admm_consensus_shades": {
                "convention": 1,
                "error": 2,
                "fatal": 0,
                "info": 0,
                "refactor": 1,
                "statement": 26,
                "warning": 7
            },
            "agentlib_mpc.utils.plotting.basic": {
                "convention": 0,
                "error": 0,
                "fatal": 1,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "agentlib_mpc.utils.plotting.mpc": {
                "convention": 1,
                "error": 0,
                "fatal": 1,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "agentlib_mpc.utils.plotting.discretization_structure": {
                "convention": 2,
                "error": 2,
                "fatal": 1,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "agentlib_mpc.utils.plotting.ml_model_test": {
                "convention": 2,
                "error": 0,
                "fatal": 1,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "agentlib_mpc.utils.plotting.admm_dashboard": {
                "convention": 3,
                "error": 0,
                "fatal": 1,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "agentlib_mpc.utils.plotting.admm_residuals": {
                "convention": 2,
                "error": 0,
                "fatal": 1,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "agentlib_mpc.utils.plotting.admm_animation": {
                "convention": 0,
                "error": 0,
                "fatal": 1,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "agentlib_mpc.utils.plotting.__init__": {
                "convention": 11,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "agentlib_mpc.data_structures.mpc_datamodels": {
                "convention": 0,
                "error": 0,
                "fatal": 1,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "agentlib_mpc.data_structures.ml_model_datatypes": {
                "convention": 1,
                "error": 0,
                "fatal": 1,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "agentlib_mpc.data_structures.admm_datatypes": {
                "convention": 0,
                "error": 0,
                "fatal": 1,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "agentlib_mpc.data_structures.casadi_utils": {
                "convention": 0,
                "error": 0,
                "fatal": 1,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "agentlib_mpc.data_structures.interpolation": {
                "convention": 9,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 9,
                "warning": 0
            },
            "agentlib_mpc.data_structures.coordinator_datatypes": {
                "convention": 11,
                "error": 2,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 51,
                "warning": 1
            },
            "agentlib_mpc.data_structures.__init__": {
                "convention": 1,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "agentlib_mpc.optimization_backends.backend": {
                "convention": 1,
                "error": 0,
                "fatal": 1,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "agentlib_mpc.optimization_backends.__init__": {
                "convention": 1,
                "error": 1,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 15,
                "warning": 0
            },
            "agentlib_mpc.optimization_backends.casadi_.basic": {
                "convention": 36,
                "error": 2,
                "fatal": 0,
                "info": 0,
                "refactor": 5,
                "statement": 194,
                "warning": 1
            },
            "agentlib_mpc.optimization_backends.casadi_.casadi_ml": {
                "convention": 1,
                "error": 1,
                "fatal": 1,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "agentlib_mpc.optimization_backends.casadi_.full": {
                "convention": 20,
                "error": 1,
                "fatal": 0,
                "info": 0,
                "refactor": 2,
                "statement": 74,
                "warning": 1
            },
            "agentlib_mpc.optimization_backends.casadi_.admm": {
                "convention": 14,
                "error": 2,
                "fatal": 0,
                "info": 0,
                "refactor": 3,
                "statement": 161,
                "warning": 2
            },
            "agentlib_mpc.optimization_backends.casadi_.minlp": {
                "convention": 20,
                "error": 2,
                "fatal": 0,
                "info": 0,
                "refactor": 2,
                "statement": 82,
                "warning": 0
            },
            "agentlib_mpc.optimization_backends.casadi_.minlp_cia": {
                "convention": 1,
                "error": 0,
                "fatal": 1,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 1
            },
            "agentlib_mpc.optimization_backends.casadi_.mhe": {
                "convention": 1,
                "error": 0,
                "fatal": 1,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "agentlib_mpc.optimization_backends.casadi_.casadi_admm_ml": {
                "convention": 1,
                "error": 0,
                "fatal": 1,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "agentlib_mpc.optimization_backends.casadi_.__init__": {
                "convention": 0,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "agentlib_mpc.optimization_backends.casadi_.core.VariableGroup": {
                "convention": 5,
                "error": 1,
                "fatal": 0,
                "info": 0,
                "refactor": 3,
                "statement": 84,
                "warning": 0
            },
            "agentlib_mpc.optimization_backends.casadi_.core.casadi_backend": {
                "convention": 1,
                "error": 0,
                "fatal": 1,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "agentlib_mpc.optimization_backends.casadi_.core.__init__": {
                "convention": 0,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "agentlib_mpc.optimization_backends.casadi_.core.system": {
                "convention": 0,
                "error": 0,
                "fatal": 1,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "agentlib_mpc.optimization_backends.casadi_.core.discretization": {
                "convention": 0,
                "error": 0,
                "fatal": 1,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "agentlib_mpc.modules.data_source": {
                "convention": 4,
                "error": 3,
                "fatal": 1,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "agentlib_mpc.modules.mpc": {
                "convention": 0,
                "error": 0,
                "fatal": 1,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "agentlib_mpc.modules.minlp_mpc": {
                "convention": 9,
                "error": 2,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 43,
                "warning": 1
            },
            "agentlib_mpc.modules.ml_model_simulator": {
                "convention": 5,
                "error": 6,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 41,
                "warning": 0
            },
            "agentlib_mpc.modules.mpc_full": {
                "convention": 4,
                "error": 5,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 80,
                "warning": 3
            },
            "agentlib_mpc.modules.__init__": {
                "convention": 2,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 9,
                "warning": 0
            },
            "agentlib_mpc.modules.estimation.mhe": {
                "convention": 1,
                "error": 0,
                "fatal": 1,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "agentlib_mpc.modules.estimation.__init__": {
                "convention": 0,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "agentlib_mpc.modules.dmpc.coordinator": {
                "convention": 2,
                "error": 0,
                "fatal": 1,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "agentlib_mpc.modules.dmpc.employee": {
                "convention": 10,
                "error": 3,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 65,
                "warning": 4
            },
            "agentlib_mpc.modules.dmpc.__init__": {
                "convention": 1,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 4,
                "warning": 0
            },
            "agentlib_mpc.modules.dmpc.admm.admm_coordinated": {
                "convention": 0,
                "error": 0,
                "fatal": 1,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "agentlib_mpc.modules.dmpc.admm.admm": {
                "convention": 0,
                "error": 0,
                "fatal": 1,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "agentlib_mpc.modules.dmpc.admm.admm_coordinator": {
                "convention": 2,
                "error": 0,
                "fatal": 1,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "agentlib_mpc.modules.dmpc.admm.__init__": {
                "convention": 1,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "agentlib_mpc.modules.ml_model_training.data_reduction": {
                "convention": 8,
                "error": 5,
                "fatal": 0,
                "info": 0,
                "refactor": 2,
                "statement": 45,
                "warning": 3
            },
            "agentlib_mpc.modules.ml_model_training.__init__": {
                "convention": 0,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "agentlib_mpc.modules.ml_model_training.setpoint_generator": {
                "convention": 2,
                "error": 1,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 46,
                "warning": 0
            },
            "agentlib_mpc.modules.ml_model_training.ml_model_trainer": {
                "convention": 3,
                "error": 0,
                "fatal": 1,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "agentlib_mpc.modules.InputPrediction.try_predictor": {
                "convention": 6,
                "error": 4,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 25,
                "warning": 0
            },
            "agentlib_mpc.modules.InputPrediction.__init__": {
                "convention": 1,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "docs.source.conf": {
                "convention": 0,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "ci.test_examples": {
                "convention": 5,
                "error": 4,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 51,
                "warning": 2
            },
            "test_serialized_ann": {
                "convention": 4,
                "error": 2,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 45,
                "warning": 0
            },
            "test_full_backend": {
                "convention": 0,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "test_casadi_ml_model": {
                "convention": 3,
                "error": 1,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 13,
                "warning": 0
            },
            "test_admm": {
                "convention": 7,
                "error": 3,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 86,
                "warning": 17
            },
            "test_casadi_backend": {
                "convention": 12,
                "error": 2,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 70,
                "warning": 12
            },
            "test_serialized_linreg": {
                "convention": 6,
                "error": 2,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 39,
                "warning": 0
            },
            "test_serialized_gpr": {
                "convention": 6,
                "error": 2,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 39,
                "warning": 1
            },
            "conftest": {
                "convention": 3,
                "error": 2,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 9,
                "warning": 1
            },
            "test_miqp_backend": {
                "convention": 0,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "test_mpc": {
                "convention": 15,
                "error": 5,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 89,
                "warning": 2
            },
            "fixtures.gpr": {
                "convention": 2,
                "error": 1,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 11,
                "warning": 0
            },
            "fixtures.data_generator": {
                "convention": 4,
                "error": 2,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 22,
                "warning": 0
            },
            "fixtures.linreg": {
                "convention": 2,
                "error": 1,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 10,
                "warning": 1
            },
            "fixtures.casadi_test_model": {
                "convention": 1,
                "error": 0,
                "fatal": 1,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "fixtures.ann": {
                "convention": 3,
                "error": 4,
                "fatal": 0,
                "info": 0,
                "refactor": 291,
                "statement": 26,
                "warning": 2
            }
        },
        "by_msg": {
            "astroid-error": 58,
            "missing-module-docstring": 90,
            "import-error": 151,
            "missing-function-docstring": 109,
            "too-many-locals": 24,
            "unspecified-encoding": 16,
            "invalid-name": 199,
            "import-outside-toplevel": 23,
            "unused-variable": 36,
            "unused-argument": 13,
            "unused-import": 14,
            "missing-class-docstring": 51,
            "f-string-without-interpolation": 7,
            "modified-iterating-list": 1,
            "expression-not-assigned": 1,
            "wildcard-import": 4,
            "wrong-import-position": 21,
            "line-too-long": 35,
            "anomalous-backslash-in-string": 22,
            "wrong-import-order": 72,
            "ungrouped-imports": 37,
            "unreachable": 1,
            "raise-missing-from": 1,
            "no-name-in-module": 2,
            "too-many-arguments": 6,
            "inconsistent-return-statements": 1,
            "redefined-outer-name": 17,
            "reimported": 1,
            "pointless-string-statement": 2,
            "consider-using-enumerate": 1,
            "no-else-return": 5,
            "superfluous-parens": 6,
            "attribute-defined-outside-init": 14,
            "undefined-variable": 1,
            "trailing-newlines": 1,
            "too-many-instance-attributes": 2,
            "logging-fstring-interpolation": 1,
            "not-an-iterable": 1,
            "unnecessary-pass": 1,
            "unnecessary-ellipsis": 2,
            "super-with-arguments": 1,
            "use-list-literal": 1,
            "protected-access": 14,
            "duplicate-code": 291
        },
        "code_type_count": {
            "code": 0,
            "comment": 0,
            "docstring": 0,
            "empty": 0,
            "total": 0
        },
        "dependencies": {
            "agentlib_mpc.utils.analysis": [
                "examples.admm.admm_example_local",
                "examples.one_room_mpc.ann.with_learned_cost.plot_ann",
                "admm_4rooms_coord_main",
                "examples.admm.admm_example_coordinator",
                "examples.admm.admm_example_coordinator_multiprocessing",
                "agentlib_mpc.utils.plotting.admm_consensus_shades",
                "admm_4rooms_main",
                "examples.three_zone_datadriven_admm.plot",
                "agentlib_mpc.utils.plotting.discretization_structure",
                "examples.three_zone_datadriven_admm.plot_ADMM_anim",
                "examples.admm.admm_example_multiprocessing",
                "animate"
            ],
            "agentlib_mpc.models.casadi_model": [
                "models.room_model",
                "examples.admm.models.simulation_model",
                "examples.three_zone_datadriven_admm.models.CCA",
                "examples.three_zone_datadriven_admm.models.simulation_model",
                "agentlib_mpc.optimization_backends.casadi_.full",
                "agentlib_mpc.optimization_backends.casadi_.admm",
                "examples.admm.models.ca_cooler_model",
                "test_casadi_backend",
                "test_casadi_ml_model",
                "examples.admm.models.ca_room_model",
                "agentlib_mpc.optimization_backends.casadi_.basic",
                "agentlib_mpc.optimization_backends.casadi_.minlp",
                "agentlib_mpc.optimization_backends.casadi_.core.VariableGroup",
                "examples.three_zone_datadriven_admm.models.AHU",
                "models.rlt_model"
            ],
            "agentlib_mpc.utils.plotting.admm_animation": [
                "animate"
            ],
            "agentlib_mpc.utils.plotting.basic": [
                "agentlib_mpc.utils.plotting.admm_consensus_shades",
                "agentlib_mpc.utils.plotting.discretization_structure",
                "examples.three_zone_datadriven_admm.plot",
                "animate"
            ],
            "model": [
                "examples.one_room_mpc.ann.training_nn",
                "examples.one_room_mpc.ann.with_learned_cost.training_nn",
                "examples.one_room_mpc.gpr.training_gpr",
                "examples.one_room_mpc.linreg.training_linreg"
            ],
            "agentlib_mpc.utils.plotting.mpc": [
                "examples.one_room_mpc.linreg.simple_mpc_linreg",
                "agentlib_mpc.utils.plotting.admm_consensus_shades",
                "examples.one_room_mpc.ann.simple_mpc_nn",
                "examples.one_room_mpc.gpr.simple_mpc_gpr",
                "examples.three_zone_datadriven_admm.plot",
                "examples.one_room_mpc.ann.with_learned_cost.simple_mpc_nn"
            ],
            "training_linreg": [
                "examples.one_room_mpc.linreg.simple_mpc_linreg"
            ],
            "training_gpr": [
                "examples.one_room_mpc.gpr.simple_mpc_gpr"
            ],
            "training_nn": [
                "examples.one_room_mpc.ann.with_learned_cost.simple_mpc_nn",
                "examples.one_room_mpc.ann.simple_mpc_nn"
            ],
            "agentlib_mpc.utils.plotting.admm_dashboard": [
                "examples.admm.admm_example_coordinator"
            ],
            "agentlib_mpc.utils.plotting.interactive": [
                "examples.admm.admm_example_coordinator"
            ],
            "training_direct": [
                "examples.three_zone_datadriven_admm.admm_3zone_sim"
            ],
            "plot": [
                "examples.three_zone_datadriven_admm.admm_3zone_sim"
            ],
            "agentlib_mpc.data_structures.admm_datatypes": [
                "agentlib_mpc.optimization_backends.casadi_.admm",
                "test_admm",
                "examples.three_zone_datadriven_admm.plot",
                "agentlib_mpc.utils.plotting.admm_consensus_shades"
            ],
            "examples.three_zone_datadriven_admm.three_zone_util": [
                "examples.three_zone_datadriven_admm.custom_modules.predictor",
                "examples.three_zone_datadriven_admm.models.Disturbances"
            ],
            "agentlib_mpc.modules": [
                "agentlib_mpc"
            ],
            "agentlib_mpc.models": [
                "agentlib_mpc"
            ],
            "agentlib_mpc.data_structures.casadi_utils": [
                "agentlib_mpc.optimization_backends.casadi_.full",
                "agentlib_mpc.optimization_backends.casadi_.admm",
                "test_casadi_backend",
                "agentlib_mpc.optimization_backends.casadi_.basic",
                "agentlib_mpc.optimization_backends.casadi_.minlp"
            ],
            "agentlib_mpc.data_structures.mpc_datamodels": [
                "agentlib_mpc.optimization_backends.casadi_.full",
                "agentlib_mpc.optimization_backends.casadi_.admm",
                "agentlib_mpc.modules.mpc_full",
                "test_casadi_backend",
                "agentlib_mpc.modules.minlp_mpc",
                "agentlib_mpc.optimization_backends.casadi_.basic",
                "agentlib_mpc.optimization_backends.casadi_.minlp"
            ],
            "agentlib_mpc.optimization_backends.casadi_.core.casadi_backend": [
                "agentlib_mpc.optimization_backends.casadi_.full",
                "agentlib_mpc.optimization_backends.casadi_.basic",
                "agentlib_mpc.optimization_backends.casadi_.minlp"
            ],
            "agentlib_mpc.optimization_backends.casadi_.core.VariableGroup": [
                "agentlib_mpc.optimization_backends.casadi_.full",
                "agentlib_mpc.optimization_backends.casadi_.admm",
                "test_casadi_backend",
                "agentlib_mpc.optimization_backends.casadi_.basic",
                "agentlib_mpc.optimization_backends.casadi_.minlp"
            ],
            "agentlib_mpc.optimization_backends.casadi_.core.discretization": [
                "test_casadi_backend",
                "agentlib_mpc.optimization_backends.casadi_.admm",
                "agentlib_mpc.optimization_backends.casadi_.basic"
            ],
            "agentlib_mpc.optimization_backends.casadi_.core.system": [
                "agentlib_mpc.optimization_backends.casadi_.basic"
            ],
            "agentlib_mpc.optimization_backends.casadi_.basic": [
                "agentlib_mpc.optimization_backends.casadi_.full",
                "agentlib_mpc.optimization_backends.casadi_.admm",
                "agentlib_mpc.optimization_backends.casadi_.minlp",
                "test_casadi_backend"
            ],
            "agentlib_mpc.optimization_backends.backend": [
                "agentlib_mpc.optimization_backends.casadi_.admm",
                "test_mpc"
            ],
            "agentlib_mpc.optimization_backends.casadi_.full": [
                "agentlib_mpc.optimization_backends.casadi_.admm"
            ],
            "agentlib_mpc.modules.mpc": [
                "agentlib_mpc.modules.mpc_full",
                "agentlib_mpc.modules.minlp_mpc"
            ],
            "agentlib_mpc.optimization_backends.casadi_.minlp_cia": [
                "agentlib_mpc.modules.minlp_mpc"
            ],
            "agentlib_mpc.models.casadi_ml_model": [
                "agentlib_mpc.modules.ml_model_simulator",
                "test_casadi_ml_model"
            ],
            "agentlib_mpc.models.serialized_ml_model": [
                "agentlib_mpc.modules.ml_model_simulator",
                "test_serialized_linreg",
                "fixtures.linreg",
                "fixtures.ann",
                "fixtures.gpr",
                "test_serialized_ann",
                "test_serialized_gpr"
            ],
            "agentlib_mpc.data_structures.coordinator_datatypes": [
                "agentlib_mpc.modules.dmpc.employee"
            ],
            "agentlib_mpc.modules.mpc_full": [
                "agentlib_mpc.modules.dmpc"
            ],
            "agentlib_mpc.data_structures.ml_model_datatypes": [
                "fixtures.ann",
                "test_serialized_ann",
                "test_serialized_linreg",
                "test_serialized_gpr"
            ],
            "agentlib_mpc.models.casadi_predictor": [
                "test_serialized_ann",
                "test_serialized_linreg",
                "test_serialized_gpr"
            ],
            "fixtures.ann": [
                "test_serialized_ann"
            ],
            "fixtures.data_generator": [
                "test_serialized_ann",
                "test_serialized_linreg",
                "test_serialized_gpr"
            ],
            "agentlib_mpc.modules.dmpc.admm.admm": [
                "test_admm"
            ],
            "fixtures.linreg": [
                "test_serialized_linreg"
            ],
            "fixtures.gpr": [
                "test_serialized_gpr"
            ],
            "agentlib_mpc.data_structures.interpolation": [
                "test_mpc"
            ],
            "agentlib_mpc.utils.sampling": [
                "test_mpc"
            ]
        },
        "duplicated_lines": {
            "nb_duplicated_lines": 0,
            "percent_duplicated_lines": 0.0
        },
        "node_count": {
            "function": 81,
            "klass": 83,
            "method": 153,
            "module": 125
        },
        "undocumented": {
            "function": 67,
            "klass": 52,
            "method": 42,
            "module": 90
        },
        "convention": 645,
        "error": 155,
        "fatal": 58,
        "info": 0,
        "refactor": 331,
        "statement": 3081,
        "warning": 168,
        "global_note": 0,
        "nb_duplicated_lines": 5082,
        "percent_duplicated_lines": 20.826161790017213
    },
    "previous": null
}
